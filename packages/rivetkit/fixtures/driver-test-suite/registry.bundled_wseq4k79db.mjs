// src/actor/connection.ts
import * as cbor2 from "cbor-x";

// src/common/versioned-data.ts
var VersionedDataHandler = class {
  constructor(config4) {
    this.config = config4;
  }
  serializeWithEmbeddedVersion(data) {
    const versioned = {
      version: this.config.currentVersion,
      data: this.config.serializeVersion(data)
    };
    return this.embedVersion(versioned);
  }
  deserializeWithEmbeddedVersion(bytes) {
    const versioned = this.extractVersion(bytes);
    return this.deserialize(versioned.data, versioned.version);
  }
  serialize(data, version) {
    return this.config.serializeVersion(data);
  }
  deserialize(bytes, version) {
    if (version === this.config.currentVersion) {
      return this.config.deserializeVersion(bytes);
    }
    if (version > this.config.currentVersion) {
      throw new Error(
        `Cannot decode data from version ${version}, current version is ${this.config.currentVersion}`
      );
    }
    let currentData = this.config.deserializeVersion(bytes);
    let currentVersion = version;
    while (currentVersion < this.config.currentVersion) {
      const migration = this.config.migrations.get(currentVersion);
      if (!migration) {
        throw new Error(
          `No migration found from version ${currentVersion} to ${currentVersion + 1}`
        );
      }
      currentData = migration(currentData);
      currentVersion++;
    }
    return currentData;
  }
  embedVersion(data) {
    const versionBytes = new Uint8Array(4);
    new DataView(versionBytes.buffer).setUint32(0, data.version, true);
    const result = new Uint8Array(versionBytes.length + data.data.length);
    result.set(versionBytes);
    result.set(data.data, versionBytes.length);
    return result;
  }
  extractVersion(bytes) {
    if (bytes.length < 4) {
      throw new Error("Invalid versioned data: too short");
    }
    const version = new DataView(bytes.buffer, bytes.byteOffset).getUint32(
      0,
      true
    );
    const data = bytes.slice(4);
    return { version, data };
  }
};
function createVersionedDataHandler(config4) {
  return new VersionedDataHandler(config4);
}

// dist/schemas/client-protocol/v1.ts
import * as bare from "@bare-ts/lib";
var config = /* @__PURE__ */ bare.Config({});
function readInit(bc) {
  return {
    actorId: bare.readString(bc),
    connectionId: bare.readString(bc),
    connectionToken: bare.readString(bc)
  };
}
function writeInit(bc, x) {
  bare.writeString(bc, x.actorId);
  bare.writeString(bc, x.connectionId);
  bare.writeString(bc, x.connectionToken);
}
function read0(bc) {
  return bare.readBool(bc) ? bare.readData(bc) : null;
}
function write0(bc, x) {
  bare.writeBool(bc, x !== null);
  if (x !== null) {
    bare.writeData(bc, x);
  }
}
function read1(bc) {
  return bare.readBool(bc) ? bare.readUint(bc) : null;
}
function write1(bc, x) {
  bare.writeBool(bc, x !== null);
  if (x !== null) {
    bare.writeUint(bc, x);
  }
}
function readError(bc) {
  return {
    code: bare.readString(bc),
    message: bare.readString(bc),
    metadata: read0(bc),
    actionId: read1(bc)
  };
}
function writeError(bc, x) {
  bare.writeString(bc, x.code);
  bare.writeString(bc, x.message);
  write0(bc, x.metadata);
  write1(bc, x.actionId);
}
function readActionResponse(bc) {
  return {
    id: bare.readUint(bc),
    output: bare.readData(bc)
  };
}
function writeActionResponse(bc, x) {
  bare.writeUint(bc, x.id);
  bare.writeData(bc, x.output);
}
function readEvent(bc) {
  return {
    name: bare.readString(bc),
    args: bare.readData(bc)
  };
}
function writeEvent(bc, x) {
  bare.writeString(bc, x.name);
  bare.writeData(bc, x.args);
}
function readToClientBody(bc) {
  const offset = bc.offset;
  const tag = bare.readU8(bc);
  switch (tag) {
    case 0:
      return { tag: "Init", val: readInit(bc) };
    case 1:
      return { tag: "Error", val: readError(bc) };
    case 2:
      return { tag: "ActionResponse", val: readActionResponse(bc) };
    case 3:
      return { tag: "Event", val: readEvent(bc) };
    default: {
      bc.offset = offset;
      throw new bare.BareError(offset, "invalid tag");
    }
  }
}
function writeToClientBody(bc, x) {
  switch (x.tag) {
    case "Init": {
      bare.writeU8(bc, 0);
      writeInit(bc, x.val);
      break;
    }
    case "Error": {
      bare.writeU8(bc, 1);
      writeError(bc, x.val);
      break;
    }
    case "ActionResponse": {
      bare.writeU8(bc, 2);
      writeActionResponse(bc, x.val);
      break;
    }
    case "Event": {
      bare.writeU8(bc, 3);
      writeEvent(bc, x.val);
      break;
    }
  }
}
function readToClient(bc) {
  return {
    body: readToClientBody(bc)
  };
}
function writeToClient(bc, x) {
  writeToClientBody(bc, x.body);
}
function encodeToClient(x) {
  const bc = new bare.ByteCursor(
    new Uint8Array(config.initialBufferLength),
    config
  );
  writeToClient(bc, x);
  return new Uint8Array(bc.view.buffer, bc.view.byteOffset, bc.offset);
}
function decodeToClient(bytes) {
  const bc = new bare.ByteCursor(bytes, config);
  const result = readToClient(bc);
  if (bc.offset < bc.view.byteLength) {
    throw new bare.BareError(bc.offset, "remaining bytes");
  }
  return result;
}
function readActionRequest(bc) {
  return {
    id: bare.readUint(bc),
    name: bare.readString(bc),
    args: bare.readData(bc)
  };
}
function writeActionRequest(bc, x) {
  bare.writeUint(bc, x.id);
  bare.writeString(bc, x.name);
  bare.writeData(bc, x.args);
}
function readSubscriptionRequest(bc) {
  return {
    eventName: bare.readString(bc),
    subscribe: bare.readBool(bc)
  };
}
function writeSubscriptionRequest(bc, x) {
  bare.writeString(bc, x.eventName);
  bare.writeBool(bc, x.subscribe);
}
function readToServerBody(bc) {
  const offset = bc.offset;
  const tag = bare.readU8(bc);
  switch (tag) {
    case 0:
      return { tag: "ActionRequest", val: readActionRequest(bc) };
    case 1:
      return { tag: "SubscriptionRequest", val: readSubscriptionRequest(bc) };
    default: {
      bc.offset = offset;
      throw new bare.BareError(offset, "invalid tag");
    }
  }
}
function writeToServerBody(bc, x) {
  switch (x.tag) {
    case "ActionRequest": {
      bare.writeU8(bc, 0);
      writeActionRequest(bc, x.val);
      break;
    }
    case "SubscriptionRequest": {
      bare.writeU8(bc, 1);
      writeSubscriptionRequest(bc, x.val);
      break;
    }
  }
}
function readToServer(bc) {
  return {
    body: readToServerBody(bc)
  };
}
function writeToServer(bc, x) {
  writeToServerBody(bc, x.body);
}
function encodeToServer(x) {
  const bc = new bare.ByteCursor(
    new Uint8Array(config.initialBufferLength),
    config
  );
  writeToServer(bc, x);
  return new Uint8Array(bc.view.buffer, bc.view.byteOffset, bc.offset);
}
function decodeToServer(bytes) {
  const bc = new bare.ByteCursor(bytes, config);
  const result = readToServer(bc);
  if (bc.offset < bc.view.byteLength) {
    throw new bare.BareError(bc.offset, "remaining bytes");
  }
  return result;
}
function readHttpActionRequest(bc) {
  return {
    args: bare.readData(bc)
  };
}
function writeHttpActionRequest(bc, x) {
  bare.writeData(bc, x.args);
}
function encodeHttpActionRequest(x) {
  const bc = new bare.ByteCursor(
    new Uint8Array(config.initialBufferLength),
    config
  );
  writeHttpActionRequest(bc, x);
  return new Uint8Array(bc.view.buffer, bc.view.byteOffset, bc.offset);
}
function decodeHttpActionRequest(bytes) {
  const bc = new bare.ByteCursor(bytes, config);
  const result = readHttpActionRequest(bc);
  if (bc.offset < bc.view.byteLength) {
    throw new bare.BareError(bc.offset, "remaining bytes");
  }
  return result;
}
function readHttpActionResponse(bc) {
  return {
    output: bare.readData(bc)
  };
}
function writeHttpActionResponse(bc, x) {
  bare.writeData(bc, x.output);
}
function encodeHttpActionResponse(x) {
  const bc = new bare.ByteCursor(
    new Uint8Array(config.initialBufferLength),
    config
  );
  writeHttpActionResponse(bc, x);
  return new Uint8Array(bc.view.buffer, bc.view.byteOffset, bc.offset);
}
function decodeHttpActionResponse(bytes) {
  const bc = new bare.ByteCursor(bytes, config);
  const result = readHttpActionResponse(bc);
  if (bc.offset < bc.view.byteLength) {
    throw new bare.BareError(bc.offset, "remaining bytes");
  }
  return result;
}
function readHttpResponseError(bc) {
  return {
    code: bare.readString(bc),
    message: bare.readString(bc),
    metadata: read0(bc)
  };
}
function writeHttpResponseError(bc, x) {
  bare.writeString(bc, x.code);
  bare.writeString(bc, x.message);
  write0(bc, x.metadata);
}
function encodeHttpResponseError(x) {
  const bc = new bare.ByteCursor(
    new Uint8Array(config.initialBufferLength),
    config
  );
  writeHttpResponseError(bc, x);
  return new Uint8Array(bc.view.buffer, bc.view.byteOffset, bc.offset);
}
function decodeHttpResponseError(bytes) {
  const bc = new bare.ByteCursor(bytes, config);
  const result = readHttpResponseError(bc);
  if (bc.offset < bc.view.byteLength) {
    throw new bare.BareError(bc.offset, "remaining bytes");
  }
  return result;
}
function readHttpResolveResponse(bc) {
  return {
    actorId: bare.readString(bc)
  };
}
function writeHttpResolveResponse(bc, x) {
  bare.writeString(bc, x.actorId);
}
function encodeHttpResolveResponse(x) {
  const bc = new bare.ByteCursor(
    new Uint8Array(config.initialBufferLength),
    config
  );
  writeHttpResolveResponse(bc, x);
  return new Uint8Array(bc.view.buffer, bc.view.byteOffset, bc.offset);
}
function decodeHttpResolveResponse(bytes) {
  const bc = new bare.ByteCursor(bytes, config);
  const result = readHttpResolveResponse(bc);
  if (bc.offset < bc.view.byteLength) {
    throw new bare.BareError(bc.offset, "remaining bytes");
  }
  return result;
}

// src/schemas/client-protocol/versioned.ts
var CURRENT_VERSION = 1;
var migrations = /* @__PURE__ */ new Map();
var TO_SERVER_VERSIONED = createVersionedDataHandler({
  currentVersion: CURRENT_VERSION,
  migrations,
  serializeVersion: (data) => encodeToServer(data),
  deserializeVersion: (bytes) => decodeToServer(bytes)
});
var TO_CLIENT_VERSIONED = createVersionedDataHandler({
  currentVersion: CURRENT_VERSION,
  migrations,
  serializeVersion: (data) => encodeToClient(data),
  deserializeVersion: (bytes) => decodeToClient(bytes)
});
var HTTP_ACTION_REQUEST_VERSIONED = createVersionedDataHandler({
  currentVersion: CURRENT_VERSION,
  migrations,
  serializeVersion: (data) => encodeHttpActionRequest(data),
  deserializeVersion: (bytes) => decodeHttpActionRequest(bytes)
});
var HTTP_ACTION_RESPONSE_VERSIONED = createVersionedDataHandler({
  currentVersion: CURRENT_VERSION,
  migrations,
  serializeVersion: (data) => encodeHttpActionResponse(data),
  deserializeVersion: (bytes) => decodeHttpActionResponse(bytes)
});
var HTTP_RESPONSE_ERROR_VERSIONED = createVersionedDataHandler({
  currentVersion: CURRENT_VERSION,
  migrations,
  serializeVersion: (data) => encodeHttpResponseError(data),
  deserializeVersion: (bytes) => decodeHttpResponseError(bytes)
});
var HTTP_RESOLVE_REQUEST_VERSIONED = createVersionedDataHandler({
  currentVersion: CURRENT_VERSION,
  migrations,
  serializeVersion: (_) => new Uint8Array(),
  deserializeVersion: (bytes) => null
});
var HTTP_RESOLVE_RESPONSE_VERSIONED = createVersionedDataHandler({
  currentVersion: CURRENT_VERSION,
  migrations,
  serializeVersion: (data) => encodeHttpResolveResponse(data),
  deserializeVersion: (bytes) => decodeHttpResolveResponse(bytes)
});

// src/actor/errors.ts
var INTERNAL_ERROR_CODE = "internal_error";
var INTERNAL_ERROR_DESCRIPTION = "Internal error. Read the server logs for more details.";
var USER_ERROR_CODE = "user_error";
var ActorError = class extends Error {
  constructor(code, message, opts) {
    super(message, { cause: opts?.cause });
    this.code = code;
    this.public = opts?.public ?? false;
    this.metadata = opts?.metadata;
    if (opts?.public) {
      this.statusCode = 400;
    }
  }
  __type = "ActorError";
  public;
  metadata;
  statusCode = 500;
  static isActorError(error) {
    return typeof error === "object" && error.__type === "ActorError";
  }
  toString() {
    return this.message;
  }
  /**
   * Serialize error for HTTP response
   */
  serializeForHttp() {
    return {
      type: this.code,
      message: this.message,
      metadata: this.metadata
    };
  }
};
var InternalError = class extends ActorError {
  constructor(message) {
    super(INTERNAL_ERROR_CODE, message);
  }
};
var Unreachable = class extends InternalError {
  constructor(x) {
    super(`Unreachable case: ${x}`);
  }
};
var StateNotEnabled = class extends ActorError {
  constructor() {
    super(
      "state_not_enabled",
      "State not enabled. Must implement `createState` or `state` to use state. (https://www.rivet.gg/docs/actors/state/#initializing-state)"
    );
  }
};
var ConnStateNotEnabled = class extends ActorError {
  constructor() {
    super(
      "conn_state_not_enabled",
      "Connection state not enabled. Must implement `createConnectionState` or `connectionState` to use connection state. (https://www.rivet.gg/docs/actors/connections/#connection-state)"
    );
  }
};
var VarsNotEnabled = class extends ActorError {
  constructor() {
    super(
      "vars_not_enabled",
      "Variables not enabled. Must implement `createVars` or `vars` to use state. (https://www.rivet.gg/docs/actors/ephemeral-variables/#initializing-variables)"
    );
  }
};
var ActionTimedOut = class extends ActorError {
  constructor() {
    super(
      "action_timed_out",
      "Action timed out. This can be increased with: `actor({ options: { action: { timeout: ... } } })`",
      { public: true }
    );
  }
};
var ActionNotFound = class extends ActorError {
  constructor(name) {
    super(
      "action_not_found",
      `Action '${name}' not found. Validate the action exists on your actor.`,
      { public: true }
    );
  }
};
var InvalidEncoding = class extends ActorError {
  constructor(format) {
    super(
      "invalid_encoding",
      `Invalid encoding \`${format}\`. (https://www.rivet.gg/docs/actors/clients/#actor-client)`,
      {
        public: true
      }
    );
  }
};
var ConnNotFound = class extends ActorError {
  constructor(id) {
    super("conn_not_found", `Connection not found for ID: ${id}`, {
      public: true
    });
  }
};
var IncorrectConnToken = class extends ActorError {
  constructor() {
    super("incorrect_conn_token", "Incorrect connection token.", {
      public: true
    });
  }
};
var MessageTooLong = class extends ActorError {
  constructor() {
    super(
      "message_too_long",
      "Message too long. This can be configured with: `registry.runServer({ maxIncomingMessageSize: ... })`",
      { public: true }
    );
  }
};
var MalformedMessage = class extends ActorError {
  constructor(cause) {
    super("malformed_message", `Malformed message: ${cause}`, {
      public: true,
      cause
    });
  }
};
var InvalidStateType = class extends ActorError {
  constructor(opts) {
    let msg = "";
    if (opts?.path) {
      msg += `Attempted to set invalid state at path \`${opts.path}\`.`;
    } else {
      msg += "Attempted to set invalid state.";
    }
    msg += " Valid types include: null, undefined, boolean, string, number, BigInt, Date, RegExp, Error, typed arrays (Uint8Array, Int8Array, Float32Array, etc.), Map, Set, Array, and plain objects. (https://www.rivet.gg/docs/actors/state/#limitations)";
    super("invalid_state_type", msg);
  }
};
var Unsupported = class extends ActorError {
  constructor(feature) {
    super("unsupported", `Unsupported feature: ${feature}`);
  }
};
var UserError = class extends ActorError {
  /**
   * Constructs a new UserError instance.
   *
   * @param message - The error message to be displayed.
   * @param opts - Optional parameters for the error, including a machine-readable code and additional metadata.
   */
  constructor(message, opts) {
    super(opts?.code ?? USER_ERROR_CODE, message, {
      public: true,
      metadata: opts?.metadata
    });
  }
};
var InvalidQueryJSON = class extends ActorError {
  constructor(error) {
    super("invalid_query_json", `Invalid query JSON: ${error}`, {
      public: true,
      cause: error
    });
  }
};
var InvalidRequest = class extends ActorError {
  constructor(error) {
    super("invalid_request", `Invalid request: ${error}`, {
      public: true,
      cause: error
    });
  }
};
var ActorNotFound = class extends ActorError {
  constructor(identifier) {
    super(
      "actor_not_found",
      identifier ? `Actor not found: ${identifier} (https://www.rivet.gg/docs/actors/clients/#actor-client)` : "Actor not found (https://www.rivet.gg/docs/actors/clients/#actor-client)",
      { public: true }
    );
  }
};
var ActorAlreadyExists = class extends ActorError {
  constructor(name, key) {
    super(
      "actor_already_exists",
      `Actor already exists with name '${name}' and key '${JSON.stringify(key)}' (https://www.rivet.gg/docs/actors/clients/#actor-client)`,
      { public: true }
    );
  }
};
var ProxyError = class extends ActorError {
  constructor(operation, error) {
    super(
      "proxy_error",
      `Error proxying ${operation}, this is likely an internal error: ${error}`,
      {
        public: true,
        cause: error
      }
    );
  }
};
var InvalidParams = class extends ActorError {
  constructor(message) {
    super("invalid_params", message, { public: true });
  }
};
var Forbidden = class extends ActorError {
  constructor(message, opts) {
    super(
      "forbidden",
      message ?? "Forbidden. Access denied. (https://www.rivet.gg/docs/actors/authentication/)",
      {
        public: true,
        metadata: opts?.metadata
      }
    );
    this.statusCode = 403;
  }
};
var DatabaseNotEnabled = class extends ActorError {
  constructor() {
    super(
      "database_not_enabled",
      "Database not enabled. Must implement `database` to use database."
    );
  }
};
var FetchHandlerNotDefined = class extends ActorError {
  constructor() {
    super(
      "fetch_handler_not_defined",
      "Raw HTTP handler not defined. Actor must implement `onFetch` to handle raw HTTP requests. (https://www.rivet.gg/docs/actors/fetch-and-websocket-handler/)",
      { public: true }
    );
    this.statusCode = 404;
  }
};
var InvalidFetchResponse = class extends ActorError {
  constructor() {
    super(
      "invalid_fetch_response",
      "Actor's onFetch handler must return a Response object. Returning void/undefined is not allowed. (https://www.rivet.gg/docs/actors/fetch-and-websocket-handler/)",
      { public: true }
    );
    this.statusCode = 500;
  }
};

// src/common/utils.ts
function assertUnreachable(x) {
  throw new Error(`Unreachable case: ${x}`);
}
function isCborSerializable(value, onInvalid, currentPath = "") {
  if (value === null || value === void 0) {
    return true;
  }
  if (typeof value === "number") {
    if (!Number.isFinite(value)) {
      onInvalid?.(currentPath);
      return false;
    }
    return true;
  }
  if (typeof value === "boolean" || typeof value === "string") {
    return true;
  }
  if (typeof value === "bigint") {
    return true;
  }
  if (value instanceof Date) {
    return true;
  }
  if (value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Uint16Array || value instanceof Uint32Array || value instanceof BigUint64Array || value instanceof Int8Array || value instanceof Int16Array || value instanceof Int32Array || value instanceof BigInt64Array || value instanceof Float32Array || value instanceof Float64Array) {
    return true;
  }
  if (value instanceof Map) {
    for (const [key, val] of value.entries()) {
      const keyPath = currentPath ? `${currentPath}.key(${String(key)})` : `key(${String(key)})`;
      const valPath = currentPath ? `${currentPath}.value(${String(key)})` : `value(${String(key)})`;
      if (!isCborSerializable(key, onInvalid, keyPath) || !isCborSerializable(val, onInvalid, valPath)) {
        return false;
      }
    }
    return true;
  }
  if (value instanceof Set) {
    let index = 0;
    for (const item of value.values()) {
      const itemPath = currentPath ? `${currentPath}.set[${index}]` : `set[${index}]`;
      if (!isCborSerializable(item, onInvalid, itemPath)) {
        return false;
      }
      index++;
    }
    return true;
  }
  if (value instanceof RegExp) {
    return true;
  }
  if (value instanceof Error) {
    return true;
  }
  if (Array.isArray(value)) {
    for (let i = 0; i < value.length; i++) {
      const itemPath = currentPath ? `${currentPath}[${i}]` : `[${i}]`;
      if (!isCborSerializable(value[i], onInvalid, itemPath)) {
        return false;
      }
    }
    return true;
  }
  if (typeof value === "object") {
    const proto = Object.getPrototypeOf(value);
    if (proto !== null && proto !== Object.prototype) {
      const protoConstructor = value.constructor;
      if (protoConstructor && typeof protoConstructor.name === "string") {
      }
    }
    for (const key in value) {
      const propPath = currentPath ? `${currentPath}.${key}` : key;
      if (!isCborSerializable(
        value[key],
        onInvalid,
        propPath
      )) {
        return false;
      }
    }
    return true;
  }
  onInvalid?.(currentPath);
  return false;
}
function deconstructError(error, logger10, extraLog, exposeInternalError = false) {
  let statusCode;
  let public_;
  let code;
  let message;
  let metadata;
  if (ActorError.isActorError(error) && error.public) {
    statusCode = "statusCode" in error && error.statusCode ? error.statusCode : 400;
    public_ = true;
    code = error.code;
    message = getErrorMessage(error);
    metadata = error.metadata;
    logger10.info("public error", {
      code,
      message,
      issues: "https://github.com/rivet-gg/rivetkit/issues",
      support: "https://rivet.gg/discord",
      ...extraLog
    });
  } else if (exposeInternalError) {
    if (ActorError.isActorError(error)) {
      statusCode = 500;
      public_ = false;
      code = error.code;
      message = getErrorMessage(error);
      metadata = error.metadata;
      logger10.info("internal error", {
        code,
        message,
        issues: "https://github.com/rivet-gg/rivetkit/issues",
        support: "https://rivet.gg/discord",
        ...extraLog
      });
    } else {
      statusCode = 500;
      public_ = false;
      code = INTERNAL_ERROR_CODE;
      message = getErrorMessage(error);
      logger10.info("internal error", {
        code,
        message,
        issues: "https://github.com/rivet-gg/rivetkit/issues",
        support: "https://rivet.gg/discord",
        ...extraLog
      });
    }
  } else {
    statusCode = 500;
    public_ = false;
    code = INTERNAL_ERROR_CODE;
    message = INTERNAL_ERROR_DESCRIPTION;
    metadata = {
      //url: `https://hub.rivet.gg/projects/${actorMetadata.project.slug}/environments/${actorMetadata.environment.slug}/actors?actorId=${actorMetadata.actor.id}`,
    };
    logger10.warn("internal error", {
      error: getErrorMessage(error),
      stack: error?.stack,
      issues: "https://github.com/rivet-gg/rivetkit/issues",
      support: "https://rivet.gg/discord",
      ...extraLog
    });
  }
  return {
    __type: "ActorError",
    statusCode,
    public: public_,
    code,
    message,
    metadata
  };
}
function stringifyError(error) {
  if (error instanceof Error) {
    if (typeof process !== "undefined" && getEnvUniversal("_RIVETKIT_ERROR_STACK") === "1") {
      return `${error.name}: ${error.message}${error.stack ? `
${error.stack}` : ""}`;
    } else {
      return `${error.name}: ${error.message}`;
    }
  } else if (typeof error === "string") {
    return error;
  } else if (typeof error === "object" && error !== null) {
    try {
      return `${JSON.stringify(error)}`;
    } catch {
      return "[cannot stringify error]";
    }
  } else {
    return `Unknown error: ${getErrorMessage(error)}`;
  }
}
function getErrorMessage(err) {
  if (err && typeof err === "object" && "message" in err && typeof err.message === "string") {
    return err.message;
  } else {
    return String(err);
  }
}
function noopNext() {
  return async () => {
  };
}

// package.json
var package_default = {
  name: "rivetkit",
  version: "2.0.2",
  license: "Apache-2.0",
  keywords: [
    "rivetkit",
    "stateful",
    "serverless",
    "actors",
    "agents",
    "realtime",
    "websocket",
    "actors",
    "framework"
  ],
  files: [
    "dist",
    "src",
    "deno.json",
    "bun.json",
    "package.json"
  ],
  type: "module",
  exports: {
    ".": {
      import: {
        types: "./dist/tsup/mod.d.ts",
        default: "./dist/tsup/mod.js"
      },
      require: {
        types: "./dist/tsup/mod.d.cts",
        default: "./dist/tsup/mod.cjs"
      }
    },
    "./client": {
      import: {
        types: "./dist/tsup/client/mod.d.ts",
        default: "./dist/tsup/client/mod.js"
      },
      require: {
        types: "./dist/tsup/client/mod.d.cts",
        default: "./dist/tsup/client/mod.cjs"
      }
    },
    "./log": {
      import: {
        types: "./dist/tsup/common/log.d.ts",
        default: "./dist/tsup/common/log.js"
      },
      require: {
        types: "./dist/tsup/common/log.d.cts",
        default: "./dist/tsup/common/log.cjs"
      }
    },
    "./errors": {
      import: {
        types: "./dist/tsup/actor/errors.d.ts",
        default: "./dist/tsup/actor/errors.js"
      },
      require: {
        types: "./dist/tsup/actor/errors.d.cts",
        default: "./dist/tsup/actor/errors.cjs"
      }
    },
    "./utils": {
      import: {
        types: "./dist/tsup/utils.d.ts",
        default: "./dist/tsup/utils.js"
      },
      require: {
        types: "./dist/tsup/utils.d.cts",
        default: "./dist/tsup/utils.cjs"
      }
    },
    "./driver-helpers": {
      import: {
        types: "./dist/tsup/driver-helpers/mod.d.ts",
        default: "./dist/tsup/driver-helpers/mod.js"
      },
      require: {
        types: "./dist/tsup/driver-helpers/mod.d.cts",
        default: "./dist/tsup/driver-helpers/mod.cjs"
      }
    },
    "./driver-helpers/websocket": {
      import: {
        types: "./dist/tsup/common/websocket.d.ts",
        default: "./dist/tsup/common/websocket.js"
      },
      require: {
        types: "./dist/tsup/common/websocket.d.cts",
        default: "./dist/tsup/common/websocket.cjs"
      }
    },
    "./driver-test-suite": {
      import: {
        types: "./dist/tsup/driver-test-suite/mod.d.ts",
        default: "./dist/tsup/driver-test-suite/mod.js"
      },
      require: {
        types: "./dist/tsup/driver-test-suite/mod.d.cts",
        default: "./dist/tsup/driver-test-suite/mod.cjs"
      }
    },
    "./topologies/coordinate": {
      import: {
        types: "./dist/tsup/topologies/coordinate/mod.d.ts",
        default: "./dist/tsup/topologies/coordinate/mod.js"
      },
      require: {
        types: "./dist/tsup/topologies/coordinate/mod.d.cts",
        default: "./dist/tsup/topologies/coordinate/mod.cjs"
      }
    },
    "./topologies/partition": {
      import: {
        types: "./dist/tsup/topologies/partition/mod.d.ts",
        default: "./dist/tsup/topologies/partition/mod.js"
      },
      require: {
        types: "./dist/tsup/topologies/partition/mod.d.cts",
        default: "./dist/tsup/topologies/partition/mod.cjs"
      }
    },
    "./test": {
      import: {
        types: "./dist/tsup/test/mod.d.ts",
        default: "./dist/tsup/test/mod.js"
      },
      require: {
        types: "./dist/tsup/test/mod.d.cts",
        default: "./dist/tsup/test/mod.cjs"
      }
    },
    "./inspector": {
      import: {
        types: "./dist/tsup/inspector/mod.d.ts",
        default: "./dist/tsup/inspector/mod.js"
      },
      require: {
        types: "./dist/tsup/inspector/mod.d.cts",
        default: "./dist/tsup/inspector/mod.cjs"
      }
    }
  },
  engines: {
    node: ">=22.0.0"
  },
  sideEffects: false,
  scripts: {
    dev: "pnpm build --watch",
    build: "tsup src/mod.ts src/client/mod.ts src/common/log.ts src/common/websocket.ts src/actor/errors.ts src/topologies/coordinate/mod.ts src/topologies/partition/mod.ts src/utils.ts src/driver-helpers/mod.ts src/driver-test-suite/mod.ts src/test/mod.ts src/inspector/mod.ts",
    "build:schema": "./scripts/compile-bare.ts compile schemas/client-protocol/v1.bare -o dist/schemas/client-protocol/v1.ts && ./scripts/compile-bare.ts compile schemas/file-system-driver/v1.bare -o dist/schemas/file-system-driver/v1.ts && ./scripts/compile-bare.ts compile schemas/actor-persist/v1.bare -o dist/schemas/actor-persist/v1.ts",
    "check-types": "tsc --noEmit",
    test: "vitest run",
    "test:watch": "vitest",
    "dump-openapi": "tsx scripts/dump-openapi.ts"
  },
  dependencies: {
    "@bare-ts/lib": "~0.3.0",
    "@hono/standard-validator": "^0.1.3",
    "@hono/zod-openapi": "^0.19.10",
    "@rivetkit/engine-runner": "https://pkg.pr.new/rivet-gg/engine/@rivetkit/engine-runner@664a377",
    "@rivetkit/fast-json-patch": "^3.1.2",
    "cbor-x": "^1.6.0",
    hono: "^4.7.0",
    invariant: "^2.2.4",
    nanoevents: "^9.1.0",
    "on-change": "^5.0.1",
    "p-retry": "^6.2.1",
    zod: "^3.25.76"
  },
  devDependencies: {
    "@bare-ts/tools": "^0.13.0",
    "@hono/node-server": "^1.18.2",
    "@hono/node-ws": "^1.1.1",
    "@rivet-gg/actor-core": "^25.1.0",
    "@types/invariant": "^2",
    "@types/node": "^22.13.1",
    "@types/ws": "^8",
    "@vitest/ui": "3.1.1",
    "bundle-require": "^5.1.0",
    eventsource: "^3.0.5",
    tsup: "^8.4.0",
    tsx: "^4.19.4",
    typescript: "^5.7.3",
    vitest: "^3.1.1",
    ws: "^8.18.1"
  },
  peerDependencies: {
    "@hono/node-server": "^1.14.0",
    "@hono/node-ws": "^1.1.1",
    eventsource: "^3.0.5",
    ws: "^8.0.0"
  },
  peerDependenciesMeta: {
    "@hono/node-server": {
      optional: true
    },
    "@hono/node-ws": {
      optional: true
    },
    eventsource: {
      optional: true
    },
    ws: {
      optional: true
    }
  },
  stableVersion: "0.8.0"
};

// src/utils.ts
var VERSION = package_default.version;
var _userAgent;
function httpUserAgent() {
  if (_userAgent !== void 0) {
    return _userAgent;
  }
  let userAgent = `RivetKit/${VERSION}`;
  const navigatorObj = typeof navigator !== "undefined" ? navigator : void 0;
  if (navigatorObj?.userAgent) userAgent += ` ${navigatorObj.userAgent}`;
  _userAgent = userAgent;
  return userAgent;
}
function getEnvUniversal(key) {
  if (typeof Deno !== "undefined") {
    return Deno.env.get(key);
  } else if (typeof process !== "undefined") {
    return process.env[key];
  }
}
var TIMEOUT_MAX = 2147483647;
function setLongTimeout(listener, after) {
  let timeout;
  function start(remaining) {
    if (remaining <= TIMEOUT_MAX) {
      timeout = setTimeout(listener, remaining);
    } else {
      timeout = setTimeout(() => {
        start(remaining - TIMEOUT_MAX);
      }, TIMEOUT_MAX);
    }
  }
  start(after);
  return {
    abort: () => {
      if (timeout !== void 0) clearTimeout(timeout);
    }
  };
}
var SinglePromiseQueue = class {
  /** Next operation to execute in the queue. If attempting to enqueue another op, it will override the existing op. */
  #queuedOp;
  /** The currently running promise of #drainLoop. Do not await this, instead await `pending` to await the current cycle. */
  runningDrainLoop;
  /** Pending resolver fro the currently queued entry. */
  #pending;
  /** Queue the next operation and return a promise that resolves when it flushes. */
  enqueue(op) {
    this.#queuedOp = op;
    if (!this.#pending) {
      this.#pending = Promise.withResolvers();
    }
    const waitForThisCycle = this.#pending.promise;
    if (!this.runningDrainLoop) {
      this.runningDrainLoop = this.#drainLoop();
    }
    return waitForThisCycle;
  }
  /** Drain queued operations sequentially until there is nothing left. */
  async #drainLoop() {
    try {
      while (this.#queuedOp) {
        const resolver = this.#pending;
        this.#pending = void 0;
        const op = this.#queuedOp;
        this.#queuedOp = void 0;
        try {
          await op();
        } catch {
        }
        resolver?.resolve();
      }
    } finally {
      this.runningDrainLoop = void 0;
    }
  }
};
function bufferToArrayBuffer(buf) {
  return buf.buffer.slice(
    buf.byteOffset,
    buf.byteOffset + buf.byteLength
  );
}

// src/common/log-levels.ts
var LogLevels = {
  TRACE: 0,
  DEBUG: 1,
  INFO: 2,
  WARN: 3,
  ERROR: 4,
  CRITICAL: 5
};
var LevelNameMap = {
  0: "TRACE",
  1: "DEBUG",
  2: "INFO",
  3: "WARN",
  4: "ERROR",
  5: "CRITICAL"
};

// src/common/logfmt.ts
var LOG_LEVEL_COLORS = {
  [LogLevels.CRITICAL]: "\x1B[31m",
  // Red
  [LogLevels.ERROR]: "\x1B[31m",
  // Red
  [LogLevels.WARN]: "\x1B[33m",
  // Yellow
  [LogLevels.INFO]: "\x1B[32m",
  // Green
  [LogLevels.DEBUG]: "\x1B[36m",
  // Cyan
  [LogLevels.TRACE]: "\x1B[36m"
  // Cyan
};
var RESET_COLOR = "\x1B[0m";
function stringify(...data) {
  let line = "";
  for (let i = 0; i < data.length; i++) {
    const [key, valueRaw] = data[i];
    let isNull = false;
    let valueString;
    if (valueRaw == null) {
      isNull = true;
      valueString = "";
    } else {
      valueString = valueRaw.toString();
    }
    if (valueString.length > 512 && key !== "msg" && key !== "error")
      valueString = `${valueString.slice(0, 512)}...`;
    const needsQuoting = valueString.indexOf(" ") > -1 || valueString.indexOf("=") > -1;
    const needsEscaping = valueString.indexOf('"') > -1 || valueString.indexOf("\\") > -1;
    valueString = valueString.replace(/\n/g, "\\n");
    if (needsEscaping) valueString = valueString.replace(/["\\]/g, "\\$&");
    if (needsQuoting || needsEscaping) valueString = `"${valueString}"`;
    if (valueString === "" && !isNull) valueString = '""';
    if (LOGGER_CONFIG.enableColor) {
      let color = "\x1B[2m";
      if (key === "level") {
        const level = LogLevels[valueString];
        const levelColor = LOG_LEVEL_COLORS[level];
        if (levelColor) {
          color = levelColor;
        }
      } else if (key === "msg") {
        color = "\x1B[32m";
      } else if (key === "trace") {
        color = "\x1B[34m";
      }
      line += `\x1B[0m\x1B[1m${key}\x1B[0m\x1B[2m=\x1B[0m${color}${valueString}${RESET_COLOR}`;
    } else {
      line += `${key}=${valueString}`;
    }
    if (i !== data.length - 1) {
      line += " ";
    }
  }
  return line;
}
function formatTimestamp(date) {
  const year = date.getUTCFullYear();
  const month = String(date.getUTCMonth() + 1).padStart(2, "0");
  const day = String(date.getUTCDate()).padStart(2, "0");
  const hours = String(date.getUTCHours()).padStart(2, "0");
  const minutes = String(date.getUTCMinutes()).padStart(2, "0");
  const seconds = String(date.getUTCSeconds()).padStart(2, "0");
  const milliseconds = String(date.getUTCMilliseconds()).padStart(3, "0");
  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}.${milliseconds}Z`;
}
function castToLogValue(v) {
  if (typeof v === "string" || typeof v === "number" || typeof v === "bigint" || typeof v === "boolean" || v === null || v === void 0) {
    return v;
  }
  if (v instanceof Error) {
    return String(v);
  }
  try {
    return JSON.stringify(v);
  } catch {
    return "[cannot stringify]";
  }
}
var LOGGER_CONFIG = {
  enableColor: false,
  enableSpreadObject: false,
  enableErrorStack: false
};

// src/common/log.ts
var Logger = class {
  name;
  level;
  constructor(name, level) {
    this.name = name;
    this.level = level;
  }
  log(level, message, ...args) {
    const record = {
      msg: message,
      args,
      level,
      loggerName: this.name,
      datetime: /* @__PURE__ */ new Date(),
      levelName: LevelNameMap[level]
    };
    if (this.#shouldLog(level)) {
      this.#logRecord(record);
    }
  }
  #shouldLog(level) {
    return level >= LogLevels[this.level];
  }
  #logRecord(record) {
    console.log(formatter(record));
  }
  trace(message, ...args) {
    this.log(LogLevels.TRACE, message, ...args);
  }
  debug(message, ...args) {
    this.log(LogLevels.DEBUG, message, ...args);
  }
  info(message, ...args) {
    this.log(LogLevels.INFO, message, ...args);
  }
  warn(message, ...args) {
    this.log(LogLevels.WARN, message, ...args);
  }
  error(message, ...args) {
    this.log(LogLevels.ERROR, message, ...args);
  }
  critical(message, ...args) {
    this.log(LogLevels.CRITICAL, message, ...args);
  }
};
var loggers = {};
function getLogger(name = "default") {
  const defaultLogLevelEnv = getEnvUniversal(
    "_LOG_LEVEL"
  );
  const defaultLogLevel = defaultLogLevelEnv ?? "INFO";
  if (!loggers[name]) {
    loggers[name] = new Logger(name, defaultLogLevel);
  }
  return loggers[name];
}
function formatter(log) {
  const args = [];
  for (let i = 0; i < log.args.length; i++) {
    const logArg = log.args[i];
    if (logArg && typeof logArg === "object") {
      for (const k in logArg) {
        const v = logArg[k];
        pushArg(k, v, args);
      }
    } else {
      pushArg(`arg${i}`, logArg, args);
    }
  }
  const logTs = getEnvUniversal("_LOG_TIMESTAMP") === "1";
  const logTarget = getEnvUniversal("_LOG_TARGET") === "1";
  return stringify(
    ...logTs ? [["ts", formatTimestamp(/* @__PURE__ */ new Date())]] : [],
    ["level", LevelNameMap[log.level]],
    ...logTarget ? [["target", log.loggerName]] : [],
    ["msg", log.msg],
    ...args
  );
}
function pushArg(k, v, args) {
  args.push([k, castToLogValue(v)]);
}

// src/actor/log.ts
var RUNTIME_LOGGER_NAME = "actor-runtime";
var ACTOR_LOGGER_NAME = "actor";
function logger() {
  return getLogger(RUNTIME_LOGGER_NAME);
}
function instanceLogger() {
  return getLogger(ACTOR_LOGGER_NAME);
}

// src/actor/protocol/serde.ts
import { z } from "zod";

// src/serde.ts
import * as cbor from "cbor-x";
import invariant from "invariant";
function encodingIsBinary(encoding) {
  if (encoding === "json") {
    return false;
  } else if (encoding === "cbor" || encoding === "bare") {
    return true;
  } else {
    assertUnreachable(encoding);
  }
}
function contentTypeForEncoding(encoding) {
  if (encoding === "json") {
    return "application/json";
  } else if (encoding === "cbor" || encoding === "bare") {
    return "application/octet-stream";
  } else {
    assertUnreachable(encoding);
  }
}
function serializeWithEncoding(encoding, value, versionedDataHandler) {
  if (encoding === "json") {
    return jsonStringifyCompat(value);
  } else if (encoding === "cbor") {
    return cbor.encode(value);
  } else if (encoding === "bare") {
    return versionedDataHandler.serializeWithEmbeddedVersion(value);
  } else {
    assertUnreachable(encoding);
  }
}
function deserializeWithEncoding(encoding, buffer, versionedDataHandler) {
  if (encoding === "json") {
    if (typeof buffer === "string") {
      return JSON.parse(buffer);
    } else {
      const decoder = new TextDecoder("utf-8");
      const jsonString = decoder.decode(buffer);
      return JSON.parse(jsonString);
    }
  } else if (encoding === "cbor") {
    invariant(
      typeof buffer !== "string",
      "buffer cannot be string for cbor encoding"
    );
    return cbor.decode(buffer);
  } else if (encoding === "bare") {
    invariant(
      typeof buffer !== "string",
      "buffer cannot be string for bare encoding"
    );
    return versionedDataHandler.deserializeWithEmbeddedVersion(buffer);
  } else {
    assertUnreachable(encoding);
  }
}

// src/actor/utils.ts
function assertUnreachable2(x) {
  logger().error("unreachable", { value: `${x}`, stack: new Error().stack });
  throw new Unreachable(x);
}
var DeadlineError = class extends Error {
  constructor() {
    super("Promise did not complete before deadline.");
  }
};
function deadline(promise, timeout) {
  const controller = new AbortController();
  const signal = controller.signal;
  const timeoutId = setTimeout(() => controller.abort(), timeout);
  return Promise.race([
    promise,
    new Promise((_, reject) => {
      signal.addEventListener("abort", () => reject(new DeadlineError()));
    })
  ]).finally(() => {
    clearTimeout(timeoutId);
  });
}
function generateSecureToken(length = 32) {
  const array = new Uint8Array(length);
  crypto.getRandomValues(array);
  return btoa(String.fromCharCode(...array));
}
function generateRandomString(length = 32) {
  const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  let result = "";
  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * characters.length);
    result += characters[randomIndex];
  }
  return result;
}

// src/actor/protocol/serde.ts
var EncodingSchema = z.enum(["json", "cbor", "bare"]);
var CachedSerializer = class {
  #data;
  #cache = /* @__PURE__ */ new Map();
  #versionedDataHandler;
  constructor(data, versionedDataHandler) {
    this.#data = data;
    this.#versionedDataHandler = versionedDataHandler;
  }
  get rawData() {
    return this.#data;
  }
  serialize(encoding) {
    const cached = this.#cache.get(encoding);
    if (cached) {
      return cached;
    } else {
      const serialized = serializeWithEncoding(
        encoding,
        this.#data,
        this.#versionedDataHandler
      );
      this.#cache.set(encoding, serialized);
      return serialized;
    }
  }
};
function base64EncodeUint8Array(uint8Array) {
  let binary = "";
  const len = uint8Array.byteLength;
  for (let i = 0; i < len; i++) {
    binary += String.fromCharCode(uint8Array[i]);
  }
  return btoa(binary);
}
function base64EncodeArrayBuffer(arrayBuffer) {
  const uint8Array = new Uint8Array(arrayBuffer);
  return base64EncodeUint8Array(uint8Array);
}
function encodeDataToString(message) {
  if (typeof message === "string") {
    return message;
  } else if (message instanceof ArrayBuffer) {
    return base64EncodeArrayBuffer(message);
  } else if (message instanceof Uint8Array) {
    return base64EncodeUint8Array(message);
  } else {
    assertUnreachable2(message);
  }
}
function jsonStringifyCompat(input) {
  return JSON.stringify(
    input,
    (_key, value) => typeof value === "bigint" ? value.toString() : value
  );
}

// src/actor/connection.ts
function generateConnId() {
  return crypto.randomUUID();
}
function generateConnToken() {
  return generateSecureToken(32);
}
var CONNECTION_DRIVER_WEBSOCKET = "webSocket";
var CONNECTION_DRIVER_SSE = "sse";
var CONNECTION_DRIVER_HTTP = "http";
var CONNECTION_CHECK_LIVENESS_SYMBOL = Symbol("checkLiveness");
var Conn = class {
  subscriptions = /* @__PURE__ */ new Set();
  #stateEnabled;
  // TODO: Remove this cyclical reference
  #actor;
  #status = "connected";
  /**
   * The proxied state that notifies of changes automatically.
   *
   * Any data that should be stored indefinitely should be held within this object.
   */
  __persist;
  /**
   * Driver used to manage realtime connection communication.
   *
   * @protected
   */
  #driver;
  get params() {
    return this.__persist.params;
  }
  get auth() {
    return this.__persist.authData;
  }
  get driver() {
    return this.__persist.connDriver;
  }
  get _stateEnabled() {
    return this.#stateEnabled;
  }
  /**
   * Gets the current state of the connection.
   *
   * Throws an error if the state is not enabled.
   */
  get state() {
    this.#validateStateEnabled();
    if (!this.__persist.state) throw new Error("state should exists");
    return this.__persist.state;
  }
  /**
   * Sets the state of the connection.
   *
   * Throws an error if the state is not enabled.
   */
  set state(value) {
    this.#validateStateEnabled();
    this.__persist.state = value;
  }
  /**
   * Unique identifier for the connection.
   */
  get id() {
    return this.__persist.connId;
  }
  /**
   * Token used to authenticate this request.
   */
  get _token() {
    return this.__persist.token;
  }
  /**
   * Status of the connection.
   */
  get status() {
    return this.#status;
  }
  /**
   * Timestamp of the last time the connection was seen, i.e. the last time the connection was active and checked for liveness.
   */
  get lastSeen() {
    return this.__persist.lastSeen;
  }
  /**
   * Initializes a new instance of the Connection class.
   *
   * This should only be constructed by {@link Actor}.
   *
   * @protected
   */
  constructor(actor2, persist, driver, stateEnabled) {
    this.#actor = actor2;
    this.__persist = persist;
    this.#driver = driver;
    this.#stateEnabled = stateEnabled;
  }
  #validateStateEnabled() {
    if (!this.#stateEnabled) {
      throw new ConnStateNotEnabled();
    }
  }
  /**
   * Sends a WebSocket message to the client.
   *
   * @param message - The message to send.
   *
   * @protected
   */
  _sendMessage(message) {
    this.#driver.sendMessage?.(
      this.#actor,
      this,
      this.__persist.connDriverState,
      message
    );
  }
  /**
   * Sends an event with arguments to the client.
   *
   * @param eventName - The name of the event.
   * @param args - The arguments for the event.
   * @see {@link https://rivet.gg/docs/events|Events Documentation}
   */
  send(eventName, ...args) {
    this.#actor.inspector.emitter.emit("eventFired", {
      type: "event",
      eventName,
      args,
      connId: this.id
    });
    this._sendMessage(
      new CachedSerializer(
        {
          body: {
            tag: "Event",
            val: {
              name: eventName,
              args: bufferToArrayBuffer(cbor2.encode(args))
            }
          }
        },
        TO_CLIENT_VERSIONED
      )
    );
  }
  /**
   * Disconnects the client with an optional reason.
   *
   * @param reason - The reason for disconnection.
   */
  async disconnect(reason) {
    this.#status = "reconnecting";
    await this.#driver.disconnect(
      this.#actor,
      this,
      this.__persist.connDriverState,
      reason
    );
  }
  /**
   * This method checks the connection's liveness by querying the driver for its ready state.
   * If the connection is not closed, it updates the last liveness timestamp and returns `true`.
   * Otherwise, it returns `false`.
   * @internal
   */
  [CONNECTION_CHECK_LIVENESS_SYMBOL]() {
    const readyState = this.#driver.getConnectionReadyState(this.#actor, this);
    const isConnectionClosed = readyState === 3 /* CLOSED */ || readyState === 2 /* CLOSING */ || readyState === void 0;
    const newLastSeen = Date.now();
    const newStatus = isConnectionClosed ? "reconnecting" : "connected";
    logger().debug("liveness probe for connection", {
      connId: this.id,
      actorId: this.#actor.id,
      readyState,
      status: this.#status,
      newStatus,
      lastSeen: this.__persist.lastSeen,
      currentTs: newLastSeen
    });
    if (!isConnectionClosed) {
      this.__persist.lastSeen = newLastSeen;
    }
    this.#status = newStatus;
    return {
      status: this.#status,
      lastSeen: this.__persist.lastSeen
    };
  }
};

// src/actor/config.ts
import { z as z2 } from "zod";
var ActorConfigSchema = z2.object({
  onAuth: z2.function().optional(),
  onCreate: z2.function().optional(),
  onStart: z2.function().optional(),
  onStop: z2.function().optional(),
  onStateChange: z2.function().optional(),
  onBeforeConnect: z2.function().optional(),
  onConnect: z2.function().optional(),
  onDisconnect: z2.function().optional(),
  onBeforeActionResponse: z2.function().optional(),
  onFetch: z2.function().optional(),
  onWebSocket: z2.function().optional(),
  actions: z2.record(z2.function()).default({}),
  state: z2.any().optional(),
  createState: z2.function().optional(),
  connState: z2.any().optional(),
  createConnState: z2.function().optional(),
  vars: z2.any().optional(),
  db: z2.any().optional(),
  createVars: z2.function().optional(),
  options: z2.object({
    createVarsTimeout: z2.number().positive().default(5e3),
    createConnStateTimeout: z2.number().positive().default(5e3),
    onConnectTimeout: z2.number().positive().default(5e3),
    // This must be less than ACTOR_STOP_THRESHOLD_MS
    onStopTimeout: z2.number().positive().default(5e3),
    stateSaveInterval: z2.number().positive().default(1e4),
    actionTimeout: z2.number().positive().default(6e4),
    // Max time to wait for waitUntil background promises during shutdown
    waitUntilTimeout: z2.number().positive().default(15e3),
    connectionLivenessTimeout: z2.number().positive().default(2500),
    connectionLivenessInterval: z2.number().positive().default(5e3),
    noSleep: z2.boolean().default(false),
    sleepTimeout: z2.number().positive().default(3e4)
  }).strict().default({})
}).strict().refine(
  (data) => !(data.state !== void 0 && data.createState !== void 0),
  {
    message: "Cannot define both 'state' and 'createState'",
    path: ["state"]
  }
).refine(
  (data) => !(data.connState !== void 0 && data.createConnState !== void 0),
  {
    message: "Cannot define both 'connState' and 'createConnState'",
    path: ["connState"]
  }
).refine(
  (data) => !(data.vars !== void 0 && data.createVars !== void 0),
  {
    message: "Cannot define both 'vars' and 'createVars'",
    path: ["vars"]
  }
);

// src/actor/instance.ts
import * as cbor5 from "cbor-x";
import invariant2 from "invariant";
import onChange from "on-change";

// src/inspector/actor.ts
import { sValidator } from "@hono/standard-validator";
import jsonPatch from "@rivetkit/fast-json-patch";
import { Hono } from "hono";
import { streamSSE as streamSSE2 } from "hono/streaming";
import { createNanoEvents } from "nanoevents";
import z6 from "zod/v4";

// src/inspector/protocol/common.ts
import z5 from "zod/v4";

// src/manager/protocol/query.ts
import { z as z4 } from "zod";

// src/actor/router-endpoints.ts
import * as cbor4 from "cbor-x";
import { streamSSE } from "hono/streaming";

// src/actor/action.ts
var ActionContext = class {
  /**
   * Should not be called directly.
   *
   * @param actorContext - The actor context
   * @param conn - The connection associated with the action
   */
  constructor(actorContext, conn) {
    this.conn = conn;
    this.#actorContext = actorContext;
  }
  #actorContext;
  /**
   * Get the actor state
   */
  get state() {
    return this.#actorContext.state;
  }
  /**
   * Get the actor variables
   */
  get vars() {
    return this.#actorContext.vars;
  }
  /**
   * Broadcasts an event to all connected clients.
   */
  broadcast(name, ...args) {
    this.#actorContext.broadcast(name, ...args);
  }
  /**
   * Gets the logger instance.
   */
  get log() {
    return this.#actorContext.log;
  }
  /**
   * Gets actor ID.
   */
  get actorId() {
    return this.#actorContext.actorId;
  }
  /**
   * Gets the actor name.
   */
  get name() {
    return this.#actorContext.name;
  }
  /**
   * Gets the actor key.
   */
  get key() {
    return this.#actorContext.key;
  }
  /**
   * Gets the region.
   */
  get region() {
    return this.#actorContext.region;
  }
  /**
   * Gets the scheduler.
   */
  get schedule() {
    return this.#actorContext.schedule;
  }
  /**
   * Gets the map of connections.
   */
  get conns() {
    return this.#actorContext.conns;
  }
  /**
   * Returns the client for the given registry.
   */
  client() {
    return this.#actorContext.client();
  }
  /**
   * @experimental
   */
  get db() {
    return this.#actorContext.db;
  }
  /**
   * Forces the state to get saved.
   */
  async saveState(opts) {
    return this.#actorContext.saveState(opts);
  }
  /**
   * Prevents the actor from sleeping until promise is complete.
   */
  waitUntil(promise) {
    this.#actorContext.waitUntil(promise);
  }
  /**
   * AbortSignal that fires when the actor is stopping.
   */
  get abortSignal() {
    return this.#actorContext.abortSignal;
  }
  /**
   * Forces the actor to sleep.
   *
   * Not supported on all drivers.
   *
   * @experimental
   */
  sleep() {
    this.#actorContext.sleep();
  }
};

// src/manager/log.ts
var LOGGER_NAME = "actor-manager";
function logger2() {
  return getLogger(LOGGER_NAME);
}

// src/manager/hono-websocket-adapter.ts
var HonoWebSocketAdapter = class {
  // WebSocket readyState values
  CONNECTING = 0;
  OPEN = 1;
  CLOSING = 2;
  CLOSED = 3;
  #ws;
  #readyState = 1;
  // Start as OPEN since WSContext is already connected
  #eventListeners = /* @__PURE__ */ new Map();
  #closeCode;
  #closeReason;
  constructor(ws) {
    this.#ws = ws;
    this.#readyState = this.OPEN;
    setTimeout(() => {
      this.#fireEvent("open", { type: "open", target: this });
    }, 0);
  }
  get readyState() {
    return this.#readyState;
  }
  get binaryType() {
    return "arraybuffer";
  }
  set binaryType(value) {
  }
  get bufferedAmount() {
    return 0;
  }
  get extensions() {
    return "";
  }
  get protocol() {
    return "";
  }
  get url() {
    return "";
  }
  send(data) {
    if (this.readyState !== this.OPEN) {
      throw new Error("WebSocket is not open");
    }
    try {
      logger2().debug("bridge sending data", {
        dataType: typeof data,
        isString: typeof data === "string",
        isArrayBuffer: data instanceof ArrayBuffer,
        dataStr: typeof data === "string" ? data.substring(0, 100) : "<non-string>"
      });
      if (typeof data === "string") {
        this.#ws.send(data);
      } else if (data instanceof ArrayBuffer) {
        this.#ws.send(data);
      } else if (ArrayBuffer.isView(data)) {
        const buffer = data.buffer.slice(
          data.byteOffset,
          data.byteOffset + data.byteLength
        );
        if (buffer instanceof SharedArrayBuffer) {
          const arrayBuffer = new ArrayBuffer(buffer.byteLength);
          new Uint8Array(arrayBuffer).set(new Uint8Array(buffer));
          this.#ws.send(arrayBuffer);
        } else {
          this.#ws.send(buffer);
        }
      } else if (data instanceof Blob) {
        data.arrayBuffer().then((buffer) => {
          this.#ws.send(buffer);
        }).catch((error) => {
          logger2().error("failed to convert blob to arraybuffer", { error });
          this.#fireEvent("error", { type: "error", target: this, error });
        });
      } else {
        logger2().warn("unsupported data type, converting to string", {
          dataType: typeof data,
          data
        });
        this.#ws.send(String(data));
      }
    } catch (error) {
      logger2().error("error sending websocket data", { error });
      this.#fireEvent("error", { type: "error", target: this, error });
      throw error;
    }
  }
  close(code = 1e3, reason = "") {
    if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
      return;
    }
    this.#readyState = this.CLOSING;
    this.#closeCode = code;
    this.#closeReason = reason;
    try {
      this.#ws.close(code, reason);
      this.#readyState = this.CLOSED;
      this.#fireEvent("close", {
        type: "close",
        target: this,
        code,
        reason,
        wasClean: code === 1e3
      });
    } catch (error) {
      logger2().error("error closing websocket", { error });
      this.#readyState = this.CLOSED;
      this.#fireEvent("close", {
        type: "close",
        target: this,
        code: 1006,
        reason: "Abnormal closure",
        wasClean: false
      });
    }
  }
  addEventListener(type, listener) {
    if (!this.#eventListeners.has(type)) {
      this.#eventListeners.set(type, /* @__PURE__ */ new Set());
    }
    this.#eventListeners.get(type).add(listener);
  }
  removeEventListener(type, listener) {
    const listeners = this.#eventListeners.get(type);
    if (listeners) {
      listeners.delete(listener);
    }
  }
  dispatchEvent(event) {
    const listeners = this.#eventListeners.get(event.type);
    if (listeners) {
      for (const listener of listeners) {
        try {
          listener(event);
        } catch (error) {
          logger2().error(`error in ${event.type} event listener`, { error });
        }
      }
    }
    return true;
  }
  // Internal method to handle incoming messages from WSContext
  _handleMessage(data) {
    let messageData;
    if (typeof data === "string") {
      messageData = data;
    } else if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
      messageData = data;
    } else if (data && typeof data === "object" && "data" in data) {
      messageData = data.data;
    } else {
      messageData = String(data);
    }
    logger2().debug("bridge handling message", {
      dataType: typeof messageData,
      isArrayBuffer: messageData instanceof ArrayBuffer,
      dataStr: typeof messageData === "string" ? messageData : "<binary>"
    });
    this.#fireEvent("message", {
      type: "message",
      target: this,
      data: messageData
    });
  }
  // Internal method to handle close from WSContext
  _handleClose(code, reason) {
    this.#ws.close(1e3, "hack_force_close");
    if (this.readyState === this.CLOSED) return;
    this.#readyState = this.CLOSED;
    this.#closeCode = code;
    this.#closeReason = reason;
    this.#fireEvent("close", {
      type: "close",
      target: this,
      code,
      reason,
      wasClean: code === 1e3
    });
  }
  // Internal method to handle errors from WSContext
  _handleError(error) {
    this.#fireEvent("error", {
      type: "error",
      target: this,
      error
    });
  }
  #fireEvent(type, event) {
    const listeners = this.#eventListeners.get(type);
    if (listeners) {
      for (const listener of listeners) {
        try {
          listener(event);
        } catch (error) {
          logger2().error(`error in ${type} event listener`, { error });
        }
      }
    }
    switch (type) {
      case "open":
        if (this.#onopen) {
          try {
            this.#onopen(event);
          } catch (error) {
            logger2().error("error in onopen handler", { error });
          }
        }
        break;
      case "close":
        if (this.#onclose) {
          try {
            this.#onclose(event);
          } catch (error) {
            logger2().error("error in onclose handler", { error });
          }
        }
        break;
      case "error":
        if (this.#onerror) {
          try {
            this.#onerror(event);
          } catch (error) {
            logger2().error("error in onerror handler", { error });
          }
        }
        break;
      case "message":
        if (this.#onmessage) {
          try {
            this.#onmessage(event);
          } catch (error) {
            logger2().error("error in onmessage handler", { error });
          }
        }
        break;
    }
  }
  // Event handler properties with getters/setters
  #onopen = null;
  #onclose = null;
  #onerror = null;
  #onmessage = null;
  get onopen() {
    return this.#onopen;
  }
  set onopen(handler) {
    this.#onopen = handler;
  }
  get onclose() {
    return this.#onclose;
  }
  set onclose(handler) {
    this.#onclose = handler;
  }
  get onerror() {
    return this.#onerror;
  }
  set onerror(handler) {
    this.#onerror = handler;
  }
  get onmessage() {
    return this.#onmessage;
  }
  set onmessage(handler) {
    this.#onmessage = handler;
  }
};

// src/actor/protocol/old.ts
import * as cbor3 from "cbor-x";
import { z as z3 } from "zod";
var TransportSchema = z3.enum(["websocket", "sse"]);
function getValueLength(value) {
  if (typeof value === "string") {
    return value.length;
  } else if (value instanceof Blob) {
    return value.size;
  } else if (value instanceof ArrayBuffer || value instanceof SharedArrayBuffer || value instanceof Uint8Array) {
    return value.byteLength;
  } else {
    assertUnreachable(value);
  }
}
async function inputDataToBuffer(data) {
  if (typeof data === "string") {
    return data;
  } else if (data instanceof Blob) {
    const arrayBuffer = await data.arrayBuffer();
    return new Uint8Array(arrayBuffer);
  } else if (data instanceof Uint8Array) {
    return data;
  } else if (data instanceof ArrayBuffer || data instanceof SharedArrayBuffer) {
    return new Uint8Array(data);
  } else {
    throw new MalformedMessage();
  }
}
async function parseMessage(value, opts) {
  const length = getValueLength(value);
  if (length > opts.maxIncomingMessageSize) {
    throw new MessageTooLong();
  }
  const buffer = await inputDataToBuffer(value);
  return deserializeWithEncoding(opts.encoding, buffer, TO_SERVER_VERSIONED);
}
async function processMessage(message, actor2, conn, handler) {
  let actionId;
  let actionName;
  try {
    if (message.body.tag === "ActionRequest") {
      if (handler.onExecuteAction === void 0) {
        throw new Unsupported("Action");
      }
      const { id, name, args: argsRaw } = message.body.val;
      actionId = id;
      actionName = name;
      const args = cbor3.decode(new Uint8Array(argsRaw));
      logger().debug("processing action request", {
        actionId: id,
        actionName: name
      });
      const ctx = new ActionContext(
        actor2.actorContext,
        conn
      );
      const output = await handler.onExecuteAction(ctx, name, args);
      logger().debug("sending action response", {
        actionId: id,
        actionName: name,
        outputType: typeof output,
        isPromise: output instanceof Promise
      });
      conn._sendMessage(
        new CachedSerializer(
          {
            body: {
              tag: "ActionResponse",
              val: {
                id,
                output: bufferToArrayBuffer(cbor3.encode(output))
              }
            }
          },
          TO_CLIENT_VERSIONED
        )
      );
      logger().debug("action response sent", { id, name });
    } else if (message.body.tag === "SubscriptionRequest") {
      if (handler.onSubscribe === void 0 || handler.onUnsubscribe === void 0) {
        throw new Unsupported("Subscriptions");
      }
      const { eventName, subscribe } = message.body.val;
      logger().debug("processing subscription request", {
        eventName,
        subscribe
      });
      if (subscribe) {
        await handler.onSubscribe(eventName, conn);
      } else {
        await handler.onUnsubscribe(eventName, conn);
      }
      logger().debug("subscription request completed", {
        eventName,
        subscribe
      });
    } else {
      assertUnreachable(message.body);
    }
  } catch (error) {
    const { code, message: message2, metadata } = deconstructError(error, logger(), {
      connectionId: conn.id,
      actionId,
      actionName
    });
    logger().debug("sending error response", {
      actionId,
      actionName,
      code,
      message: message2
    });
    conn._sendMessage(
      new CachedSerializer(
        {
          body: {
            tag: "Error",
            val: {
              code,
              message: message2,
              metadata: bufferToArrayBuffer(cbor3.encode(metadata)),
              actionId: actionId ?? null
            }
          }
        },
        TO_CLIENT_VERSIONED
      )
    );
    logger().debug("error response sent", { actionId, actionName });
  }
}

// src/actor/router-endpoints.ts
async function handleWebSocketConnect(req, runConfig, actorDriver, actorId, encoding, parameters, authData) {
  const exposeInternalError = req ? getRequestExposeInternalError(req) : false;
  const {
    promise: handlersPromise,
    resolve: handlersResolve,
    reject: handlersReject
  } = Promise.withResolvers();
  let actor2;
  try {
    actor2 = await actorDriver.loadActor(actorId);
  } catch (error) {
    return {
      onOpen: (_evt, ws) => {
        const { code } = deconstructError(
          error,
          logger(),
          {
            wsEvent: "open"
          },
          exposeInternalError
        );
        ws.close(1011, code);
      },
      onMessage: (_evt, ws) => {
        ws.close(1011, "Actor not loaded");
      },
      onClose: (_event, _ws) => {
      },
      onError: (_error) => {
      }
    };
  }
  return {
    onOpen: (_evt, ws) => {
      logger().debug("websocket open");
      (async () => {
        try {
          const connId = generateConnId();
          const connToken = generateConnToken();
          const connState = await actor2.prepareConn(parameters, req);
          const connGlobalState = actorDriver.getGenericConnGlobalState(actorId);
          connGlobalState.websockets.set(connId, ws);
          logger().debug("registered websocket for conn", {
            actorId,
            totalCount: connGlobalState.websockets.size
          });
          const conn = await actor2.createConn(
            connId,
            connToken,
            parameters,
            connState,
            CONNECTION_DRIVER_WEBSOCKET,
            { encoding },
            authData
          );
          handlersResolve({ conn, actor: actor2, connId });
        } catch (error) {
          handlersReject(error);
          const { code } = deconstructError(
            error,
            logger(),
            {
              wsEvent: "open"
            },
            exposeInternalError
          );
          ws.close(1011, code);
        }
      })();
    },
    onMessage: (evt, ws) => {
      handlersPromise.then(({ conn, actor: actor3 }) => {
        logger().debug("received message");
        const value = evt.data.valueOf();
        parseMessage(value, {
          encoding,
          maxIncomingMessageSize: runConfig.maxIncomingMessageSize
        }).then((message) => {
          actor3.processMessage(message, conn).catch((error) => {
            const { code } = deconstructError(
              error,
              logger(),
              {
                wsEvent: "message"
              },
              exposeInternalError
            );
            ws.close(1011, code);
          });
        }).catch((error) => {
          const { code } = deconstructError(
            error,
            logger(),
            {
              wsEvent: "message"
            },
            exposeInternalError
          );
          ws.close(1011, code);
        });
      }).catch((error) => {
        const { code } = deconstructError(
          error,
          logger(),
          {
            wsEvent: "message"
          },
          exposeInternalError
        );
        ws.close(1011, code);
      });
    },
    onClose: (event, ws) => {
      if (event.wasClean) {
        logger().info("websocket closed", {
          code: event.code,
          reason: event.reason,
          wasClean: event.wasClean
        });
      } else {
        logger().warn("websocket closed", {
          code: event.code,
          reason: event.reason,
          wasClean: event.wasClean
        });
      }
      ws.close(1e3, "hack_force_close");
      handlersPromise.then(({ conn, actor: actor3, connId }) => {
        const connGlobalState = actorDriver.getGenericConnGlobalState(actorId);
        const didDelete = connGlobalState.websockets.delete(connId);
        if (didDelete) {
          logger().info("removing websocket for conn", {
            totalCount: connGlobalState.websockets.size
          });
        } else {
          logger().warn("websocket does not exist for conn", {
            actorId,
            totalCount: connGlobalState.websockets.size
          });
        }
        actor3.__removeConn(conn);
      }).catch((error) => {
        deconstructError(
          error,
          logger(),
          { wsEvent: "close" },
          exposeInternalError
        );
      });
    },
    onError: (_error) => {
      try {
        logger().warn("websocket error");
      } catch (error) {
        deconstructError(
          error,
          logger(),
          { wsEvent: "error" },
          exposeInternalError
        );
      }
    }
  };
}
async function handleSseConnect(c, _runConfig, actorDriver, actorId, authData) {
  const encoding = getRequestEncoding(c.req);
  const parameters = getRequestConnParams(c.req);
  return streamSSE(c, async (stream) => {
    let actor2;
    let connId;
    let connToken;
    let connState;
    let conn;
    try {
      actor2 = await actorDriver.loadActor(actorId);
      connId = generateConnId();
      connToken = generateConnToken();
      connState = await actor2.prepareConn(parameters, c.req.raw);
      logger().debug("sse open");
      actorDriver.getGenericConnGlobalState(actorId).sseStreams.set(connId, stream);
      conn = await actor2.createConn(
        connId,
        connToken,
        parameters,
        connState,
        CONNECTION_DRIVER_SSE,
        { encoding },
        authData
      );
      const abortResolver = Promise.withResolvers();
      stream.onAbort(async () => {
        try {
          logger().debug("sse stream aborted");
          if (connId) {
            actorDriver.getGenericConnGlobalState(actorId).sseStreams.delete(connId);
          }
          if (conn && actor2) {
            actor2.__removeConn(conn);
          }
          abortResolver.resolve(void 0);
        } catch (error) {
          logger().error("error closing sse connection", { error });
          abortResolver.resolve(void 0);
        }
      });
      try {
        c.executionCtx.waitUntil(abortResolver.promise);
      } catch {
      }
      await abortResolver.promise;
    } catch (error) {
      logger().error("error in sse connection", { error });
      if (connId !== void 0) {
        actorDriver.getGenericConnGlobalState(actorId).sseStreams.delete(connId);
      }
      if (conn && actor2 !== void 0) {
        actor2.__removeConn(conn);
      }
      stream.close();
    }
  });
}
async function handleAction(c, _runConfig, actorDriver, actionName, actorId, authData) {
  const encoding = getRequestEncoding(c.req);
  const parameters = getRequestConnParams(c.req);
  logger().debug("handling action", { actionName, encoding });
  const arrayBuffer = await c.req.arrayBuffer();
  const request = deserializeWithEncoding(
    encoding,
    new Uint8Array(arrayBuffer),
    HTTP_ACTION_REQUEST_VERSIONED
  );
  const actionArgs = cbor4.decode(new Uint8Array(request.args));
  let actor2;
  let conn;
  let output;
  try {
    actor2 = await actorDriver.loadActor(actorId);
    const connState = await actor2.prepareConn(parameters, c.req.raw);
    conn = await actor2.createConn(
      generateConnId(),
      generateConnToken(),
      parameters,
      connState,
      CONNECTION_DRIVER_HTTP,
      {},
      authData
    );
    const ctx = new ActionContext(actor2.actorContext, conn);
    output = await actor2.executeAction(ctx, actionName, actionArgs);
  } finally {
    if (conn) {
      actor2?.__removeConn(conn);
    }
  }
  const responseData = {
    output: bufferToArrayBuffer(cbor4.encode(output))
  };
  const serialized = serializeWithEncoding(
    encoding,
    responseData,
    HTTP_ACTION_RESPONSE_VERSIONED
  );
  return c.body(serialized, 200, {
    "Content-Type": contentTypeForEncoding(encoding)
  });
}
async function handleConnectionMessage(c, _runConfig, actorDriver, connId, connToken, actorId) {
  const encoding = getRequestEncoding(c.req);
  const arrayBuffer = await c.req.arrayBuffer();
  const message = deserializeWithEncoding(
    encoding,
    new Uint8Array(arrayBuffer),
    TO_SERVER_VERSIONED
  );
  const actor2 = await actorDriver.loadActor(actorId);
  const conn = actor2.conns.get(connId);
  if (!conn) {
    throw new ConnNotFound(connId);
  }
  if (conn._token !== connToken) {
    throw new IncorrectConnToken();
  }
  await actor2.processMessage(message, conn);
  return c.json({});
}
async function handleRawWebSocketHandler(req, path3, actorDriver, actorId, authData) {
  const actor2 = await actorDriver.loadActor(actorId);
  return {
    onOpen: (_evt, ws) => {
      const adapter = new HonoWebSocketAdapter(ws);
      ws.__adapter = adapter;
      const url = new URL(path3, "http://actor");
      const pathname = url.pathname.replace(/^\/raw\/websocket/, "") || "/";
      const normalizedPath = pathname + url.search;
      let newRequest;
      if (req) {
        newRequest = new Request(`http://actor${normalizedPath}`, req);
      } else {
        newRequest = new Request(`http://actor${normalizedPath}`, {
          method: "GET"
        });
      }
      logger().debug("rewriting websocket url", {
        from: path3,
        to: newRequest.url
      });
      actor2.handleWebSocket(adapter, {
        request: newRequest,
        auth: authData
      });
    },
    onMessage: (event, ws) => {
      const adapter = ws.__adapter;
      if (adapter) {
        adapter._handleMessage(event);
      }
    },
    onClose: (evt, ws) => {
      const adapter = ws.__adapter;
      if (adapter) {
        adapter._handleClose(evt?.code || 1006, evt?.reason || "");
      }
    },
    onError: (error, ws) => {
      const adapter = ws.__adapter;
      if (adapter) {
        adapter._handleError(error);
      }
    }
  };
}
function getRequestEncoding(req) {
  const encodingParam = req.header(HEADER_ENCODING);
  if (!encodingParam) {
    throw new InvalidEncoding("undefined");
  }
  const result = EncodingSchema.safeParse(encodingParam);
  if (!result.success) {
    throw new InvalidEncoding(encodingParam);
  }
  return result.data;
}
function getRequestExposeInternalError(req) {
  const param = req.headers.get(HEADER_EXPOSE_INTERNAL_ERROR);
  if (!param) {
    return false;
  }
  return param === "true";
}
function getRequestQuery(c) {
  const queryParam = c.req.header(HEADER_ACTOR_QUERY);
  if (!queryParam) {
    logger().error("missing query parameter");
    throw new InvalidRequest("missing query");
  }
  try {
    const parsed = JSON.parse(queryParam);
    return parsed;
  } catch (error) {
    logger().error("invalid query json", { error });
    throw new InvalidQueryJSON(error);
  }
}
var HEADER_ACTOR_QUERY = "X-RivetKit-Query";
var HEADER_ENCODING = "X-RivetKit-Encoding";
var HEADER_EXPOSE_INTERNAL_ERROR = "X-RivetKit-Expose-Internal-Error";
var HEADER_CONN_PARAMS = "X-RivetKit-Conn-Params";
var HEADER_AUTH_DATA = "X-RivetKit-Auth-Data";
var HEADER_ACTOR_ID = "X-RivetKit-Actor";
var HEADER_CONN_ID = "X-RivetKit-Conn";
var HEADER_CONN_TOKEN = "X-RivetKit-Conn-Token";
var ALLOWED_PUBLIC_HEADERS = [
  "Content-Type",
  "User-Agent",
  HEADER_ACTOR_QUERY,
  HEADER_ENCODING,
  HEADER_CONN_PARAMS,
  HEADER_ACTOR_ID,
  HEADER_CONN_ID,
  HEADER_CONN_TOKEN
];
function getRequestConnParams(req) {
  const paramsParam = req.header(HEADER_CONN_PARAMS);
  if (!paramsParam) {
    return null;
  }
  try {
    return JSON.parse(paramsParam);
  } catch (err) {
    throw new InvalidParams(
      `Invalid params JSON: ${stringifyError(err)}`
    );
  }
}

// src/manager/protocol/query.ts
var MAX_ACTOR_KEY_SIZE = 128;
var ActorKeySchema = z4.array(z4.string().max(MAX_ACTOR_KEY_SIZE));
var CreateRequestSchema = z4.object({
  name: z4.string(),
  key: ActorKeySchema,
  input: z4.unknown().optional(),
  region: z4.string().optional()
});
var GetForKeyRequestSchema = z4.object({
  name: z4.string(),
  key: ActorKeySchema
});
var GetOrCreateRequestSchema = z4.object({
  name: z4.string(),
  key: ActorKeySchema,
  input: z4.unknown().optional(),
  region: z4.string().optional()
});
var ActorQuerySchema = z4.union([
  z4.object({
    getForId: z4.object({
      name: z4.string(),
      actorId: z4.string()
    })
  }),
  z4.object({
    getForKey: GetForKeyRequestSchema
  }),
  z4.object({
    getOrCreateForKey: GetOrCreateRequestSchema
  }),
  z4.object({
    create: CreateRequestSchema
  })
]);
var ConnectRequestSchema = z4.object({
  query: ActorQuerySchema.describe(HEADER_ACTOR_QUERY),
  encoding: EncodingSchema.describe(HEADER_ENCODING),
  connParams: z4.string().optional().describe(HEADER_CONN_PARAMS)
});
var ConnectWebSocketRequestSchema = z4.object({
  query: ActorQuerySchema.describe("query"),
  encoding: EncodingSchema.describe("encoding"),
  connParams: z4.unknown().optional().describe("conn_params")
});
var ConnMessageRequestSchema = z4.object({
  actorId: z4.string().describe(HEADER_ACTOR_ID),
  connId: z4.string().describe(HEADER_CONN_ID),
  encoding: EncodingSchema.describe(HEADER_ENCODING),
  connToken: z4.string().describe(HEADER_CONN_TOKEN)
});
var ResolveRequestSchema = z4.object({
  query: ActorQuerySchema.describe(HEADER_ACTOR_QUERY),
  connParams: z4.string().optional().describe(HEADER_CONN_PARAMS)
});

// src/inspector/protocol/common.ts
var ActorId = z5.string().brand("ActorId");
var ActorFeature = /* @__PURE__ */ ((ActorFeature2) => {
  ActorFeature2["Logs"] = "logs";
  ActorFeature2["Config"] = "config";
  ActorFeature2["Connections"] = "connections";
  ActorFeature2["State"] = "state";
  ActorFeature2["Console"] = "console";
  ActorFeature2["Runtime"] = "runtime";
  ActorFeature2["Metrics"] = "metrics";
  ActorFeature2["EventsMonitoring"] = "events-monitoring";
  ActorFeature2["Database"] = "database";
  return ActorFeature2;
})(ActorFeature || {});
var ActorLogEntry = z5.object({
  level: z5.string(),
  message: z5.string(),
  timestamp: z5.string(),
  metadata: z5.record(z5.string(), z5.any()).optional()
});
var ActorSchema = z5.object({
  id: ActorId,
  name: z5.string(),
  key: z5.array(z5.string()),
  tags: z5.record(z5.string(), z5.string()).optional(),
  region: z5.string().optional(),
  createdAt: z5.string().optional(),
  startedAt: z5.string().optional(),
  destroyedAt: z5.string().optional(),
  features: z5.array(z5.enum(ActorFeature)).optional()
});
var OperationSchema = z5.discriminatedUnion("op", [
  z5.object({
    op: z5.literal("remove"),
    path: z5.string()
  }),
  z5.object({
    op: z5.literal("add"),
    path: z5.string(),
    value: z5.unknown()
  }),
  z5.object({
    op: z5.literal("replace"),
    path: z5.string(),
    value: z5.unknown()
  }),
  z5.object({
    op: z5.literal("move"),
    path: z5.string(),
    from: z5.string()
  }),
  z5.object({
    op: z5.literal("copy"),
    path: z5.string(),
    from: z5.string()
  }),
  z5.object({
    op: z5.literal("test"),
    path: z5.string(),
    value: z5.unknown()
  })
]);
var PatchSchema = z5.array(OperationSchema);
var ConnectionSchema = z5.object({
  params: z5.record(z5.string(), z5.any()).optional(),
  id: z5.string(),
  stateEnabled: z5.boolean().optional(),
  state: z5.any().optional(),
  auth: z5.record(z5.string(), z5.any()).optional()
});
var RealtimeEventSchema = z5.discriminatedUnion("type", [
  z5.object({
    type: z5.literal("action"),
    name: z5.string(),
    args: z5.array(z5.any()),
    connId: z5.string()
  }),
  z5.object({
    type: z5.literal("broadcast"),
    eventName: z5.string(),
    args: z5.array(z5.any())
  }),
  z5.object({
    type: z5.literal("subscribe"),
    eventName: z5.string(),
    connId: z5.string()
  }),
  z5.object({
    type: z5.literal("unsubscribe"),
    eventName: z5.string(),
    connId: z5.string()
  }),
  z5.object({
    type: z5.literal("event"),
    eventName: z5.string(),
    args: z5.array(z5.any()),
    connId: z5.string()
  })
]);
var RecordedRealtimeEventSchema = RealtimeEventSchema.and(
  z5.object({
    id: z5.string(),
    timestamp: z5.number()
  })
);
var DatabaseQuerySchema = z5.object({
  sql: z5.string(),
  args: z5.array(z5.string().or(z5.number()))
});
var TableSchema = z5.object({
  schema: z5.string(),
  name: z5.string(),
  type: z5.enum(["table", "view"])
});
var TablesSchema = z5.array(TableSchema);
var ColumnSchema = z5.object({
  cid: z5.number(),
  name: z5.string(),
  type: z5.string().toLowerCase().transform((val) => {
    return z5.enum(["integer", "text", "real", "blob", "numeric", "serial"]).parse(val);
  }),
  notnull: z5.coerce.boolean(),
  dflt_value: z5.string().nullable(),
  pk: z5.coerce.boolean().nullable()
});
var ColumnsSchema = z5.array(ColumnSchema);
var ForeignKeySchema = z5.object({
  id: z5.number(),
  table: z5.string(),
  from: z5.string(),
  to: z5.string()
});
var ForeignKeysSchema = z5.array(ForeignKeySchema);
var BuildSchema = z5.object({
  name: z5.string(),
  createdAt: z5.string().optional(),
  tags: z5.record(z5.string(), z5.string()).optional()
});
var BuildsSchema = z5.array(BuildSchema);
var CreateActorSchema = z5.object({
  name: z5.string(),
  // FIXME: Replace with ActorKeySchema when ready
  key: z5.array(z5.string().max(MAX_ACTOR_KEY_SIZE)),
  input: z5.any()
});

// src/inspector/actor.ts
function createActorInspectorRouter() {
  return new Hono().get("/ping", (c) => {
    return c.json({ message: "pong" }, 200);
  }).get("/state", async (c) => {
    if (await c.var.inspector.accessors.isStateEnabled()) {
      return c.json(
        {
          enabled: true,
          state: await c.var.inspector.accessors.getState()
        },
        200
      );
    }
    return c.json({ enabled: false, state: null }, 200);
  }).patch(
    "/state",
    sValidator(
      "json",
      z6.object({ patch: PatchSchema }).or(z6.object({ replace: z6.any() }))
    ),
    async (c) => {
      if (!await c.var.inspector.accessors.isStateEnabled()) {
        return c.json({ enabled: false }, 200);
      }
      const body = c.req.valid("json");
      if ("replace" in body) {
        await c.var.inspector.accessors.setState(body.replace);
        return c.json(
          {
            enabled: true,
            state: await c.var.inspector.accessors.getState()
          },
          200
        );
      }
      const state = await c.var.inspector.accessors.getState();
      const { newDocument: newState } = jsonPatch.applyPatch(
        state,
        body.patch
      );
      await c.var.inspector.accessors.setState(newState);
      return c.json(
        { enabled: true, state: await c.var.inspector.accessors.getState() },
        200
      );
    }
  ).get("/state/stream", async (c) => {
    if (!await c.var.inspector.accessors.isStateEnabled()) {
      return c.json({ enabled: false }, 200);
    }
    let id = 0;
    let unsub;
    return streamSSE2(
      c,
      async (stream) => {
        unsub = c.var.inspector.emitter.on("stateUpdated", async (state) => {
          stream.writeSSE({
            data: JSON.stringify(state) || "",
            event: "state-update",
            id: String(id++)
          });
        });
        const { promise } = Promise.withResolvers();
        return promise;
      },
      async () => {
        unsub?.();
      }
    );
  }).get("/connections", async (c) => {
    const connections = await c.var.inspector.accessors.getConnections();
    return c.json({ connections }, 200);
  }).get("/connections/stream", async (c) => {
    let id = 0;
    let unsub;
    return streamSSE2(
      c,
      async (stream) => {
        unsub = c.var.inspector.emitter.on("connectionUpdated", async () => {
          stream.writeSSE({
            data: JSON.stringify(
              await c.var.inspector.accessors.getConnections()
            ),
            event: "connection-update",
            id: String(id++)
          });
        });
        const { promise } = Promise.withResolvers();
        return promise;
      },
      async () => {
        unsub?.();
      }
    );
  }).get("/events", async (c) => {
    const events = c.var.inspector.lastRealtimeEvents;
    return c.json({ events }, 200);
  }).post("/events/clear", async (c) => {
    c.var.inspector.lastRealtimeEvents.length = 0;
    return c.json({ message: "Events cleared" }, 200);
  }).get("/events/stream", async (c) => {
    let id = 0;
    let unsub;
    return streamSSE2(
      c,
      async (stream) => {
        unsub = c.var.inspector.emitter.on("eventFired", () => {
          stream.writeSSE({
            data: JSON.stringify(c.var.inspector.lastRealtimeEvents),
            event: "realtime-event",
            id: String(id++)
          });
        });
        const { promise } = Promise.withResolvers();
        return promise;
      },
      async () => {
        unsub?.();
      }
    );
  }).get("/rpcs", async (c) => {
    const rpcs = await c.var.inspector.accessors.getRpcs();
    return c.json({ rpcs }, 200);
  }).get("/db", async (c) => {
    if (!await c.var.inspector.accessors.isDbEnabled()) {
      return c.json({ enabled: false, db: null }, 200);
    }
    const db = await c.var.inspector.accessors.getDb();
    const rows = await db.execute(`PRAGMA table_list`);
    const tables = TablesSchema.parse(rows).filter(
      (table) => table.schema !== "temp" && !table.name.startsWith("sqlite_")
    );
    const tablesInfo = await Promise.all(
      tables.map((table) => db.execute(`PRAGMA table_info(${table.name})`))
    );
    const columns = tablesInfo.map((def) => ColumnsSchema.parse(def));
    const foreignKeysList = await Promise.all(
      tables.map(
        (table) => db.execute(`PRAGMA foreign_key_list(${table.name})`)
      )
    );
    const foreignKeys = foreignKeysList.map(
      (def) => ForeignKeysSchema.parse(def)
    );
    const countInfo = await Promise.all(
      tables.map(
        (table) => db.execute(`SELECT COUNT(*) as count FROM ${table.name}`)
      )
    );
    const counts = countInfo.map((def) => {
      return def[0].count || 0;
    });
    return c.json(
      {
        enabled: true,
        db: tablesInfo.map((_, index) => {
          return {
            table: tables[index],
            columns: columns[index],
            foreignKeys: foreignKeys[index],
            records: counts[index]
          };
        })
      },
      200
    );
  }).post(
    "/db",
    sValidator(
      "json",
      z6.object({ query: z6.string(), params: z6.array(z6.any()).optional() })
    ),
    async (c) => {
      if (!await c.var.inspector.accessors.isDbEnabled()) {
        return c.json({ enabled: false }, 200);
      }
      const db = await c.var.inspector.accessors.getDb();
      try {
        const result = await db.execute(
          c.req.valid("json").query,
          ...c.req.valid("json").params || []
        );
        return c.json({ result }, 200);
      } catch (error) {
        c;
        return c.json({ error: error.message }, 500);
      }
    }
  );
}
var ActorInspector = class {
  accessors;
  emitter = createNanoEvents();
  #lastRealtimeEvents = [];
  get lastRealtimeEvents() {
    return this.#lastRealtimeEvents;
  }
  constructor(accessors) {
    this.accessors = accessors();
    this.emitter.on("eventFired", (event) => {
      this.#lastRealtimeEvents.push({
        id: crypto.randomUUID(),
        timestamp: Date.now(),
        ...event
      });
      if (this.#lastRealtimeEvents.length > 100) {
        this.#lastRealtimeEvents = this.#lastRealtimeEvents.slice(-100);
      }
    });
  }
};

// dist/schemas/actor-persist/v1.ts
import * as bare2 from "@bare-ts/lib";
var config2 = /* @__PURE__ */ bare2.Config({});
function readPersistedSubscription(bc) {
  return {
    eventName: bare2.readString(bc)
  };
}
function writePersistedSubscription(bc, x) {
  bare2.writeString(bc, x.eventName);
}
function read02(bc) {
  return bare2.readBool(bc) ? bare2.readData(bc) : null;
}
function write02(bc, x) {
  bare2.writeBool(bc, x !== null);
  if (x !== null) {
    bare2.writeData(bc, x);
  }
}
function read12(bc) {
  const len = bare2.readUintSafe(bc);
  if (len === 0) {
    return [];
  }
  const result = [readPersistedSubscription(bc)];
  for (let i = 1; i < len; i++) {
    result[i] = readPersistedSubscription(bc);
  }
  return result;
}
function write12(bc, x) {
  bare2.writeUintSafe(bc, x.length);
  for (let i = 0; i < x.length; i++) {
    writePersistedSubscription(bc, x[i]);
  }
}
function readPersistedConnection(bc) {
  return {
    id: bare2.readString(bc),
    token: bare2.readString(bc),
    driver: bare2.readString(bc),
    driverState: bare2.readData(bc),
    parameters: bare2.readData(bc),
    state: bare2.readData(bc),
    auth: read02(bc),
    subscriptions: read12(bc),
    lastSeen: bare2.readU64(bc)
  };
}
function writePersistedConnection(bc, x) {
  bare2.writeString(bc, x.id);
  bare2.writeString(bc, x.token);
  bare2.writeString(bc, x.driver);
  bare2.writeData(bc, x.driverState);
  bare2.writeData(bc, x.parameters);
  bare2.writeData(bc, x.state);
  write02(bc, x.auth);
  write12(bc, x.subscriptions);
  bare2.writeU64(bc, x.lastSeen);
}
function readGenericPersistedScheduleEvent(bc) {
  return {
    action: bare2.readString(bc),
    args: read02(bc)
  };
}
function writeGenericPersistedScheduleEvent(bc, x) {
  bare2.writeString(bc, x.action);
  write02(bc, x.args);
}
function readPersistedScheduleEventKind(bc) {
  const offset = bc.offset;
  const tag = bare2.readU8(bc);
  switch (tag) {
    case 0:
      return { tag: "GenericPersistedScheduleEvent", val: readGenericPersistedScheduleEvent(bc) };
    default: {
      bc.offset = offset;
      throw new bare2.BareError(offset, "invalid tag");
    }
  }
}
function writePersistedScheduleEventKind(bc, x) {
  switch (x.tag) {
    case "GenericPersistedScheduleEvent": {
      bare2.writeU8(bc, 0);
      writeGenericPersistedScheduleEvent(bc, x.val);
      break;
    }
  }
}
function readPersistedScheduleEvent(bc) {
  return {
    eventId: bare2.readString(bc),
    timestamp: bare2.readU64(bc),
    kind: readPersistedScheduleEventKind(bc)
  };
}
function writePersistedScheduleEvent(bc, x) {
  bare2.writeString(bc, x.eventId);
  bare2.writeU64(bc, x.timestamp);
  writePersistedScheduleEventKind(bc, x.kind);
}
function read2(bc) {
  const len = bare2.readUintSafe(bc);
  if (len === 0) {
    return [];
  }
  const result = [readPersistedConnection(bc)];
  for (let i = 1; i < len; i++) {
    result[i] = readPersistedConnection(bc);
  }
  return result;
}
function write2(bc, x) {
  bare2.writeUintSafe(bc, x.length);
  for (let i = 0; i < x.length; i++) {
    writePersistedConnection(bc, x[i]);
  }
}
function read3(bc) {
  const len = bare2.readUintSafe(bc);
  if (len === 0) {
    return [];
  }
  const result = [readPersistedScheduleEvent(bc)];
  for (let i = 1; i < len; i++) {
    result[i] = readPersistedScheduleEvent(bc);
  }
  return result;
}
function write3(bc, x) {
  bare2.writeUintSafe(bc, x.length);
  for (let i = 0; i < x.length; i++) {
    writePersistedScheduleEvent(bc, x[i]);
  }
}
function readPersistedActor(bc) {
  return {
    input: read02(bc),
    hasInitialized: bare2.readBool(bc),
    state: bare2.readData(bc),
    connections: read2(bc),
    scheduledEvents: read3(bc)
  };
}
function writePersistedActor(bc, x) {
  write02(bc, x.input);
  bare2.writeBool(bc, x.hasInitialized);
  bare2.writeData(bc, x.state);
  write2(bc, x.connections);
  write3(bc, x.scheduledEvents);
}
function encodePersistedActor(x) {
  const bc = new bare2.ByteCursor(
    new Uint8Array(config2.initialBufferLength),
    config2
  );
  writePersistedActor(bc, x);
  return new Uint8Array(bc.view.buffer, bc.view.byteOffset, bc.offset);
}
function decodePersistedActor(bytes) {
  const bc = new bare2.ByteCursor(bytes, config2);
  const result = readPersistedActor(bc);
  if (bc.offset < bc.view.byteLength) {
    throw new bare2.BareError(bc.offset, "remaining bytes");
  }
  return result;
}

// src/schemas/actor-persist/versioned.ts
var CURRENT_VERSION2 = 1;
var migrations2 = /* @__PURE__ */ new Map();
var PERSISTED_ACTOR_VERSIONED = createVersionedDataHandler({
  currentVersion: CURRENT_VERSION2,
  migrations: migrations2,
  serializeVersion: (data) => encodePersistedActor(data),
  deserializeVersion: (bytes) => decodePersistedActor(bytes)
});

// src/actor/context.ts
var ActorContext = class {
  #actor;
  constructor(actor2) {
    this.#actor = actor2;
  }
  /**
   * Get the actor state
   */
  get state() {
    return this.#actor.state;
  }
  /**
   * Get the actor variables
   */
  get vars() {
    return this.#actor.vars;
  }
  /**
   * Broadcasts an event to all connected clients.
   * @param name - The name of the event.
   * @param args - The arguments to send with the event.
   */
  broadcast(name, ...args) {
    this.#actor._broadcast(name, ...args);
    return;
  }
  /**
   * Gets the logger instance.
   */
  get log() {
    return this.#actor.log;
  }
  /**
   * Gets actor ID.
   */
  get actorId() {
    return this.#actor.id;
  }
  /**
   * Gets the actor name.
   */
  get name() {
    return this.#actor.name;
  }
  /**
   * Gets the actor key.
   */
  get key() {
    return this.#actor.key;
  }
  /**
   * Gets the region.
   */
  get region() {
    return this.#actor.region;
  }
  /**
   * Gets the scheduler.
   */
  get schedule() {
    return this.#actor.schedule;
  }
  /**
   * Gets the map of connections.
   */
  get conns() {
    return this.#actor.conns;
  }
  /**
   * Returns the client for the given registry.
   */
  client() {
    return this.#actor.inlineClient;
  }
  /**
   * Gets the database.
   * @experimental
   * @throws {DatabaseNotEnabled} If the database is not enabled.
   */
  get db() {
    return this.#actor.db;
  }
  /**
   * Forces the state to get saved.
   *
   * @param opts - Options for saving the state.
   */
  async saveState(opts) {
    return this.#actor.saveState(opts);
  }
  /**
   * Prevents the actor from sleeping until promise is complete.
   */
  waitUntil(promise) {
    this.#actor._waitUntil(promise);
  }
  /**
   * AbortSignal that fires when the actor is stopping.
   */
  get abortSignal() {
    return this.#actor.abortSignal;
  }
  /**
   * Forces the actor to sleep.
   *
   * Not supported on all drivers.
   *
   * @experimental
   */
  sleep() {
    this.#actor._sleep();
  }
};

// src/actor/schedule.ts
var Schedule = class {
  #actor;
  constructor(actor2) {
    this.#actor = actor2;
  }
  async after(duration, fn, ...args) {
    await this.#actor.scheduleEvent(Date.now() + duration, fn, args);
  }
  async at(timestamp, fn, ...args) {
    await this.#actor.scheduleEvent(timestamp, fn, args);
  }
};

// src/actor/instance.ts
var ActorInstance = class {
  // Shared actor context for this instance
  actorContext;
  #sleepCalled = false;
  #stopCalled = false;
  get isStopping() {
    return this.#stopCalled || this.#sleepCalled;
  }
  #persistChanged = false;
  #isInOnStateChange = false;
  /**
   * The proxied state that notifies of changes automatically.
   *
   * Any data that should be stored indefinitely should be held within this object.
   */
  #persist;
  /** Raw state without the proxy wrapper */
  #persistRaw;
  #persistWriteQueue = new SinglePromiseQueue();
  #alarmWriteQueue = new SinglePromiseQueue();
  #lastSaveTime = 0;
  #pendingSaveTimeout;
  #vars;
  #backgroundPromises = [];
  #abortController = new AbortController();
  #config;
  #connectionDrivers;
  #actorDriver;
  #inlineClient;
  #actorId;
  #name;
  #key;
  #region;
  #ready = false;
  #connections = /* @__PURE__ */ new Map();
  #subscriptionIndex = /* @__PURE__ */ new Map();
  #checkConnLivenessInterval;
  #sleepTimeout;
  // Track active raw requests so sleep logic can account for them
  #activeRawFetchCount = 0;
  #activeRawWebSockets = /* @__PURE__ */ new Set();
  #schedule;
  #db;
  #inspector = new ActorInspector(() => {
    return {
      isDbEnabled: async () => {
        return this.#db !== void 0;
      },
      getDb: async () => {
        return this.db;
      },
      isStateEnabled: async () => {
        return this.stateEnabled;
      },
      getState: async () => {
        this.#validateStateEnabled();
        return this.#persistRaw.state;
      },
      getRpcs: async () => {
        return Object.keys(this.#config.actions);
      },
      getConnections: async () => {
        return Array.from(this.#connections.entries()).map(([id, conn]) => ({
          id,
          stateEnabled: conn._stateEnabled,
          params: conn.params,
          state: conn._stateEnabled ? conn.state : void 0,
          auth: conn.auth
        }));
      },
      setState: async (state) => {
        this.#validateStateEnabled();
        this.#persist.state = { ...state };
        await this.saveState({ immediate: true });
      }
    };
  });
  get id() {
    return this.#actorId;
  }
  get inlineClient() {
    return this.#inlineClient;
  }
  get inspector() {
    return this.#inspector;
  }
  get #sleepingSupported() {
    return this.#actorDriver.sleep !== void 0;
  }
  /**
   * This constructor should never be used directly.
   *
   * Constructed in {@link ActorInstance.start}.
   *
   * @private
   */
  constructor(config4) {
    this.#config = config4;
    this.actorContext = new ActorContext(this);
  }
  async start(connectionDrivers, actorDriver, inlineClient, actorId, name, key, region) {
    this.#connectionDrivers = connectionDrivers;
    this.#actorDriver = actorDriver;
    this.#inlineClient = inlineClient;
    this.#actorId = actorId;
    this.#name = name;
    this.#key = key;
    this.#region = region;
    this.#schedule = new Schedule(this);
    await this.#initialize();
    if (this.#varsEnabled) {
      let vars;
      if ("createVars" in this.#config) {
        const dataOrPromise = this.#config.createVars(
          this.actorContext,
          this.#actorDriver.getContext(this.#actorId)
        );
        if (dataOrPromise instanceof Promise) {
          vars = await deadline(
            dataOrPromise,
            this.#config.options.createVarsTimeout
          );
        } else {
          vars = dataOrPromise;
        }
      } else if ("vars" in this.#config) {
        vars = structuredClone(this.#config.vars);
      } else {
        throw new Error("Could not variables from 'createVars' or 'vars'");
      }
      this.#vars = vars;
    }
    logger().info("actor starting");
    if (this.#config.onStart) {
      const result = this.#config.onStart(this.actorContext);
      if (result instanceof Promise) {
        await result;
      }
    }
    if ("db" in this.#config && this.#config.db) {
      const client = await this.#config.db.createClient({
        getDatabase: () => actorDriver.getDatabase(this.#actorId)
      });
      logger().info("database migration starting");
      await this.#config.db.onMigrate?.(client);
      logger().info("database migration complete");
      this.#db = client;
    }
    if (this.#persist.scheduledEvents.length > 0) {
      await this.#queueSetAlarm(this.#persist.scheduledEvents[0].timestamp);
    }
    logger().info("actor ready");
    this.#ready = true;
    this.#resetSleepTimer();
    this.#checkConnLivenessInterval = setInterval(
      this.#checkConnectionsLiveness.bind(this),
      this.#config.options.connectionLivenessInterval
    );
    this.#checkConnectionsLiveness();
  }
  async #scheduleEventInner(newEvent) {
    this.actorContext.log.info("scheduling event", newEvent);
    const insertIndex = this.#persist.scheduledEvents.findIndex(
      (x) => x.timestamp > newEvent.timestamp
    );
    if (insertIndex === -1) {
      this.#persist.scheduledEvents.push(newEvent);
    } else {
      this.#persist.scheduledEvents.splice(insertIndex, 0, newEvent);
    }
    if (insertIndex === 0 || this.#persist.scheduledEvents.length === 1) {
      this.actorContext.log.info("setting alarm", {
        timestamp: newEvent.timestamp,
        eventCount: this.#persist.scheduledEvents.length
      });
      await this.#queueSetAlarm(newEvent.timestamp);
    }
  }
  async _onAlarm() {
    const now = Date.now();
    this.actorContext.log.debug("alarm triggered", {
      now,
      events: this.#persist.scheduledEvents.length
    });
    this.#resetSleepTimer();
    const runIndex = this.#persist.scheduledEvents.findIndex(
      (x) => x.timestamp <= now
    );
    if (runIndex === -1) {
      logger().warn("no events are due yet, time may have broken");
      if (this.#persist.scheduledEvents.length > 0) {
        const nextTs = this.#persist.scheduledEvents[0].timestamp;
        this.actorContext.log.warn(
          "alarm fired early, rescheduling for next event",
          {
            now,
            nextTs,
            delta: nextTs - now
          }
        );
        await this.#queueSetAlarm(nextTs);
      }
      this.actorContext.log.debug("no events to run", { now });
      return;
    }
    const scheduleEvents = this.#persist.scheduledEvents.splice(
      0,
      runIndex + 1
    );
    this.actorContext.log.debug("running events", {
      count: scheduleEvents.length
    });
    if (this.#persist.scheduledEvents.length > 0) {
      const nextTs = this.#persist.scheduledEvents[0].timestamp;
      this.actorContext.log.info("setting next alarm", {
        nextTs,
        remainingEvents: this.#persist.scheduledEvents.length
      });
      await this.#queueSetAlarm(nextTs);
    }
    for (const event of scheduleEvents) {
      try {
        this.actorContext.log.info("running action for event", {
          event: event.eventId,
          timestamp: event.timestamp,
          action: event.kind.generic.actionName
        });
        const fn = this.#config.actions[event.kind.generic.actionName];
        if (!fn)
          throw new Error(
            `Missing action for alarm ${event.kind.generic.actionName}`
          );
        if (typeof fn !== "function")
          throw new Error(
            `Alarm function lookup for ${event.kind.generic.actionName} returned ${typeof fn}`
          );
        try {
          const args = event.kind.generic.args ? cbor5.decode(new Uint8Array(event.kind.generic.args)) : [];
          await fn.call(void 0, this.actorContext, ...args);
        } catch (error) {
          this.actorContext.log.error("error while running event", {
            error: stringifyError(error),
            event: event.eventId,
            timestamp: event.timestamp,
            action: event.kind.generic.actionName
          });
        }
      } catch (error) {
        this.actorContext.log.error("internal error while running event", {
          error: stringifyError(error),
          ...event
        });
      }
    }
  }
  async scheduleEvent(timestamp, action, args) {
    return this.#scheduleEventInner({
      eventId: crypto.randomUUID(),
      timestamp,
      kind: {
        generic: {
          actionName: action,
          args: bufferToArrayBuffer(cbor5.encode(args))
        }
      }
    });
  }
  get stateEnabled() {
    return "createState" in this.#config || "state" in this.#config;
  }
  #validateStateEnabled() {
    if (!this.stateEnabled) {
      throw new StateNotEnabled();
    }
  }
  get #connStateEnabled() {
    return "createConnState" in this.#config || "connState" in this.#config;
  }
  get #varsEnabled() {
    return "createVars" in this.#config || "vars" in this.#config;
  }
  #validateVarsEnabled() {
    if (!this.#varsEnabled) {
      throw new VarsNotEnabled();
    }
  }
  /** Promise used to wait for a save to complete. This is required since you cannot await `#saveStateThrottled`. */
  #onPersistSavedPromise;
  /** Throttled save state method. Used to write to KV at a reasonable cadence. */
  #savePersistThrottled() {
    const now = Date.now();
    const timeSinceLastSave = now - this.#lastSaveTime;
    const saveInterval = this.#config.options.stateSaveInterval;
    if (timeSinceLastSave < saveInterval) {
      if (this.#pendingSaveTimeout === void 0) {
        this.#pendingSaveTimeout = setTimeout(() => {
          this.#pendingSaveTimeout = void 0;
          this.#savePersistInner();
        }, saveInterval - timeSinceLastSave);
      }
    } else {
      this.#savePersistInner();
    }
  }
  /** Saves the state to KV. You probably want to use #saveStateThrottled instead except for a few edge cases. */
  async #savePersistInner() {
    try {
      this.#lastSaveTime = Date.now();
      if (this.#persistChanged) {
        const finished = this.#persistWriteQueue.enqueue(async () => {
          logger().debug("saving persist");
          this.#persistChanged = false;
          const bareData = this.#convertToBarePersisted(this.#persistRaw);
          await this.#actorDriver.writePersistedData(
            this.#actorId,
            PERSISTED_ACTOR_VERSIONED.serializeWithEmbeddedVersion(bareData)
          );
          logger().debug("persist saved");
        });
        await finished;
      }
      this.#onPersistSavedPromise?.resolve();
    } catch (error) {
      this.#onPersistSavedPromise?.reject(error);
      throw error;
    }
  }
  async #queueSetAlarm(timestamp) {
    await this.#alarmWriteQueue.enqueue(async () => {
      await this.#actorDriver.setAlarm(this, timestamp);
    });
  }
  /**
   * Creates proxy for `#persist` that handles automatically flagging when state needs to be updated.
   */
  #setPersist(target) {
    this.#persistRaw = target;
    if (target === null || typeof target !== "object") {
      let invalidPath = "";
      if (!isCborSerializable(
        target,
        (path3) => {
          invalidPath = path3;
        },
        ""
      )) {
        throw new InvalidStateType({ path: invalidPath });
      }
      return target;
    }
    if (this.#persist) {
      onChange.unsubscribe(this.#persist);
    }
    this.#persist = onChange(
      target,
      // biome-ignore lint/suspicious/noExplicitAny: Don't know types in proxy
      (path3, value, _previousValue, _applyData) => {
        if (path3 !== "state" && !path3.startsWith("state.")) {
          return;
        }
        let invalidPath = "";
        if (!isCborSerializable(
          value,
          (invalidPathPart) => {
            invalidPath = invalidPathPart;
          },
          ""
        )) {
          throw new InvalidStateType({
            path: path3 + (invalidPath ? `.${invalidPath}` : "")
          });
        }
        this.#persistChanged = true;
        this.inspector.emitter.emit("stateUpdated", this.#persist.state);
        if (this.#config.onStateChange && this.#ready && !this.#isInOnStateChange) {
          try {
            this.#isInOnStateChange = true;
            this.#config.onStateChange(
              this.actorContext,
              this.#persistRaw.state
            );
          } catch (error) {
            logger().error("error in `_onStateChange`", {
              error: stringifyError(error)
            });
          } finally {
            this.#isInOnStateChange = false;
          }
        }
      },
      { ignoreDetached: true }
    );
  }
  async #initialize() {
    const persistDataBuffer = await this.#actorDriver.readPersistedData(
      this.#actorId
    );
    invariant2(
      persistDataBuffer !== void 0,
      "persist data has not been set, it should be set when initialized"
    );
    const bareData = PERSISTED_ACTOR_VERSIONED.deserializeWithEmbeddedVersion(
      persistDataBuffer
    );
    const persistData = this.#convertFromBarePersisted(bareData);
    if (persistData.hasInitiated) {
      logger().info("actor restoring", {
        connections: persistData.connections.length
      });
      this.#setPersist(persistData);
      for (const connPersist of this.#persist.connections) {
        const driver = this.__getConnDriver(connPersist.connDriver);
        const conn = new Conn(
          this,
          connPersist,
          driver,
          this.#connStateEnabled
        );
        this.#connections.set(conn.id, conn);
        for (const sub of connPersist.subscriptions) {
          this.#addSubscription(sub.eventName, conn, true);
        }
      }
    } else {
      logger().info("actor creating");
      let stateData;
      if (this.stateEnabled) {
        logger().info("actor state initializing");
        if ("createState" in this.#config) {
          this.#config.createState;
          stateData = await this.#config.createState(
            this.actorContext,
            persistData.input
          );
        } else if ("state" in this.#config) {
          stateData = structuredClone(this.#config.state);
        } else {
          throw new Error("Both 'createState' or 'state' were not defined");
        }
      } else {
        logger().debug("state not enabled");
      }
      persistData.state = stateData;
      persistData.hasInitiated = true;
      logger().debug("writing state");
      const bareData2 = this.#convertToBarePersisted(persistData);
      await this.#actorDriver.writePersistedData(
        this.#actorId,
        PERSISTED_ACTOR_VERSIONED.serializeWithEmbeddedVersion(bareData2)
      );
      this.#setPersist(persistData);
      if (this.#config.onCreate) {
        await this.#config.onCreate(this.actorContext, persistData.input);
      }
    }
  }
  __getConnForId(id) {
    return this.#connections.get(id);
  }
  /**
   * Removes a connection and cleans up its resources.
   */
  __removeConn(conn) {
    if (!conn) {
      logger().warn("`conn` does not exist");
      return;
    }
    const connIdx = this.#persist.connections.findIndex(
      (c) => c.connId === conn.id
    );
    if (connIdx !== -1) {
      this.#persist.connections.splice(connIdx, 1);
      this.saveState({ immediate: true, allowStoppingState: true });
    } else {
      logger().warn("could not find persisted connection to remove", {
        connId: conn.id
      });
    }
    this.#connections.delete(conn.id);
    for (const eventName of [...conn.subscriptions.values()]) {
      this.#removeSubscription(eventName, conn, true);
    }
    this.inspector.emitter.emit("connectionUpdated");
    if (this.#config.onDisconnect) {
      try {
        const result = this.#config.onDisconnect(this.actorContext, conn);
        if (result instanceof Promise) {
          result.catch((error) => {
            logger().error("error in `onDisconnect`", {
              error: stringifyError(error)
            });
          });
        }
      } catch (error) {
        logger().error("error in `onDisconnect`", {
          error: stringifyError(error)
        });
      }
    }
    this.#resetSleepTimer();
  }
  async prepareConn(params, request) {
    let connState;
    const onBeforeConnectOpts = {
      request
    };
    if (this.#config.onBeforeConnect) {
      await this.#config.onBeforeConnect(
        this.actorContext,
        onBeforeConnectOpts,
        params
      );
    }
    if (this.#connStateEnabled) {
      if ("createConnState" in this.#config) {
        const dataOrPromise = this.#config.createConnState(
          this.actorContext,
          onBeforeConnectOpts,
          params
        );
        if (dataOrPromise instanceof Promise) {
          connState = await deadline(
            dataOrPromise,
            this.#config.options.createConnStateTimeout
          );
        } else {
          connState = dataOrPromise;
        }
      } else if ("connState" in this.#config) {
        connState = structuredClone(this.#config.connState);
      } else {
        throw new Error(
          "Could not create connection state from 'createConnState' or 'connState'"
        );
      }
    }
    return connState;
  }
  __getConnDriver(driverId) {
    const driver = this.#connectionDrivers[driverId];
    if (!driver) throw new Error(`No connection driver: ${driverId}`);
    return driver;
  }
  /**
   * Called after establishing a connection handshake.
   */
  async createConn(connectionId, connectionToken, params, state, driverId, driverState, authData) {
    this.#assertReady();
    if (this.#connections.has(connectionId)) {
      throw new Error(`Connection already exists: ${connectionId}`);
    }
    const driver = this.__getConnDriver(driverId);
    const persist = {
      connId: connectionId,
      token: connectionToken,
      connDriver: driverId,
      connDriverState: driverState,
      params,
      state,
      authData,
      lastSeen: Date.now(),
      subscriptions: []
    };
    const conn = new Conn(
      this,
      persist,
      driver,
      this.#connStateEnabled
    );
    this.#connections.set(conn.id, conn);
    this.#resetSleepTimer();
    this.#persist.connections.push(persist);
    this.saveState({ immediate: true });
    if (this.#config.onConnect) {
      try {
        const result = this.#config.onConnect(this.actorContext, conn);
        if (result instanceof Promise) {
          deadline(result, this.#config.options.onConnectTimeout).catch(
            (error) => {
              logger().error("error in `onConnect`, closing socket", {
                error
              });
              conn?.disconnect("`onConnect` failed");
            }
          );
        }
      } catch (error) {
        logger().error("error in `onConnect`", {
          error: stringifyError(error)
        });
        conn?.disconnect("`onConnect` failed");
      }
    }
    this.inspector.emitter.emit("connectionUpdated");
    conn._sendMessage(
      new CachedSerializer(
        {
          body: {
            tag: "Init",
            val: {
              actorId: this.id,
              connectionId: conn.id,
              connectionToken: conn._token
            }
          }
        },
        TO_CLIENT_VERSIONED
      )
    );
    return conn;
  }
  // MARK: Messages
  async processMessage(message, conn) {
    await processMessage(message, this, conn, {
      onExecuteAction: async (ctx, name, args) => {
        this.inspector.emitter.emit("eventFired", {
          type: "action",
          name,
          args,
          connId: conn.id
        });
        return await this.executeAction(ctx, name, args);
      },
      onSubscribe: async (eventName, conn2) => {
        this.inspector.emitter.emit("eventFired", {
          type: "subscribe",
          eventName,
          connId: conn2.id
        });
        this.#addSubscription(eventName, conn2, false);
      },
      onUnsubscribe: async (eventName, conn2) => {
        this.inspector.emitter.emit("eventFired", {
          type: "unsubscribe",
          eventName,
          connId: conn2.id
        });
        this.#removeSubscription(eventName, conn2, false);
      }
    });
  }
  // MARK: Events
  #addSubscription(eventName, connection, fromPersist) {
    if (connection.subscriptions.has(eventName)) {
      logger().debug("connection already has subscription", { eventName });
      return;
    }
    if (!fromPersist) {
      connection.__persist.subscriptions.push({ eventName });
      this.saveState({ immediate: true });
    }
    connection.subscriptions.add(eventName);
    let subscribers = this.#subscriptionIndex.get(eventName);
    if (!subscribers) {
      subscribers = /* @__PURE__ */ new Set();
      this.#subscriptionIndex.set(eventName, subscribers);
    }
    subscribers.add(connection);
  }
  #removeSubscription(eventName, connection, fromRemoveConn) {
    if (!connection.subscriptions.has(eventName)) {
      logger().warn("connection does not have subscription", { eventName });
      return;
    }
    if (!fromRemoveConn) {
      connection.subscriptions.delete(eventName);
      const subIdx = connection.__persist.subscriptions.findIndex(
        (s) => s.eventName === eventName
      );
      if (subIdx !== -1) {
        connection.__persist.subscriptions.splice(subIdx, 1);
      } else {
        logger().warn("subscription does not exist with name", { eventName });
      }
      this.saveState({ immediate: true });
    }
    const subscribers = this.#subscriptionIndex.get(eventName);
    if (subscribers) {
      subscribers.delete(connection);
      if (subscribers.size === 0) {
        this.#subscriptionIndex.delete(eventName);
      }
    }
  }
  #assertReady(allowStoppingState = false) {
    if (!this.#ready) throw new InternalError("Actor not ready");
    if (!allowStoppingState && this.#sleepCalled)
      throw new InternalError("Actor is going to sleep");
    if (!allowStoppingState && this.#stopCalled)
      throw new InternalError("Actor is stopping");
  }
  /**
   * Check the liveness of all connections.
   * Sets up a recurring check based on the configured interval.
   */
  #checkConnectionsLiveness() {
    logger().debug("checking connections liveness");
    for (const conn of this.#connections.values()) {
      const liveness = conn[CONNECTION_CHECK_LIVENESS_SYMBOL]();
      if (liveness.status === "connected") {
        logger().debug("connection is alive", { connId: conn.id });
      } else {
        const lastSeen = liveness.lastSeen;
        const sinceLastSeen = Date.now() - lastSeen;
        if (sinceLastSeen < this.#config.options.connectionLivenessTimeout) {
          logger().debug("connection might be alive, will check later", {
            connId: conn.id,
            lastSeen,
            sinceLastSeen
          });
          continue;
        }
        logger().warn("connection is dead, removing", {
          connId: conn.id,
          lastSeen
        });
        this.__removeConn(conn);
      }
    }
  }
  /**
   * Check if the actor is ready to handle requests.
   */
  isReady() {
    return this.#ready;
  }
  /**
   * Execute an action call from a client.
   *
   * This method handles:
   * 1. Validating the action name
   * 2. Executing the action function
   * 3. Processing the result through onBeforeActionResponse (if configured)
   * 4. Handling timeouts and errors
   * 5. Saving state changes
   *
   * @param ctx The action context
   * @param actionName The name of the action being called
   * @param args The arguments passed to the action
   * @returns The result of the action call
   * @throws {ActionNotFound} If the action doesn't exist
   * @throws {ActionTimedOut} If the action times out
   * @internal
   */
  async executeAction(ctx, actionName, args) {
    invariant2(this.#ready, "executing action before ready");
    if (!(actionName in this.#config.actions)) {
      logger().warn("action does not exist", { actionName });
      throw new ActionNotFound(actionName);
    }
    const actionFunction = this.#config.actions[actionName];
    if (typeof actionFunction !== "function") {
      logger().warn("action is not a function", {
        actionName,
        type: typeof actionFunction
      });
      throw new ActionNotFound(actionName);
    }
    try {
      logger().debug("executing action", { actionName, args });
      const outputOrPromise = actionFunction.call(void 0, ctx, ...args);
      let output;
      if (outputOrPromise instanceof Promise) {
        logger().debug("awaiting async action", { actionName });
        output = await deadline(
          outputOrPromise,
          this.#config.options.actionTimeout
        );
        logger().debug("async action completed", { actionName });
      } else {
        output = outputOrPromise;
      }
      if (this.#config.onBeforeActionResponse) {
        try {
          const processedOutput = this.#config.onBeforeActionResponse(
            this.actorContext,
            actionName,
            args,
            output
          );
          if (processedOutput instanceof Promise) {
            logger().debug("awaiting onBeforeActionResponse", {
              actionName
            });
            output = await processedOutput;
            logger().debug("onBeforeActionResponse completed", {
              actionName
            });
          } else {
            output = processedOutput;
          }
        } catch (error) {
          logger().error("error in `onBeforeActionResponse`", {
            error: stringifyError(error)
          });
        }
      }
      logger().debug("action completed", {
        actionName,
        outputType: typeof output,
        isPromise: output instanceof Promise
      });
      return output;
    } catch (error) {
      if (error instanceof DeadlineError) {
        throw new ActionTimedOut();
      }
      logger().error("action error", {
        actionName,
        error: stringifyError(error)
      });
      throw error;
    } finally {
      this.#savePersistThrottled();
    }
  }
  /**
   * Returns a list of action methods available on this actor.
   */
  get actions() {
    return Object.keys(this.#config.actions);
  }
  /**
   * Handles raw HTTP requests to the actor.
   */
  async handleFetch(request, opts) {
    this.#assertReady();
    if (!this.#config.onFetch) {
      throw new FetchHandlerNotDefined();
    }
    this.#activeRawFetchCount++;
    this.#resetSleepTimer();
    try {
      const response = await this.#config.onFetch(
        this.actorContext,
        request,
        opts
      );
      if (!response) {
        throw new InvalidFetchResponse();
      }
      return response;
    } catch (error) {
      logger().error("onFetch error", {
        error: stringifyError(error)
      });
      throw error;
    } finally {
      this.#activeRawFetchCount = Math.max(0, this.#activeRawFetchCount - 1);
      this.#resetSleepTimer();
      this.#savePersistThrottled();
    }
  }
  /**
   * Handles raw WebSocket connections to the actor.
   */
  async handleWebSocket(websocket, opts) {
    this.#assertReady();
    if (!this.#config.onWebSocket) {
      throw new InternalError("onWebSocket handler not defined");
    }
    try {
      const stateBeforeHandler = this.#persistChanged;
      this.#activeRawWebSockets.add(websocket);
      this.#resetSleepTimer();
      const onSocketClosed = () => {
        try {
          websocket.removeEventListener("close", onSocketClosed);
          websocket.removeEventListener("error", onSocketClosed);
        } catch {
        }
        this.#activeRawWebSockets.delete(websocket);
        this.#resetSleepTimer();
      };
      try {
        websocket.addEventListener("close", onSocketClosed);
        websocket.addEventListener("error", onSocketClosed);
      } catch {
      }
      await this.#config.onWebSocket(this.actorContext, websocket, opts);
      if (this.#persistChanged && !stateBeforeHandler) {
        await this.saveState({ immediate: true });
      }
    } catch (error) {
      logger().error("onWebSocket error", {
        error: stringifyError(error)
      });
      throw error;
    } finally {
      this.#savePersistThrottled();
    }
  }
  // MARK: Lifecycle hooks
  // MARK: Exposed methods
  /**
   * Gets the logger instance.
   */
  get log() {
    return instanceLogger();
  }
  /**
   * Gets the name.
   */
  get name() {
    return this.#name;
  }
  /**
   * Gets the key.
   */
  get key() {
    return this.#key;
  }
  /**
   * Gets the region.
   */
  get region() {
    return this.#region;
  }
  /**
   * Gets the scheduler.
   */
  get schedule() {
    return this.#schedule;
  }
  /**
   * Gets the map of connections.
   */
  get conns() {
    return this.#connections;
  }
  /**
   * Gets the current state.
   *
   * Changing properties of this value will automatically be persisted.
   */
  get state() {
    this.#validateStateEnabled();
    return this.#persist.state;
  }
  /**
   * Gets the database.
   * @experimental
   * @throws {DatabaseNotEnabled} If the database is not enabled.
   */
  get db() {
    if (!this.#db) {
      throw new DatabaseNotEnabled();
    }
    return this.#db;
  }
  /**
   * Sets the current state.
   *
   * This property will automatically be persisted.
   */
  set state(value) {
    this.#validateStateEnabled();
    this.#persist.state = value;
  }
  get vars() {
    this.#validateVarsEnabled();
    invariant2(this.#vars !== void 0, "vars not enabled");
    return this.#vars;
  }
  /**
   * Broadcasts an event to all connected clients.
   * @param name - The name of the event.
   * @param args - The arguments to send with the event.
   */
  _broadcast(name, ...args) {
    this.#assertReady();
    this.inspector.emitter.emit("eventFired", {
      type: "broadcast",
      eventName: name,
      args
    });
    const subscriptions = this.#subscriptionIndex.get(name);
    if (!subscriptions) return;
    const toClientSerializer = new CachedSerializer(
      {
        body: {
          tag: "Event",
          val: {
            name,
            args: bufferToArrayBuffer(cbor5.encode(args))
          }
        }
      },
      TO_CLIENT_VERSIONED
    );
    for (const connection of subscriptions) {
      connection._sendMessage(toClientSerializer);
    }
  }
  /**
   * Prevents the actor from sleeping until promise is complete.
   *
   * This allows the actor runtime to ensure that a promise completes while
   * returning from an action request early.
   *
   * @param promise - The promise to run in the background.
   */
  _waitUntil(promise) {
    this.#assertReady();
    const nonfailablePromise = promise.then(() => {
      logger().debug("wait until promise complete");
    }).catch((error) => {
      logger().error("wait until promise failed", {
        error: stringifyError(error)
      });
    });
    this.#backgroundPromises.push(nonfailablePromise);
  }
  /**
   * Forces the state to get saved.
   *
   * This is helpful if running a long task that may fail later or when
   * running a background job that updates the state.
   *
   * @param opts - Options for saving the state.
   */
  async saveState(opts) {
    this.#assertReady(opts.allowStoppingState);
    if (this.#persistChanged) {
      if (opts.immediate) {
        await this.#savePersistInner();
      } else {
        if (!this.#onPersistSavedPromise) {
          this.#onPersistSavedPromise = Promise.withResolvers();
        }
        this.#savePersistThrottled();
        await this.#onPersistSavedPromise.promise;
      }
    }
  }
  // MARK: Sleep
  /**
   * Reset timer from the last actor interaction that allows it to be put to sleep.
   *
   * This should be called any time a sleep-related event happens:
   * - Connection opens (will clear timer)
   * - Connection closes (will schedule timer if there are no open connections)
   * - Alarm triggers (will reset timer)
   *
   * We don't need to call this on events like individual action calls, since there will always be a connection open for these.
   **/
  #resetSleepTimer() {
    if (this.#config.options.noSleep || !this.#sleepingSupported) return;
    const canSleep = this.#canSleep();
    logger().debug("resetting sleep timer", {
      canSleep,
      existingTimeout: !!this.#sleepTimeout
    });
    if (this.#sleepTimeout) {
      clearTimeout(this.#sleepTimeout);
      this.#sleepTimeout = void 0;
    }
    if (this.#sleepCalled) return;
    if (canSleep) {
      this.#sleepTimeout = setTimeout(() => {
        this._sleep().catch((error) => {
          logger().error("error during sleep", {
            error: stringifyError(error)
          });
        });
      }, this.#config.options.sleepTimeout);
    }
  }
  /** If this actor can be put in a sleeping state. */
  #canSleep() {
    if (!this.#ready) return false;
    for (const conn of this.#connections.values()) {
      if (conn.status === "connected") return false;
    }
    if (this.#activeRawFetchCount > 0) return false;
    if (this.#activeRawWebSockets.size > 0) return false;
    return true;
  }
  /** Puts an actor to sleep. This should just start the sleep sequence, most shutdown logic should be in _stop (which is called by the ActorDriver when sleeping). */
  async _sleep() {
    const sleep2 = this.#actorDriver.sleep?.bind(
      this.#actorDriver,
      this.#actorId
    );
    invariant2(this.#sleepingSupported, "sleeping not supported");
    invariant2(sleep2, "no sleep on driver");
    if (this.#sleepCalled) {
      logger().warn("already sleeping actor");
      return;
    }
    this.#sleepCalled = true;
    logger().info("actor sleeping");
    setImmediate(async () => {
      await sleep2();
    });
  }
  // MARK: Stop
  async _stop() {
    if (this.#stopCalled) {
      logger().warn("already stopping actor");
      return;
    }
    this.#stopCalled = true;
    logger().info("actor stopping");
    try {
      this.#abortController.abort();
    } catch {
    }
    if (this.#config.onStop) {
      try {
        logger().debug("calling onStop");
        const result = this.#config.onStop(this.actorContext);
        if (result instanceof Promise) {
          await deadline(result, this.#config.options.onStopTimeout);
        }
        logger().debug("onStop completed");
      } catch (error) {
        if (error instanceof DeadlineError) {
          logger().error("onStop timed out");
        } else {
          logger().error("error in onStop", {
            error: stringifyError(error)
          });
        }
      }
    }
    const promises = [];
    for (const connection of this.#connections.values()) {
      promises.push(connection.disconnect());
    }
    await this.#waitBackgroundPromises(this.#config.options.waitUntilTimeout);
    if (this.#pendingSaveTimeout) clearTimeout(this.#pendingSaveTimeout);
    if (this.#sleepTimeout) clearTimeout(this.#sleepTimeout);
    if (this.#checkConnLivenessInterval)
      clearInterval(this.#checkConnLivenessInterval);
    await this.saveState({ immediate: true, allowStoppingState: true });
    const res = Promise.race([
      Promise.all(promises).then(() => false),
      new Promise(
        (res2) => globalThis.setTimeout(() => res2(true), 1500)
      )
    ]);
    if (await res) {
      logger().warn(
        "timed out waiting for connections to close, shutting down anyway"
      );
    }
    if (this.#persistWriteQueue.runningDrainLoop)
      await this.#persistWriteQueue.runningDrainLoop;
    if (this.#alarmWriteQueue.runningDrainLoop)
      await this.#alarmWriteQueue.runningDrainLoop;
  }
  /** Abort signal that fires when the actor is stopping. */
  get abortSignal() {
    return this.#abortController.signal;
  }
  /** Wait for background waitUntil promises with a timeout. */
  async #waitBackgroundPromises(timeoutMs) {
    const pending = this.#backgroundPromises;
    if (pending.length === 0) {
      logger().debug("no background promises");
      return;
    }
    const timedOut = await Promise.race([
      Promise.allSettled(pending).then(() => false),
      new Promise(
        (resolve) => setTimeout(() => resolve(true), timeoutMs)
      )
    ]);
    if (timedOut) {
      logger().error(
        "timed out waiting for background tasks, background promises may have leaked",
        {
          count: pending.length,
          timeoutMs
        }
      );
    } else {
      logger().debug("background promises finished");
    }
  }
  // MARK: BARE Conversion Helpers
  #convertToBarePersisted(persist) {
    return {
      input: persist.input !== void 0 ? bufferToArrayBuffer(cbor5.encode(persist.input)) : null,
      hasInitialized: persist.hasInitiated,
      state: bufferToArrayBuffer(cbor5.encode(persist.state)),
      connections: persist.connections.map((conn) => ({
        id: conn.connId,
        token: conn.token,
        driver: conn.connDriver,
        driverState: bufferToArrayBuffer(
          cbor5.encode(conn.connDriverState || {})
        ),
        parameters: bufferToArrayBuffer(cbor5.encode(conn.params || {})),
        state: bufferToArrayBuffer(cbor5.encode(conn.state || {})),
        auth: conn.authData !== void 0 ? bufferToArrayBuffer(cbor5.encode(conn.authData)) : null,
        subscriptions: conn.subscriptions.map((sub) => ({
          eventName: sub.eventName
        })),
        lastSeen: BigInt(conn.lastSeen)
      })),
      scheduledEvents: persist.scheduledEvents.map((event) => ({
        eventId: event.eventId,
        timestamp: BigInt(event.timestamp),
        kind: {
          tag: "GenericPersistedScheduleEvent",
          val: {
            action: event.kind.generic.actionName,
            args: event.kind.generic.args ?? null
          }
        }
      }))
    };
  }
  #convertFromBarePersisted(bareData) {
    return {
      input: bareData.input ? cbor5.decode(new Uint8Array(bareData.input)) : void 0,
      hasInitiated: bareData.hasInitialized,
      state: cbor5.decode(new Uint8Array(bareData.state)),
      connections: bareData.connections.map((conn) => ({
        connId: conn.id,
        token: conn.token,
        connDriver: conn.driver,
        connDriverState: cbor5.decode(new Uint8Array(conn.driverState)),
        params: cbor5.decode(new Uint8Array(conn.parameters)),
        state: cbor5.decode(new Uint8Array(conn.state)),
        authData: conn.auth ? cbor5.decode(new Uint8Array(conn.auth)) : void 0,
        subscriptions: conn.subscriptions.map((sub) => ({
          eventName: sub.eventName
        })),
        lastSeen: Number(conn.lastSeen)
      })),
      scheduledEvents: bareData.scheduledEvents.map((event) => ({
        eventId: event.eventId,
        timestamp: Number(event.timestamp),
        kind: {
          generic: {
            actionName: event.kind.val.action,
            args: event.kind.val.args
          }
        }
      }))
    };
  }
};

// src/actor/definition.ts
var ActorDefinition = class {
  #config;
  constructor(config4) {
    this.#config = config4;
  }
  get config() {
    return this.#config;
  }
  instantiate() {
    return new ActorInstance(this.#config);
  }
};
function lookupInRegistry(registryConfig, name) {
  const definition = registryConfig.use[name];
  if (!definition) throw new Error(`no actor in registry for name ${name}`);
  return definition;
}

// src/actor/generic-conn-driver.ts
var GenericConnGlobalState = class {
  websockets = /* @__PURE__ */ new Map();
  sseStreams = /* @__PURE__ */ new Map();
};
function createGenericConnDrivers(globalState) {
  return {
    [CONNECTION_DRIVER_WEBSOCKET]: createGenericWebSocketDriver(globalState),
    [CONNECTION_DRIVER_SSE]: createGenericSseDriver(globalState),
    [CONNECTION_DRIVER_HTTP]: createGenericHttpDriver()
  };
}
function createGenericWebSocketDriver(globalState) {
  return {
    sendMessage: (actor2, conn, state, message) => {
      const ws = globalState.websockets.get(conn.id);
      if (!ws) {
        logger().warn("missing ws for sendMessage", {
          actorId: actor2.id,
          connId: conn.id,
          totalCount: globalState.websockets.size
        });
        return;
      }
      const serialized = message.serialize(state.encoding);
      logger().debug("sending websocket message", {
        encoding: state.encoding,
        dataType: typeof serialized,
        isUint8Array: serialized instanceof Uint8Array,
        isArrayBuffer: serialized instanceof ArrayBuffer,
        dataLength: serialized.byteLength || serialized.length
      });
      if (serialized instanceof Uint8Array) {
        const buffer = serialized.buffer.slice(
          serialized.byteOffset,
          serialized.byteOffset + serialized.byteLength
        );
        if (buffer instanceof SharedArrayBuffer) {
          const arrayBuffer = new ArrayBuffer(buffer.byteLength);
          new Uint8Array(arrayBuffer).set(new Uint8Array(buffer));
          logger().debug("converted SharedArrayBuffer to ArrayBuffer", {
            byteLength: arrayBuffer.byteLength
          });
          ws.send(arrayBuffer);
        } else {
          logger().debug("sending ArrayBuffer", {
            byteLength: buffer.byteLength
          });
          ws.send(buffer);
        }
      } else {
        logger().debug("sending string data", {
          length: serialized.length
        });
        ws.send(serialized);
      }
    },
    disconnect: async (actor2, conn, _state, reason) => {
      const ws = globalState.websockets.get(conn.id);
      if (!ws) {
        logger().warn("missing ws for disconnect", {
          actorId: actor2.id,
          connId: conn.id,
          totalCount: globalState.websockets.size
        });
        return;
      }
      const raw = ws.raw;
      if (!raw) {
        logger().warn("ws.raw does not exist");
        return;
      }
      const { promise, resolve } = Promise.withResolvers();
      raw.addEventListener("close", () => resolve());
      ws.close(1e3, reason);
      await promise;
    },
    getConnectionReadyState: (_actor, conn) => {
      const ws = globalState.websockets.get(conn.id);
      if (!ws) {
        logger().warn("missing ws for getConnectionReadyState", {
          connId: conn.id
        });
        return void 0;
      }
      const raw = ws.raw;
      return raw.readyState;
    }
  };
}
function createGenericSseDriver(globalState) {
  return {
    sendMessage: (_actor, conn, state, message) => {
      const stream = globalState.sseStreams.get(conn.id);
      if (!stream) {
        logger().warn("missing sse stream for sendMessage", {
          connId: conn.id
        });
        return;
      }
      stream.writeSSE({
        data: encodeDataToString(message.serialize(state.encoding))
      });
    },
    disconnect: async (_actor, conn, _state, _reason) => {
      const stream = globalState.sseStreams.get(conn.id);
      if (!stream) {
        logger().warn("missing sse stream for disconnect", { connId: conn.id });
        return;
      }
      stream.close();
    },
    getConnectionReadyState: (_actor, conn) => {
      const stream = globalState.sseStreams.get(conn.id);
      if (!stream) {
        logger().warn("missing sse stream for getConnectionReadyState", {
          connId: conn.id
        });
        return void 0;
      }
      if (stream.aborted || stream.closed) {
        return 3 /* CLOSED */;
      }
      return 1 /* OPEN */;
    }
  };
}
function createGenericHttpDriver() {
  return {
    getConnectionReadyState(_actor, _conn) {
      return 1 /* OPEN */;
    },
    disconnect: async () => {
    }
  };
}

// src/actor/router.ts
import { Hono as Hono2 } from "hono";
import invariant3 from "invariant";

// src/common/router.ts
import * as cbor6 from "cbor-x";
function logger3() {
  return getLogger("router");
}
function loggerMiddleware(logger10) {
  return async (c, next) => {
    const method = c.req.method;
    const path3 = c.req.path;
    const startTime = Date.now();
    await next();
    const duration = Date.now() - startTime;
    logger10.debug("http request", {
      method,
      path: path3,
      status: c.res.status,
      dt: `${duration}ms`,
      reqSize: c.req.header("content-length"),
      resSize: c.res.headers.get("content-length"),
      userAgent: c.req.header("user-agent")
    });
  };
}
function handleRouteNotFound(c) {
  return c.text("Not Found (RivetKit)", 404);
}
function handleRouteError(opts, error, c) {
  const exposeInternalError = opts.enableExposeInternalError && getRequestExposeInternalError(c.req.raw);
  const { statusCode, code, message, metadata } = deconstructError(
    error,
    logger3(),
    {
      method: c.req.method,
      path: c.req.path
    },
    exposeInternalError
  );
  let encoding;
  try {
    encoding = getRequestEncoding(c.req);
  } catch (err) {
    logger3().debug("failed to extract encoding", {
      error: stringifyError(err)
    });
    encoding = "json";
  }
  const output = serializeWithEncoding(
    encoding,
    {
      code,
      message,
      metadata: bufferToArrayBuffer(cbor6.encode(metadata))
    },
    HTTP_RESPONSE_ERROR_VERSIONED
  );
  return c.body(output, { status: statusCode });
}

// src/inspector/utils.ts
import crypto2 from "node:crypto";
import { createMiddleware } from "hono/factory";

// src/inspector/log.ts
function inspectorLogger() {
  return getLogger("inspector");
}

// src/inspector/utils.ts
function compareSecrets(providedSecret, validSecret) {
  if (providedSecret.length !== validSecret.length) {
    return false;
  }
  const encoder = new TextEncoder();
  const a = encoder.encode(providedSecret);
  const b = encoder.encode(validSecret);
  if (a.byteLength !== b.byteLength) {
    return false;
  }
  if (!crypto2.timingSafeEqual(a, b)) {
    return false;
  }
  return true;
}
var secureInspector = (runConfig) => createMiddleware(async (c, next) => {
  if (!runConfig.inspector.enabled) {
    return c.text("Inspector is not enabled", 503);
  }
  const userToken = c.req.header("Authorization")?.replace("Bearer ", "");
  if (!userToken) {
    return c.text("Unauthorized", 401);
  }
  const inspectorToken = runConfig.inspector.token?.();
  if (!inspectorToken) {
    return c.text("Unauthorized", 401);
  }
  const isValid = compareSecrets(userToken, inspectorToken);
  if (!isValid) {
    return c.text("Unauthorized", 401);
  }
  await next();
});
function getInspectorUrl(runConfig) {
  if (!runConfig?.inspector?.enabled) {
    return "disabled";
  }
  const accessToken = runConfig?.inspector?.token?.();
  if (!accessToken) {
    inspectorLogger().warn(
      "Inspector Token is not set, but Inspector is enabled. Please set it in the run configuration `inspector.token` or via `RIVETKIT_INSPECTOR_TOKEN` environment variable. Inspector will not be accessible."
    );
    return "disabled";
  }
  const url = new URL("https://studio.rivet.gg");
  url.searchParams.set("t", accessToken);
  if (runConfig?.inspector?.defaultEndpoint) {
    url.searchParams.set("u", runConfig.inspector.defaultEndpoint);
  }
  return url.href;
}

// src/actor/router.ts
var PATH_CONNECT_WEBSOCKET = "/connect/websocket";
var PATH_RAW_WEBSOCKET_PREFIX = "/raw/websocket/";
function createActorRouter(runConfig, actorDriver) {
  const router = new Hono2({ strict: false });
  router.use("*", loggerMiddleware(logger()));
  router.get("/", (c) => {
    return c.text(
      "This is an RivetKit actor.\n\nLearn more at https://rivetkit.org"
    );
  });
  router.get("/health", (c) => {
    return c.text("ok");
  });
  router.get(PATH_CONNECT_WEBSOCKET, async (c) => {
    const upgradeWebSocket = runConfig.getUpgradeWebSocket?.();
    if (upgradeWebSocket) {
      return upgradeWebSocket(async (c2) => {
        const encodingRaw = c2.req.header(HEADER_ENCODING);
        const connParamsRaw = c2.req.header(HEADER_CONN_PARAMS);
        const authDataRaw = c2.req.header(HEADER_AUTH_DATA);
        const encoding = EncodingSchema.parse(encodingRaw);
        const connParams = connParamsRaw ? JSON.parse(connParamsRaw) : void 0;
        const authData = authDataRaw ? JSON.parse(authDataRaw) : void 0;
        return await handleWebSocketConnect(
          c2.req.raw,
          runConfig,
          actorDriver,
          c2.env.actorId,
          encoding,
          connParams,
          authData
        );
      })(c, noopNext());
    } else {
      return c.text(
        "WebSockets are not enabled for this driver. Use SSE instead.",
        400
      );
    }
  });
  router.get("/connect/sse", async (c) => {
    const authDataRaw = c.req.header(HEADER_AUTH_DATA);
    let authData;
    if (authDataRaw) {
      authData = JSON.parse(authDataRaw);
    }
    return handleSseConnect(c, runConfig, actorDriver, c.env.actorId, authData);
  });
  router.post("/action/:action", async (c) => {
    const actionName = c.req.param("action");
    const authDataRaw = c.req.header(HEADER_AUTH_DATA);
    let authData;
    if (authDataRaw) {
      authData = JSON.parse(authDataRaw);
    }
    return handleAction(
      c,
      runConfig,
      actorDriver,
      actionName,
      c.env.actorId,
      authData
    );
  });
  router.post("/connections/message", async (c) => {
    const connId = c.req.header(HEADER_CONN_ID);
    const connToken = c.req.header(HEADER_CONN_TOKEN);
    if (!connId || !connToken) {
      throw new Error("Missing required parameters");
    }
    return handleConnectionMessage(
      c,
      runConfig,
      actorDriver,
      connId,
      connToken,
      c.env.actorId
    );
  });
  router.all("/raw/http/*", async (c) => {
    const authDataRaw = c.req.header(HEADER_AUTH_DATA);
    let authData;
    if (authDataRaw) {
      authData = JSON.parse(authDataRaw);
    }
    const actor2 = await actorDriver.loadActor(c.env.actorId);
    const url = new URL(c.req.url);
    const originalPath = url.pathname.replace(/^\/raw\/http/, "") || "/";
    const correctedUrl = new URL(originalPath + url.search, url.origin);
    const correctedRequest = new Request(correctedUrl, {
      method: c.req.method,
      headers: c.req.raw.headers,
      body: c.req.raw.body
    });
    logger().debug("rewriting http url", {
      from: c.req.url,
      to: correctedRequest.url
    });
    const response = await actor2.handleFetch(correctedRequest, {
      auth: authData
    });
    if (!response) {
      throw new InternalError("handleFetch returned void unexpectedly");
    }
    return response;
  });
  router.get(`${PATH_RAW_WEBSOCKET_PREFIX}*`, async (c) => {
    const upgradeWebSocket = runConfig.getUpgradeWebSocket?.();
    if (upgradeWebSocket) {
      return upgradeWebSocket(async (c2) => {
        const encodingRaw = c2.req.header(HEADER_ENCODING);
        const connParamsRaw = c2.req.header(HEADER_CONN_PARAMS);
        const authDataRaw = c2.req.header(HEADER_AUTH_DATA);
        const encoding = EncodingSchema.parse(encodingRaw);
        const connParams = connParamsRaw ? JSON.parse(connParamsRaw) : void 0;
        const authData = authDataRaw ? JSON.parse(authDataRaw) : void 0;
        const url = new URL(c2.req.url);
        const pathWithQuery = c2.req.path + url.search;
        logger().debug("actor router raw websocket", {
          path: c2.req.path,
          url: c2.req.url,
          search: url.search,
          pathWithQuery
        });
        return await handleRawWebSocketHandler(
          c2.req.raw,
          pathWithQuery,
          actorDriver,
          c2.env.actorId,
          authData
        );
      })(c, noopNext());
    } else {
      return c.text(
        "WebSockets are not enabled for this driver. Use SSE instead.",
        400
      );
    }
  });
  if (runConfig.inspector.enabled) {
    router.route(
      "/inspect",
      new Hono2().use(secureInspector(runConfig), async (c, next) => {
        const inspector = (await actorDriver.loadActor(c.env.actorId)).inspector;
        invariant3(inspector, "inspector not supported on this platform");
        c.set("inspector", inspector);
        await next();
      }).route("/", createActorInspectorRouter())
    );
  }
  router.notFound(handleRouteNotFound);
  router.onError(
    handleRouteError.bind(void 0, {
      // All headers to this endpoint are considered secure, so we can enable the expose internal error header for requests from the internal client
      enableExposeInternalError: true
    })
  );
  return router;
}

// src/actor/mod.ts
function actor(input) {
  const config4 = ActorConfigSchema.parse(input);
  return new ActorDefinition(config4);
}

// src/client/actor-conn.ts
import * as cbor8 from "cbor-x";
import invariant5 from "invariant";
import pRetry from "p-retry";

// src/client/errors.ts
var ActorClientError = class extends Error {
};
var InternalError2 = class extends ActorClientError {
};
var ActorError2 = class extends ActorClientError {
  constructor(code, message, metadata) {
    super(message);
    this.code = code;
    this.metadata = metadata;
  }
  __type = "ActorError";
};
var HttpRequestError = class extends ActorClientError {
  constructor(message, opts) {
    super(`HTTP request error: ${message}`, { cause: opts?.cause });
  }
};
var ActorConnDisposed = class extends ActorClientError {
  constructor() {
    super("Attempting to interact with a disposed actor connection.");
  }
};

// src/client/log.ts
var LOGGER_NAME2 = "actor-client";
function logger4() {
  return getLogger(LOGGER_NAME2);
}

// src/client/utils.ts
import * as cbor7 from "cbor-x";
import invariant4 from "invariant";
function messageLength(message) {
  if (message instanceof Blob) {
    return message.size;
  }
  if (message instanceof ArrayBuffer) {
    return message.byteLength;
  }
  if (message instanceof Uint8Array) {
    return message.byteLength;
  }
  if (typeof message === "string") {
    return message.length;
  }
  assertUnreachable(message);
}
async function sendHttpRequest(opts) {
  logger4().debug("sending http request", {
    url: opts.url,
    encoding: opts.encoding
  });
  let contentType;
  let bodyData;
  if (opts.method === "POST" || opts.method === "PUT") {
    invariant4(opts.body !== void 0, "missing body");
    contentType = contentTypeForEncoding(opts.encoding);
    bodyData = serializeWithEncoding(
      opts.encoding,
      opts.body,
      opts.requestVersionedDataHandler
    );
  }
  let response;
  try {
    response = await (opts.customFetch ?? fetch)(
      new Request(opts.url, {
        method: opts.method,
        headers: {
          ...opts.headers,
          ...contentType ? {
            "Content-Type": contentType
          } : {},
          "User-Agent": httpUserAgent()
        },
        body: bodyData,
        credentials: "include",
        signal: opts.signal
      })
    );
  } catch (error) {
    throw new HttpRequestError(`Request failed: ${error}`, {
      cause: error
    });
  }
  if (!response.ok) {
    const bufferResponse = await response.arrayBuffer();
    let responseData;
    try {
      responseData = deserializeWithEncoding(
        opts.encoding,
        new Uint8Array(bufferResponse),
        HTTP_RESPONSE_ERROR_VERSIONED
      );
    } catch (error) {
      const textResponse = new TextDecoder("utf-8", { fatal: false }).decode(
        bufferResponse
      );
      throw new HttpRequestError(
        `${response.statusText} (${response.status}):
${textResponse}`
      );
    }
    throw new ActorError2(
      responseData.code,
      responseData.message,
      responseData.metadata ? cbor7.decode(new Uint8Array(responseData.metadata)) : void 0
    );
  }
  if (opts.skipParseResponse) {
    return void 0;
  }
  try {
    const buffer = new Uint8Array(await response.arrayBuffer());
    return deserializeWithEncoding(
      opts.encoding,
      buffer,
      opts.responseVersionedDataHandler
    );
  } catch (error) {
    throw new HttpRequestError(`Failed to parse response: ${error}`, {
      cause: error
    });
  }
}

// src/client/actor-conn.ts
var CONNECT_SYMBOL = Symbol("connect");
var ActorConnRaw = class {
  #disposed = false;
  /* Will be aborted on dispose. */
  #abortController = new AbortController();
  /** If attempting to connect. Helpful for knowing if in a retry loop when reconnecting. */
  #connecting = false;
  // These will only be set on SSE driver
  #actorId;
  #connectionId;
  #connectionToken;
  #transport;
  #messageQueue = [];
  #actionsInFlight = /* @__PURE__ */ new Map();
  // biome-ignore lint/suspicious/noExplicitAny: Unknown subscription type
  #eventSubscriptions = /* @__PURE__ */ new Map();
  #errorHandlers = /* @__PURE__ */ new Set();
  #actionIdCounter = 0;
  /**
   * Interval that keeps the NodeJS process alive if this is the only thing running.
   *
   * See ttps://github.com/nodejs/node/issues/22088
   */
  #keepNodeAliveInterval;
  /** Promise used to indicate the socket has connected successfully. This will be rejected if the connection fails. */
  #onOpenPromise;
  #client;
  #driver;
  #params;
  #encodingKind;
  #actorQuery;
  // TODO: ws message queue
  /**
   * Do not call this directly.
   *
   * Creates an instance of ActorConnRaw.
   *
   * @protected
   */
  constructor(client, driver, params, encodingKind, actorQuery) {
    this.#client = client;
    this.#driver = driver;
    this.#params = params;
    this.#encodingKind = encodingKind;
    this.#actorQuery = actorQuery;
    this.#keepNodeAliveInterval = setInterval(() => 6e4);
  }
  /**
   * Call a raw action connection. See {@link ActorConn} for type-safe action calls.
   *
   * @see {@link ActorConn}
   * @template Args - The type of arguments to pass to the action function.
   * @template Response - The type of the response returned by the action function.
   * @param {string} name - The name of the action function to call.
   * @param {...Args} args - The arguments to pass to the action function.
   * @returns {Promise<Response>} - A promise that resolves to the response of the action function.
   */
  async action(opts) {
    logger4().debug("action", { name: opts.name, args: opts.args });
    const actionId = this.#actionIdCounter;
    this.#actionIdCounter += 1;
    const { promise, resolve, reject } = Promise.withResolvers();
    this.#actionsInFlight.set(actionId, { name: opts.name, resolve, reject });
    this.#sendMessage({
      body: {
        tag: "ActionRequest",
        val: {
          id: BigInt(actionId),
          name: opts.name,
          args: bufferToArrayBuffer(cbor8.encode(opts.args))
        }
      }
    });
    const { id: responseId, output } = await promise;
    if (responseId !== BigInt(actionId))
      throw new Error(
        `Request ID ${actionId} does not match response ID ${responseId}`
      );
    return cbor8.decode(new Uint8Array(output));
  }
  /**
  	 * Do not call this directly.
  enc
  	 * Establishes a connection to the server using the specified endpoint & encoding & driver.
  	 *
  	 * @protected
  	 */
  [CONNECT_SYMBOL]() {
    this.#connectWithRetry();
  }
  async #connectWithRetry() {
    this.#connecting = true;
    try {
      await pRetry(this.#connectAndWait.bind(this), {
        forever: true,
        minTimeout: 250,
        maxTimeout: 3e4,
        onFailedAttempt: (error) => {
          logger4().warn("failed to reconnect", {
            attempt: error.attemptNumber,
            error: stringifyError(error)
          });
        },
        // Cancel retry if aborted
        signal: this.#abortController.signal
      });
    } catch (err) {
      if (err.name === "AbortError") {
        logger4().info("connection retry aborted");
        return;
      } else {
        throw err;
      }
    }
    this.#connecting = false;
  }
  async #connectAndWait() {
    try {
      if (this.#onOpenPromise)
        throw new Error("#onOpenPromise already defined");
      this.#onOpenPromise = Promise.withResolvers();
      if (this.#client[TRANSPORT_SYMBOL] === "websocket") {
        await this.#connectWebSocket();
      } else if (this.#client[TRANSPORT_SYMBOL] === "sse") {
        await this.#connectSse();
      } else {
        assertUnreachable(this.#client[TRANSPORT_SYMBOL]);
      }
      await this.#onOpenPromise.promise;
    } finally {
      this.#onOpenPromise = void 0;
    }
  }
  async #connectWebSocket({ signal } = {}) {
    const ws = await this.#driver.connectWebSocket(
      void 0,
      this.#actorQuery,
      this.#encodingKind,
      this.#params,
      signal ? { signal } : void 0
    );
    this.#transport = { websocket: ws };
    ws.addEventListener("open", () => {
      logger4().debug("websocket open");
    });
    ws.addEventListener("message", async (ev) => {
      this.#handleOnMessage(ev.data);
    });
    ws.addEventListener("close", (ev) => {
      this.#handleOnClose(ev);
    });
    ws.addEventListener("error", (_ev) => {
      this.#handleOnError();
    });
  }
  async #connectSse({ signal } = {}) {
    const eventSource = await this.#driver.connectSse(
      void 0,
      this.#actorQuery,
      this.#encodingKind,
      this.#params,
      signal ? { signal } : void 0
    );
    this.#transport = { sse: eventSource };
    eventSource.onopen = () => {
      logger4().debug("eventsource open");
    };
    eventSource.onmessage = (ev) => {
      this.#handleOnMessage(ev.data);
    };
    eventSource.onerror = (_ev) => {
      if (eventSource.readyState === eventSource.CLOSED) {
        this.#handleOnClose(new Event("error"));
      } else {
        this.#handleOnError();
      }
    };
  }
  /** Called by the onopen event from drivers. */
  #handleOnOpen() {
    logger4().debug("socket open", {
      messageQueueLength: this.#messageQueue.length
    });
    if (this.#onOpenPromise) {
      this.#onOpenPromise.resolve(void 0);
    } else {
      logger4().warn("#onOpenPromise is undefined");
    }
    for (const eventName of this.#eventSubscriptions.keys()) {
      this.#sendSubscription(eventName, true);
    }
    const queue = this.#messageQueue;
    this.#messageQueue = [];
    for (const msg of queue) {
      this.#sendMessage(msg);
    }
  }
  /** Called by the onmessage event from drivers. */
  async #handleOnMessage(data) {
    logger4().trace("received message", {
      dataType: typeof data,
      isBlob: data instanceof Blob,
      isArrayBuffer: data instanceof ArrayBuffer
    });
    const response = await this.#parseMessage(data);
    logger4().trace(
      "parsed message",
      getEnvUniversal("_RIVETKIT_LOG_MESSAGE") ? {
        message: jsonStringifyCompat(response).substring(0, 100) + "..."
      } : {}
    );
    if (response.body.tag === "Init") {
      this.#actorId = response.body.val.actorId;
      this.#connectionId = response.body.val.connectionId;
      this.#connectionToken = response.body.val.connectionToken;
      logger4().trace("received init message", {
        actorId: this.#actorId,
        connectionId: this.#connectionId
      });
      this.#handleOnOpen();
    } else if (response.body.tag === "Error") {
      const { code, message, metadata, actionId } = response.body.val;
      if (actionId) {
        const inFlight = this.#takeActionInFlight(Number(actionId));
        logger4().warn("action error", {
          actionId,
          actionName: inFlight?.name,
          code,
          message,
          metadata
        });
        inFlight.reject(new ActorError2(code, message, metadata));
      } else {
        logger4().warn("connection error", {
          code,
          message,
          metadata
        });
        const actorError = new ActorError2(code, message, metadata);
        if (this.#onOpenPromise) {
          this.#onOpenPromise.reject(actorError);
        }
        for (const [id, inFlight] of this.#actionsInFlight.entries()) {
          inFlight.reject(actorError);
          this.#actionsInFlight.delete(id);
        }
        this.#dispatchActorError(actorError);
      }
    } else if (response.body.tag === "ActionResponse") {
      const { id: actionId } = response.body.val;
      logger4().trace("received action response", {
        actionId
      });
      const inFlight = this.#takeActionInFlight(Number(actionId));
      logger4().trace("resolving action promise", {
        actionId,
        actionName: inFlight?.name
      });
      inFlight.resolve(response.body.val);
    } else if (response.body.tag === "Event") {
      logger4().trace("received event", { name: response.body.val.name });
      this.#dispatchEvent(response.body.val);
    } else {
      assertUnreachable(response.body);
    }
  }
  /** Called by the onclose event from drivers. */
  #handleOnClose(event) {
    if (this.#onOpenPromise) {
      this.#onOpenPromise.reject(new Error("Closed"));
    }
    const closeEvent = event;
    if (closeEvent.wasClean) {
      logger4().info("socket closed", {
        code: closeEvent.code,
        reason: closeEvent.reason,
        wasClean: closeEvent.wasClean
      });
    } else {
      logger4().warn("socket closed", {
        code: closeEvent.code,
        reason: closeEvent.reason,
        wasClean: closeEvent.wasClean
      });
    }
    this.#transport = void 0;
    if (!this.#disposed && !this.#connecting) {
      this.#connectWithRetry();
    }
  }
  /** Called by the onerror event from drivers. */
  #handleOnError() {
    if (this.#disposed) return;
    logger4().warn("socket error");
  }
  #takeActionInFlight(id) {
    const inFlight = this.#actionsInFlight.get(id);
    if (!inFlight) {
      throw new InternalError2(`No in flight response for ${id}`);
    }
    this.#actionsInFlight.delete(id);
    return inFlight;
  }
  #dispatchEvent(event) {
    const { name, args: argsRaw } = event;
    const args = cbor8.decode(new Uint8Array(argsRaw));
    const listeners = this.#eventSubscriptions.get(name);
    if (!listeners) return;
    for (const listener of [...listeners]) {
      listener.callback(...args);
      if (listener.once) {
        listeners.delete(listener);
      }
    }
    if (listeners.size === 0) {
      this.#eventSubscriptions.delete(name);
    }
  }
  #dispatchActorError(error) {
    for (const handler of [...this.#errorHandlers]) {
      try {
        handler(error);
      } catch (err) {
        logger4().error("Error in connection error handler", {
          error: stringifyError(err)
        });
      }
    }
  }
  #addEventSubscription(eventName, callback, once) {
    const listener = {
      callback,
      once
    };
    let subscriptionSet = this.#eventSubscriptions.get(eventName);
    if (subscriptionSet === void 0) {
      subscriptionSet = /* @__PURE__ */ new Set();
      this.#eventSubscriptions.set(eventName, subscriptionSet);
      this.#sendSubscription(eventName, true);
    }
    subscriptionSet.add(listener);
    return () => {
      const listeners = this.#eventSubscriptions.get(eventName);
      if (listeners) {
        listeners.delete(listener);
        if (listeners.size === 0) {
          this.#eventSubscriptions.delete(eventName);
          this.#sendSubscription(eventName, false);
        }
      }
    };
  }
  /**
   * Subscribes to an event that will happen repeatedly.
   *
   * @template Args - The type of arguments the event callback will receive.
   * @param {string} eventName - The name of the event to subscribe to.
   * @param {(...args: Args) => void} callback - The callback function to execute when the event is triggered.
   * @returns {EventUnsubscribe} - A function to unsubscribe from the event.
   * @see {@link https://rivet.gg/docs/events|Events Documentation}
   */
  on(eventName, callback) {
    return this.#addEventSubscription(eventName, callback, false);
  }
  /**
   * Subscribes to an event that will be triggered only once.
   *
   * @template Args - The type of arguments the event callback will receive.
   * @param {string} eventName - The name of the event to subscribe to.
   * @param {(...args: Args) => void} callback - The callback function to execute when the event is triggered.
   * @returns {EventUnsubscribe} - A function to unsubscribe from the event.
   * @see {@link https://rivet.gg/docs/events|Events Documentation}
   */
  once(eventName, callback) {
    return this.#addEventSubscription(eventName, callback, true);
  }
  /**
   * Subscribes to connection errors.
   *
   * @param {ActorErrorCallback} callback - The callback function to execute when a connection error occurs.
   * @returns {() => void} - A function to unsubscribe from the error handler.
   */
  onError(callback) {
    this.#errorHandlers.add(callback);
    return () => {
      this.#errorHandlers.delete(callback);
    };
  }
  #sendMessage(message, opts) {
    if (this.#disposed) {
      throw new ActorConnDisposed();
    }
    let queueMessage = false;
    if (!this.#transport) {
      queueMessage = true;
    } else if ("websocket" in this.#transport) {
      if (this.#transport.websocket.readyState === 1) {
        try {
          const messageSerialized = serializeWithEncoding(
            this.#encodingKind,
            message,
            TO_SERVER_VERSIONED
          );
          this.#transport.websocket.send(messageSerialized);
          logger4().trace("sent websocket message", {
            len: messageLength(messageSerialized)
          });
        } catch (error) {
          logger4().warn("failed to send message, added to queue", {
            error
          });
          queueMessage = true;
        }
      } else {
        queueMessage = true;
      }
    } else if ("sse" in this.#transport) {
      if (this.#transport.sse.readyState === 1) {
        this.#sendHttpMessage(message, opts);
      } else {
        queueMessage = true;
      }
    } else {
      assertUnreachable(this.#transport);
    }
    if (!opts?.ephemeral && queueMessage) {
      this.#messageQueue.push(message);
      logger4().debug("queued connection message");
    }
  }
  async #sendHttpMessage(message, opts) {
    try {
      if (!this.#actorId || !this.#connectionId || !this.#connectionToken)
        throw new InternalError2("Missing connection ID or token.");
      logger4().trace(
        "sent http message",
        getEnvUniversal("_RIVETKIT_LOG_MESSAGE") ? {
          message: jsonStringifyCompat(message).substring(0, 100) + "..."
        } : {}
      );
      await this.#driver.sendHttpMessage(
        void 0,
        this.#actorId,
        this.#encodingKind,
        this.#connectionId,
        this.#connectionToken,
        message,
        opts?.signal ? { signal: opts.signal } : void 0
      );
    } catch (error) {
      logger4().warn("failed to send message, added to queue", {
        error
      });
      if (!opts?.ephemeral) {
        this.#messageQueue.unshift(message);
      }
    }
  }
  async #parseMessage(data) {
    invariant5(this.#transport, "transport must be defined");
    if (encodingIsBinary(this.#encodingKind) && "sse" in this.#transport) {
      if (typeof data === "string") {
        const binaryString = atob(data);
        data = new Uint8Array(
          [...binaryString].map((char) => char.charCodeAt(0))
        );
      } else {
        throw new InternalError2(
          `Expected data to be a string for SSE, got ${data}.`
        );
      }
    }
    const buffer = await inputDataToBuffer(data);
    return deserializeWithEncoding(
      this.#encodingKind,
      buffer,
      TO_CLIENT_VERSIONED
    );
  }
  /**
   * Disconnects from the actor.
   *
   * @returns {Promise<void>} A promise that resolves when the socket is gracefully closed.
   */
  async dispose() {
    if (this.#disposed) {
      logger4().warn("connection already disconnected");
      return;
    }
    this.#disposed = true;
    logger4().debug("disposing actor conn");
    clearInterval(this.#keepNodeAliveInterval);
    this.#abortController.abort();
    this.#client[ACTOR_CONNS_SYMBOL].delete(this);
    if (!this.#transport) {
    } else if ("websocket" in this.#transport) {
      const ws = this.#transport.websocket;
      if (ws.readyState === 2 || ws.readyState === 3) {
        logger4().debug("ws already closed or closing");
      } else {
        const { promise, resolve } = Promise.withResolvers();
        ws.addEventListener("close", () => {
          logger4().debug("ws closed");
          resolve(void 0);
        });
        ws.close();
        await promise;
      }
    } else if ("sse" in this.#transport) {
      this.#transport.sse.close();
    } else {
      assertUnreachable(this.#transport);
    }
    this.#transport = void 0;
  }
  #sendSubscription(eventName, subscribe) {
    this.#sendMessage(
      {
        body: {
          tag: "SubscriptionRequest",
          val: {
            eventName,
            subscribe
          }
        }
      },
      { ephemeral: true }
    );
  }
};

// src/client/actor-handle.ts
import invariant6 from "invariant";

// src/client/raw-utils.ts
async function rawHttpFetch(driver, actorQuery, params, input, init) {
  let path3;
  let mergedInit = init || {};
  if (typeof input === "string") {
    path3 = input;
  } else if (input instanceof URL) {
    path3 = input.pathname + input.search;
  } else if (input instanceof Request) {
    const url = new URL(input.url);
    path3 = url.pathname + url.search;
    const requestHeaders = new Headers(input.headers);
    const initHeaders = new Headers(init?.headers || {});
    const mergedHeaders = new Headers(requestHeaders);
    for (const [key, value] of initHeaders) {
      mergedHeaders.set(key, value);
    }
    mergedInit = {
      method: input.method,
      body: input.body,
      mode: input.mode,
      credentials: input.credentials,
      redirect: input.redirect,
      referrer: input.referrer,
      referrerPolicy: input.referrerPolicy,
      integrity: input.integrity,
      keepalive: input.keepalive,
      signal: input.signal,
      ...mergedInit,
      // init overrides Request properties
      headers: mergedHeaders
      // headers must be set after spread to ensure proper merge
    };
    if (mergedInit.body) {
      mergedInit.duplex = "half";
    }
  } else {
    throw new TypeError("Invalid input type for fetch");
  }
  return await driver.rawHttpRequest(
    void 0,
    actorQuery,
    // Force JSON so it's readable by the user
    "json",
    params,
    path3,
    mergedInit,
    void 0
  );
}
async function rawWebSocket(driver, actorQuery, params, path3, protocols) {
  return await driver.rawWebSocket(
    void 0,
    actorQuery,
    // Force JSON so it's readable by the user
    "json",
    params,
    path3 || "",
    protocols,
    void 0
  );
}

// src/client/actor-handle.ts
var ActorHandleRaw = class {
  #client;
  #driver;
  #encodingKind;
  #actorQuery;
  #params;
  /**
   * Do not call this directly.
   *
   * Creates an instance of ActorHandleRaw.
   *
   * @protected
   */
  constructor(client, driver, params, encodingKind, actorQuery) {
    this.#client = client;
    this.#driver = driver;
    this.#encodingKind = encodingKind;
    this.#actorQuery = actorQuery;
    this.#params = params;
  }
  /**
   * Call a raw action. This method sends an HTTP request to invoke the named action.
   *
   * @see {@link ActorHandle}
   * @template Args - The type of arguments to pass to the action function.
   * @template Response - The type of the response returned by the action function.
   */
  async action(opts) {
    return await this.#driver.action(
      void 0,
      this.#actorQuery,
      this.#encodingKind,
      this.#params,
      opts.name,
      opts.args,
      { signal: opts.signal }
    );
  }
  /**
   * Establishes a persistent connection to the actor.
   *
   * @template AD The actor class that this connection is for.
   * @returns {ActorConn<AD>} A connection to the actor.
   */
  connect() {
    logger4().debug("establishing connection from handle", {
      query: this.#actorQuery
    });
    const conn = new ActorConnRaw(
      this.#client,
      this.#driver,
      this.#params,
      this.#encodingKind,
      this.#actorQuery
    );
    return this.#client[CREATE_ACTOR_CONN_PROXY](
      conn
    );
  }
  /**
   * Makes a raw HTTP request to the actor.
   *
   * @param input - The URL, path, or Request object
   * @param init - Standard fetch RequestInit options
   * @returns Promise<Response> - The raw HTTP response
   */
  async fetch(input, init) {
    return rawHttpFetch(
      this.#driver,
      this.#actorQuery,
      this.#params,
      input,
      init
    );
  }
  /**
   * Creates a raw WebSocket connection to the actor.
   *
   * @param path - The path for the WebSocket connection (e.g., "stream")
   * @param protocols - Optional WebSocket subprotocols
   * @returns WebSocket - A raw WebSocket connection
   */
  async websocket(path3, protocols) {
    return rawWebSocket(
      this.#driver,
      this.#actorQuery,
      this.#params,
      path3,
      protocols
    );
  }
  /**
   * Resolves the actor to get its unique actor ID
   *
   * @returns {Promise<string>} - A promise that resolves to the actor's ID
   */
  async resolve({ signal } = {}) {
    if ("getForKey" in this.#actorQuery || "getOrCreateForKey" in this.#actorQuery) {
      let name;
      if ("getForKey" in this.#actorQuery) {
        name = this.#actorQuery.getForKey.name;
      } else if ("getOrCreateForKey" in this.#actorQuery) {
        name = this.#actorQuery.getOrCreateForKey.name;
      } else {
        assertUnreachable2(this.#actorQuery);
      }
      const actorId = await this.#driver.resolveActorId(
        void 0,
        this.#actorQuery,
        this.#encodingKind,
        this.#params,
        signal ? { signal } : void 0
      );
      this.#actorQuery = { getForId: { actorId, name } };
      return actorId;
    } else if ("getForId" in this.#actorQuery) {
      return this.#actorQuery.getForId.actorId;
    } else if ("create" in this.#actorQuery) {
      invariant6(false, "actorQuery cannot be create");
    } else {
      assertUnreachable2(this.#actorQuery);
    }
  }
};

// src/client/client.ts
var ACTOR_CONNS_SYMBOL = Symbol("actorConns");
var CREATE_ACTOR_CONN_PROXY = Symbol("createActorConnProxy");
var TRANSPORT_SYMBOL = Symbol("transport");
var ClientRaw = class {
  #disposed = false;
  [ACTOR_CONNS_SYMBOL] = /* @__PURE__ */ new Set();
  #driver;
  #encodingKind;
  [TRANSPORT_SYMBOL];
  /**
   * Creates an instance of Client.
   *
   * @param {string} managerEndpoint - The manager endpoint. See {@link https://rivet.gg/docs/setup|Initial Setup} for instructions on getting the manager endpoint.
   * @param {ClientOptions} [opts] - Options for configuring the client.
   * @see {@link https://rivet.gg/docs/setup|Initial Setup}
   */
  constructor(driver, opts) {
    this.#driver = driver;
    this.#encodingKind = opts?.encoding ?? "bare";
    this[TRANSPORT_SYMBOL] = opts?.transport ?? "websocket";
  }
  /**
   * Gets a stateless handle to a actor by its ID.
   *
   * @template AD The actor class that this handle is for.
   * @param {string} name - The name of the actor.
   * @param {string} actorId - The ID of the actor.
   * @param {GetWithIdOptions} [opts] - Options for getting the actor.
   * @returns {ActorHandle<AD>} - A handle to the actor.
   */
  getForId(name, actorId, opts) {
    logger4().debug("get handle to actor with id", {
      name,
      actorId,
      params: opts?.params
    });
    const actorQuery = {
      getForId: {
        name,
        actorId
      }
    };
    const handle = this.#createHandle(opts?.params, actorQuery);
    return createActorProxy(handle);
  }
  /**
   * Gets a stateless handle to a actor by its key, but does not create the actor if it doesn't exist.
   *
   * @template AD The actor class that this handle is for.
   * @param {string} name - The name of the actor.
   * @param {string | string[]} [key=[]] - The key to identify the actor. Can be a single string or an array of strings.
   * @param {GetWithIdOptions} [opts] - Options for getting the actor.
   * @returns {ActorHandle<AD>} - A handle to the actor.
   */
  get(name, key, opts) {
    const keyArray = typeof key === "string" ? [key] : key || [];
    logger4().debug("get handle to actor", {
      name,
      key: keyArray,
      parameters: opts?.params
    });
    const actorQuery = {
      getForKey: {
        name,
        key: keyArray
      }
    };
    const handle = this.#createHandle(opts?.params, actorQuery);
    return createActorProxy(handle);
  }
  /**
   * Gets a stateless handle to a actor by its key, creating it if necessary.
   *
   * @template AD The actor class that this handle is for.
   * @param {string} name - The name of the actor.
   * @param {string | string[]} [key=[]] - The key to identify the actor. Can be a single string or an array of strings.
   * @param {GetOptions} [opts] - Options for getting the actor.
   * @returns {ActorHandle<AD>} - A handle to the actor.
   */
  getOrCreate(name, key, opts) {
    const keyArray = typeof key === "string" ? [key] : key || [];
    logger4().debug("get or create handle to actor", {
      name,
      key: keyArray,
      parameters: opts?.params,
      createInRegion: opts?.createInRegion
    });
    const actorQuery = {
      getOrCreateForKey: {
        name,
        key: keyArray,
        input: opts?.createWithInput,
        region: opts?.createInRegion
      }
    };
    const handle = this.#createHandle(opts?.params, actorQuery);
    return createActorProxy(handle);
  }
  /**
   * Creates a new actor with the provided key and returns a stateless handle to it.
   * Resolves the actor ID and returns a handle with getForId query.
   *
   * @template AD The actor class that this handle is for.
   * @param {string} name - The name of the actor.
   * @param {string | string[]} key - The key to identify the actor. Can be a single string or an array of strings.
   * @param {CreateOptions} [opts] - Options for creating the actor (excluding name and key).
   * @returns {Promise<ActorHandle<AD>>} - A promise that resolves to a handle to the actor.
   */
  async create(name, key, opts) {
    const keyArray = typeof key === "string" ? [key] : key || [];
    const createQuery = {
      create: {
        ...opts,
        // Do these last to override `opts`
        name,
        key: keyArray
      }
    };
    logger4().debug("create actor handle", {
      name,
      key: keyArray,
      parameters: opts?.params,
      create: createQuery.create
    });
    const actorId = await this.#driver.resolveActorId(
      void 0,
      createQuery,
      this.#encodingKind,
      opts?.params,
      opts?.signal ? { signal: opts.signal } : void 0
    );
    logger4().debug("created actor with ID", {
      name,
      key: keyArray,
      actorId
    });
    const getForIdQuery = {
      getForId: {
        name,
        actorId
      }
    };
    const handle = this.#createHandle(opts?.params, getForIdQuery);
    const proxy = createActorProxy(handle);
    return proxy;
  }
  #createHandle(params, actorQuery) {
    return new ActorHandleRaw(
      this,
      this.#driver,
      params,
      this.#encodingKind,
      actorQuery
    );
  }
  [CREATE_ACTOR_CONN_PROXY](conn) {
    this[ACTOR_CONNS_SYMBOL].add(conn);
    conn[CONNECT_SYMBOL]();
    return createActorProxy(conn);
  }
  /**
   * Disconnects from all actors.
   *
   * @returns {Promise<void>} A promise that resolves when all connections are closed.
   */
  async dispose() {
    if (this.#disposed) {
      logger4().warn("client already disconnected");
      return;
    }
    this.#disposed = true;
    logger4().debug("disposing client");
    const disposePromises = [];
    for (const conn of this[ACTOR_CONNS_SYMBOL].values()) {
      disposePromises.push(conn.dispose());
    }
    await Promise.all(disposePromises);
  }
};
function createClientWithDriver(driver, opts) {
  const client = new ClientRaw(driver, opts);
  return new Proxy(client, {
    get: (target, prop, receiver) => {
      if (typeof prop === "symbol" || prop in target) {
        const value = Reflect.get(target, prop, receiver);
        if (typeof value === "function") {
          return value.bind(target);
        }
        return value;
      }
      if (typeof prop === "string") {
        return {
          // Handle methods (stateless action)
          get: (key, opts2) => {
            return target.get(
              prop,
              key,
              opts2
            );
          },
          getOrCreate: (key, opts2) => {
            return target.getOrCreate(prop, key, opts2);
          },
          getForId: (actorId, opts2) => {
            return target.getForId(
              prop,
              actorId,
              opts2
            );
          },
          create: async (key, opts2 = {}) => {
            return await target.create(prop, key, opts2);
          }
        };
      }
      return void 0;
    }
  });
}
function createActorProxy(handle) {
  const methodCache = /* @__PURE__ */ new Map();
  return new Proxy(handle, {
    get(target, prop, receiver) {
      if (typeof prop === "symbol") {
        return Reflect.get(target, prop, receiver);
      }
      if (prop === "constructor" || prop in target) {
        const value = Reflect.get(target, prop, receiver);
        if (typeof value === "function") {
          return value.bind(target);
        }
        return value;
      }
      if (typeof prop === "string") {
        if (prop === "then") return void 0;
        let method = methodCache.get(prop);
        if (!method) {
          method = (...args) => target.action({ name: prop, args });
          methodCache.set(prop, method);
        }
        return method;
      }
    },
    // Support for 'in' operator
    has(target, prop) {
      if (typeof prop === "string") {
        return true;
      }
      return Reflect.has(target, prop);
    },
    // Support instanceof checks
    getPrototypeOf(target) {
      return Reflect.getPrototypeOf(target);
    },
    // Prevent property enumeration of non-existent action methods
    ownKeys(target) {
      return Reflect.ownKeys(target);
    },
    // Support proper property descriptors
    getOwnPropertyDescriptor(target, prop) {
      const targetDescriptor = Reflect.getOwnPropertyDescriptor(target, prop);
      if (targetDescriptor) {
        return targetDescriptor;
      }
      if (typeof prop === "string") {
        return {
          configurable: true,
          enumerable: false,
          writable: false,
          value: (...args) => target.action({ name: prop, args })
        };
      }
      return void 0;
    }
  });
}

// src/common/inline-websocket-adapter2.ts
import { WSContext } from "hono/ws";
var LOGGER_NAME3 = "fake-event-source2";
function logger5() {
  return getLogger(LOGGER_NAME3);
}
var InlineWebSocketAdapter2 = class {
  // WebSocket readyState values
  CONNECTING = 0;
  OPEN = 1;
  CLOSING = 2;
  CLOSED = 3;
  // Private properties
  #handler;
  #wsContext;
  #readyState = 0;
  // Start in CONNECTING state
  #queuedMessages = [];
  // Event buffering is needed since events can be fired
  // before JavaScript has a chance to add event listeners (e.g. within the same tick)
  #bufferedEvents = [];
  // Event listeners with buffering
  #eventListeners = /* @__PURE__ */ new Map();
  constructor(handler) {
    this.#handler = handler;
    this.#wsContext = new WSContext({
      raw: this,
      send: (data) => {
        logger5().debug("WSContext.send called");
        this.#handleMessage(data);
      },
      close: (code, reason) => {
        logger5().debug("WSContext.close called", { code, reason });
        this.#handleClose(code || 1e3, reason || "");
      },
      // Set readyState to 1 (OPEN) since handlers expect an open connection
      readyState: 1
    });
    this.#initialize();
  }
  get readyState() {
    return this.#readyState;
  }
  get binaryType() {
    return "arraybuffer";
  }
  set binaryType(value) {
  }
  get bufferedAmount() {
    return 0;
  }
  get extensions() {
    return "";
  }
  get protocol() {
    return "";
  }
  get url() {
    return "";
  }
  send(data) {
    logger5().debug("send called", { readyState: this.readyState });
    if (this.readyState !== this.OPEN) {
      const error = new Error("WebSocket is not open");
      logger5().warn("cannot send message, websocket not open", {
        readyState: this.readyState,
        dataType: typeof data,
        dataLength: typeof data === "string" ? data.length : "binary",
        error
      });
      this.#fireError(error);
      return;
    }
    this.#handler.onMessage({ data }, this.#wsContext);
  }
  /**
   * Closes the connection
   */
  close(code = 1e3, reason = "") {
    if (this.readyState === this.CLOSED || this.readyState === this.CLOSING) {
      return;
    }
    logger5().debug("closing fake websocket", { code, reason });
    this.#readyState = this.CLOSING;
    try {
      this.#handler.onClose({ code, reason, wasClean: true }, this.#wsContext);
    } catch (err) {
      logger5().error("error closing websocket", { error: err });
    } finally {
      this.#readyState = this.CLOSED;
      const closeEvent = {
        type: "close",
        wasClean: code === 1e3,
        code,
        reason,
        target: this,
        currentTarget: this
      };
      this.#fireClose(closeEvent);
    }
  }
  /**
   * Initialize the connection with the handler
   */
  async #initialize() {
    try {
      logger5().debug("fake websocket initializing");
      logger5().debug("calling handler.onOpen with WSContext");
      this.#handler.onOpen(void 0, this.#wsContext);
      this.#readyState = this.OPEN;
      logger5().debug("fake websocket initialized and now OPEN");
      this.#fireOpen();
      if (this.#queuedMessages.length > 0) {
        if (this.readyState !== this.OPEN) {
          logger5().warn("socket no longer open, dropping queued messages");
          return;
        }
        logger5().debug(
          `now processing ${this.#queuedMessages.length} queued messages`
        );
        const messagesToProcess = [...this.#queuedMessages];
        this.#queuedMessages = [];
        for (const message of messagesToProcess) {
          logger5().debug("processing queued message");
          this.#handleMessage(message);
        }
      }
    } catch (err) {
      logger5().error("error opening fake websocket", {
        error: err,
        errorMessage: err instanceof Error ? err.message : String(err),
        stack: err instanceof Error ? err.stack : void 0
      });
      this.#fireError(err);
      this.close(1011, "Internal error during initialization");
    }
  }
  /**
   * Handle messages received from the server via the WSContext
   */
  #handleMessage(data) {
    if (this.readyState !== this.OPEN) {
      logger5().debug("message received before socket is OPEN, queuing", {
        readyState: this.readyState,
        dataType: typeof data,
        dataLength: typeof data === "string" ? data.length : data instanceof ArrayBuffer ? data.byteLength : data instanceof Uint8Array ? data.byteLength : "unknown"
      });
      this.#queuedMessages.push(data);
      return;
    }
    logger5().debug("fake websocket received message from server", {
      dataType: typeof data,
      dataLength: typeof data === "string" ? data.length : data instanceof ArrayBuffer ? data.byteLength : data instanceof Uint8Array ? data.byteLength : "unknown"
    });
    const event = {
      type: "message",
      data,
      target: this,
      currentTarget: this
    };
    this.#dispatchEvent("message", event);
  }
  #handleClose(code, reason) {
    if (this.readyState === this.CLOSED) return;
    this.#readyState = this.CLOSED;
    const event = {
      type: "close",
      code,
      reason,
      wasClean: code === 1e3,
      target: this,
      currentTarget: this
    };
    this.#dispatchEvent("close", event);
  }
  addEventListener(type, listener) {
    if (!this.#eventListeners.has(type)) {
      this.#eventListeners.set(type, []);
    }
    this.#eventListeners.get(type).push(listener);
    this.#flushBufferedEvents(type);
  }
  removeEventListener(type, listener) {
    const listeners = this.#eventListeners.get(type);
    if (listeners) {
      const index = listeners.indexOf(listener);
      if (index !== -1) {
        listeners.splice(index, 1);
      }
    }
  }
  #dispatchEvent(type, event) {
    const listeners = this.#eventListeners.get(type);
    if (listeners && listeners.length > 0) {
      logger5().debug(
        `dispatching ${type} event to ${listeners.length} listeners`
      );
      for (const listener of listeners) {
        try {
          listener(event);
        } catch (err) {
          logger5().error(`error in ${type} event listener`, { error: err });
        }
      }
    } else {
      logger5().debug(`no ${type} listeners registered, buffering event`);
      this.#bufferedEvents.push({ type, event });
    }
    switch (type) {
      case "open":
        if (this.#onopen) {
          try {
            this.#onopen(event);
          } catch (error) {
            logger5().error("error in onopen handler", { error });
          }
        }
        break;
      case "close":
        if (this.#onclose) {
          try {
            this.#onclose(event);
          } catch (error) {
            logger5().error("error in onclose handler", { error });
          }
        }
        break;
      case "error":
        if (this.#onerror) {
          try {
            this.#onerror(event);
          } catch (error) {
            logger5().error("error in onerror handler", { error });
          }
        }
        break;
      case "message":
        if (this.#onmessage) {
          try {
            this.#onmessage(event);
          } catch (error) {
            logger5().error("error in onmessage handler", { error });
          }
        }
        break;
    }
  }
  dispatchEvent(event) {
    this.#dispatchEvent(event.type, event);
    return true;
  }
  #flushBufferedEvents(type) {
    const eventsToFlush = this.#bufferedEvents.filter(
      (buffered) => buffered.type === type
    );
    this.#bufferedEvents = this.#bufferedEvents.filter(
      (buffered) => buffered.type !== type
    );
    for (const { event } of eventsToFlush) {
      this.#dispatchEvent(type, event);
    }
  }
  #fireOpen() {
    try {
      const event = {
        type: "open",
        target: this,
        currentTarget: this
      };
      this.#dispatchEvent("open", event);
    } catch (err) {
      logger5().error("error in open event", { error: err });
    }
  }
  #fireClose(event) {
    try {
      this.#dispatchEvent("close", event);
    } catch (err) {
      logger5().error("error in close event", { error: err });
    }
  }
  #fireError(error) {
    try {
      const event = {
        type: "error",
        target: this,
        currentTarget: this,
        error,
        message: error instanceof Error ? error.message : String(error)
      };
      this.#dispatchEvent("error", event);
    } catch (err) {
      logger5().error("error in error event", { error: err });
    }
    logger5().error("websocket error", { error });
  }
  // Event handler properties with getters/setters
  #onopen = null;
  #onclose = null;
  #onerror = null;
  #onmessage = null;
  get onopen() {
    return this.#onopen;
  }
  set onopen(handler) {
    this.#onopen = handler;
  }
  get onclose() {
    return this.#onclose;
  }
  set onclose(handler) {
    this.#onclose = handler;
  }
  get onerror() {
    return this.#onerror;
  }
  set onerror(handler) {
    this.#onerror = handler;
  }
  get onmessage() {
    return this.#onmessage;
  }
  set onmessage(handler) {
    this.#onmessage = handler;
  }
};

// src/drivers/engine/actor-driver.ts
import { Runner } from "@rivetkit/engine-runner";
import * as cbor10 from "cbor-x";
import { WSContext as WSContext2 } from "hono/ws";
import invariant7 from "invariant";

// src/registry/run-config.ts
import { z as z8 } from "zod";

// src/inspector/config.ts
import { z as z7 } from "zod";
var defaultTokenFn = () => {
  const envToken = getEnvUniversal("RIVETKIT_INSPECTOR_TOKEN");
  if (envToken) {
    return envToken;
  }
  return "";
};
var defaultEnabled = () => {
  return getEnvUniversal("NODE_ENV") !== "production" || !getEnvUniversal("RIVETKIT_INSPECTOR_DISABLE");
};
var defaultInspectorOrigins = [
  "http://localhost:43708",
  "https://studio.rivet.gg"
];
var defaultCors = {
  origin: (origin) => {
    if (defaultInspectorOrigins.includes(origin) || origin.startsWith("https://") && origin.endsWith("rivet-gg.vercel.app")) {
      return origin;
    } else {
      return null;
    }
  },
  allowMethods: ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"],
  allowHeaders: [
    "Content-Type",
    "Authorization",
    HEADER_ACTOR_QUERY,
    "last-event-id"
  ],
  maxAge: 3600,
  credentials: true
};
var InspectorConfigSchema = z7.object({
  enabled: z7.boolean().optional().default(defaultEnabled),
  /** CORS configuration for the router. Uses Hono's CORS middleware options. */
  cors: z7.custom().optional().default(() => defaultCors),
  /**
   * Token used to access the Inspector.
   */
  token: z7.function().returns(z7.string()).optional().default(() => defaultTokenFn),
  /**
   * Default RivetKit server endpoint for Rivet Inspector to connect to. This should be the same endpoint as what you use for your Rivet client to connect to RivetKit.
   *
   * This is a convenience property just for printing out the inspector URL.
   */
  defaultEndpoint: z7.string().optional()
}).optional().default(() => ({
  enabled: defaultEnabled(),
  token: defaultTokenFn,
  cors: defaultCors
}));

// src/registry/run-config.ts
var DriverConfigSchema = z8.object({
  /** Machine-readable name to identify this driver by. */
  name: z8.string(),
  manager: z8.custom(),
  actor: z8.custom()
});
var RunConfigSchema = z8.object({
  driver: DriverConfigSchema.optional(),
  /** Endpoint to connect to the Rivet engine. Can be configured via RIVET_ENGINE env var. */
  engine: z8.string().optional(),
  // This is a function to allow for lazy configuration of upgradeWebSocket on the
  // fly. This is required since the dependencies that profie upgradeWebSocket
  // (specifically Node.js) can sometimes only be specified after the router is
  // created or must be imported async using `await import(...)`
  getUpgradeWebSocket: z8.custom().optional(),
  role: z8.enum(["all", "server", "runner"]).optional().default("all"),
  /** CORS configuration for the router. Uses Hono's CORS middleware options. */
  cors: z8.custom().optional(),
  maxIncomingMessageSize: z8.number().optional().default(65536),
  inspector: InspectorConfigSchema,
  /**
   * Base path for the router. This is used to prefix all routes.
   * For example, if the base path is `/api`, then the route `/actors` will be
   * available at `/api/actors`.
   */
  basePath: z8.string().optional().default("/")
}).default({});

// src/driver-helpers/utils.ts
import * as cbor9 from "cbor-x";
function serializeEmptyPersistData(input) {
  const persistData = {
    input: input !== void 0 ? bufferToArrayBuffer(cbor9.encode(input)) : null,
    hasInitialized: false,
    state: bufferToArrayBuffer(cbor9.encode(void 0)),
    connections: [],
    scheduledEvents: []
  };
  return PERSISTED_ACTOR_VERSIONED.serializeWithEmbeddedVersion(persistData);
}

// src/drivers/engine/keys.ts
var EMPTY_KEY = "/";
var KEY_SEPARATOR = "/";
function serializeActorKey(key) {
  if (key.length === 0) {
    return EMPTY_KEY;
  }
  const escapedParts = key.map((part) => {
    if (part === "") {
      return "\\0";
    }
    let escaped = part.replace(/\\/g, "\\\\");
    escaped = escaped.replace(/\//g, `\\${KEY_SEPARATOR}`);
    return escaped;
  });
  return escapedParts.join(KEY_SEPARATOR);
}
function deserializeActorKey(keyString) {
  if (keyString === void 0 || keyString === null || keyString === EMPTY_KEY) {
    return [];
  }
  const parts = [];
  let currentPart = "";
  let escaping = false;
  let isEmptyStringMarker = false;
  for (let i = 0; i < keyString.length; i++) {
    const char = keyString[i];
    if (escaping) {
      if (char === "0") {
        isEmptyStringMarker = true;
      } else {
        currentPart += char;
      }
      escaping = false;
    } else if (char === "\\") {
      escaping = true;
    } else if (char === KEY_SEPARATOR) {
      if (isEmptyStringMarker) {
        parts.push("");
        isEmptyStringMarker = false;
      } else {
        parts.push(currentPart);
      }
      currentPart = "";
    } else {
      currentPart += char;
    }
  }
  if (escaping) {
    parts.push(currentPart + "\\");
  } else if (isEmptyStringMarker) {
    parts.push("");
  } else if (currentPart !== "" || parts.length > 0) {
    parts.push(currentPart);
  }
  return parts;
}

// src/drivers/engine/kv.ts
var KEYS = {
  PERSIST_DATA: Uint8Array.from([1, 1])
};

// src/drivers/engine/log.ts
var LOGGER_NAME4 = "driver-engine";
function logger6() {
  return getLogger(LOGGER_NAME4);
}

// src/drivers/engine/actor-driver.ts
var EngineActorDriver = class {
  #registryConfig;
  #runConfig;
  #managerDriver;
  #inlineClient;
  #config;
  #runner;
  #actors = /* @__PURE__ */ new Map();
  #actorRouter;
  #version = 1;
  // Version for the runner protocol
  constructor(registryConfig, runConfig, managerDriver, inlineClient, config4) {
    this.#registryConfig = registryConfig;
    this.#runConfig = runConfig;
    this.#managerDriver = managerDriver;
    this.#inlineClient = inlineClient;
    this.#config = config4;
    this.#actorRouter = createActorRouter(runConfig, this);
    let hasDisconnected = false;
    const runnerConfig = {
      version: this.#version,
      endpoint: config4.endpoint,
      pegboardEndpoint: config4.pegboardEndpoint,
      namespace: config4.namespace,
      totalSlots: config4.totalSlots,
      runnerName: config4.runnerName,
      runnerKey: config4.runnerKey,
      metadata: {
        inspectorToken: this.#runConfig.inspector.token()
      },
      prepopulateActorNames: Object.fromEntries(
        Object.keys(this.#registryConfig.use).map((name) => [
          name,
          { metadata: {} }
        ])
      ),
      onConnected: () => {
        if (hasDisconnected) {
          logger6().info("runner reconnected", {
            namespace: this.#config.namespace,
            runnerName: this.#config.runnerName
          });
        } else {
          logger6().debug("runner connected", {
            namespace: this.#config.namespace,
            runnerName: this.#config.runnerName
          });
        }
      },
      onDisconnected: () => {
        logger6().warn("runner disconnected", {
          namespace: this.#config.namespace,
          runnerName: this.#config.runnerName
        });
        hasDisconnected = true;
      },
      fetch: this.#runnerFetch.bind(this),
      websocket: this.#runnerWebSocket.bind(this),
      onActorStart: this.#runnerOnActorStart.bind(this),
      onActorStop: this.#runnerOnActorStop.bind(this)
    };
    this.#runner = new Runner(runnerConfig);
    this.#runner.start();
    logger6().debug("engine runner started", {
      endpoint: config4.endpoint,
      namespace: config4.namespace,
      runnerName: config4.runnerName
    });
  }
  async #loadActorHandler(actorId) {
    const handler = this.#actors.get(actorId);
    if (!handler) throw new Error(`Actor handler does not exist ${actorId}`);
    if (handler.actorStartPromise) await handler.actorStartPromise.promise;
    if (!handler.actor) throw new Error("Actor should be loaded");
    return handler;
  }
  async loadActor(actorId) {
    const handler = await this.#loadActorHandler(actorId);
    if (!handler.actor) throw new Error(`Actor ${actorId} failed to load`);
    return handler.actor;
  }
  getGenericConnGlobalState(actorId) {
    const handler = this.#actors.get(actorId);
    if (!handler) {
      throw new Error(`Actor ${actorId} not loaded`);
    }
    return handler.genericConnGlobalState;
  }
  getContext(actorId) {
    return {};
  }
  async readPersistedData(actorId) {
    const handler = this.#actors.get(actorId);
    if (!handler) throw new Error(`Actor ${actorId} not loaded`);
    if (handler.persistedData) return handler.persistedData;
    const [value] = await this.#runner.kvGet(actorId, [KEYS.PERSIST_DATA]);
    if (value !== null) {
      handler.persistedData = value;
      return value;
    } else {
      return void 0;
    }
  }
  async writePersistedData(actorId, data) {
    const handler = this.#actors.get(actorId);
    if (!handler) throw new Error(`Actor ${actorId} not loaded`);
    handler.persistedData = data;
    await this.#runner.kvPut(actorId, [[KEYS.PERSIST_DATA, data]]);
  }
  async setAlarm(actor2, timestamp) {
  }
  async getDatabase(_actorId) {
    return void 0;
  }
  // Runner lifecycle callbacks
  async #runnerOnActorStart(actorId, generation, config4) {
    logger6().debug("runner actor starting", {
      actorId,
      name: config4.name,
      key: config4.key,
      generation
    });
    let input;
    if (config4.input) {
      input = cbor10.decode(config4.input);
    }
    let handler = this.#actors.get(actorId);
    if (!handler) {
      handler = {
        genericConnGlobalState: new GenericConnGlobalState(),
        actorStartPromise: Promise.withResolvers(),
        persistedData: serializeEmptyPersistData(input)
      };
      this.#actors.set(actorId, handler);
    }
    const name = config4.name;
    invariant7(config4.key, "actor should have a key");
    const key = deserializeActorKey(config4.key);
    const definition = lookupInRegistry(
      this.#registryConfig,
      config4.name
      // TODO: Remove cast
    );
    handler.actor = definition.instantiate();
    const connDrivers = createGenericConnDrivers(
      handler.genericConnGlobalState
    );
    await handler.actor.start(
      connDrivers,
      this,
      this.#inlineClient,
      actorId,
      name,
      key,
      "unknown"
      // TODO: Add regions
    );
    handler.actorStartPromise?.resolve();
    handler.actorStartPromise = void 0;
    logger6().debug("runner actor started", { actorId, name, key });
  }
  async #runnerOnActorStop(actorId, generation) {
    logger6().debug("runner actor stopping", { actorId, generation });
    const handler = this.#actors.get(actorId);
    if (handler?.actor) {
      await handler.actor._stop();
      this.#actors.delete(actorId);
    }
    logger6().debug("runner actor stopped", { actorId });
  }
  async #runnerFetch(actorId, request) {
    logger6().debug("runner fetch", {
      actorId,
      url: request.url,
      method: request.method
    });
    return await this.#actorRouter.fetch(request, { actorId });
  }
  async #runnerWebSocket(actorId, websocketRaw, request) {
    const websocket = websocketRaw;
    logger6().debug("runner websocket", { actorId, url: request.url });
    const url = new URL(request.url);
    const encodingRaw = request.headers.get(HEADER_ENCODING);
    const connParamsRaw = request.headers.get(HEADER_CONN_PARAMS);
    const authDataRaw = request.headers.get(HEADER_AUTH_DATA);
    const encoding = EncodingSchema.parse(encodingRaw);
    const connParams = connParamsRaw ? JSON.parse(connParamsRaw) : void 0;
    const authData = authDataRaw ? JSON.parse(authDataRaw) : void 0;
    let wsHandlerPromise;
    if (url.pathname === PATH_CONNECT_WEBSOCKET) {
      wsHandlerPromise = handleWebSocketConnect(
        request,
        this.#runConfig,
        this,
        actorId,
        encoding,
        connParams,
        authData
      );
    } else if (url.pathname.startsWith(PATH_RAW_WEBSOCKET_PREFIX)) {
      wsHandlerPromise = handleRawWebSocketHandler(
        request,
        url.pathname + url.search,
        this,
        actorId,
        authData
      );
    } else {
      throw new Error(`Unreachable path: ${url.pathname}`);
    }
    const wsContext = new WSContext2(websocket);
    wsHandlerPromise.catch((err) => {
      logger6().error("building websocket handlers errored", { err });
      wsContext.close(1011, `${err}`);
    });
    if (websocket.readyState === 1) {
      wsHandlerPromise.then((x) => x.onOpen?.(new Event("open"), wsContext));
    } else {
      websocket.addEventListener("open", (event) => {
        wsHandlerPromise.then((x) => x.onOpen?.(event, wsContext));
      });
    }
    websocket.addEventListener("message", (event) => {
      wsHandlerPromise.then((x) => x.onMessage?.(event, wsContext));
    });
    websocket.addEventListener("close", (event) => {
      wsHandlerPromise.then((x) => x.onClose?.(event, wsContext));
    });
    websocket.addEventListener("error", (event) => {
      wsHandlerPromise.then((x) => x.onError?.(event, wsContext));
    });
  }
  async sleep(actorId) {
    this.#runner.sleepActor(actorId);
  }
  async shutdown(immediate) {
    logger6().info("stopping engine actor driver");
    await this.#runner.shutdown(immediate);
  }
};

// src/drivers/engine/config.ts
import { z as z9 } from "zod";
var ConfigSchema = z9.object({
  app: z9.custom().optional(),
  endpoint: z9.string().default(
    () => getEnvUniversal("RIVET_ENGINE") ?? "http://localhost:7080"
  ),
  pegboardEndpoint: z9.string().optional(),
  namespace: z9.string().default(() => getEnvUniversal("RIVET_NAMESPACE") ?? "default"),
  runnerName: z9.string().default(() => getEnvUniversal("RIVET_RUNNER") ?? "rivetkit"),
  // TODO: Automatically attempt ot determine key by common env vars (e.g. k8s pod name)
  runnerKey: z9.string().default(
    () => getEnvUniversal("RIVET_RUNNER_KEY") ?? crypto.randomUUID()
  ),
  totalSlots: z9.number().default(1e5),
  addresses: z9.record(
    z9.object({
      host: z9.string(),
      port: z9.number()
    })
  ).default({ main: { host: "127.0.0.1", port: 5051 } })
}).default({});

// src/drivers/engine/manager-driver.ts
import * as cbor11 from "cbor-x";
import invariant8 from "invariant";

// src/common/websocket.ts
var webSocketPromise = null;
async function importWebSocket() {
  if (webSocketPromise !== null) {
    return webSocketPromise;
  }
  webSocketPromise = (async () => {
    let _WebSocket;
    if (typeof WebSocket !== "undefined") {
      _WebSocket = WebSocket;
      logger4().debug("using native websocket");
    } else {
      try {
        const ws = await import("ws");
        _WebSocket = ws.default;
        logger4().debug("using websocket from npm");
      } catch {
        _WebSocket = class MockWebSocket {
          constructor() {
            throw new Error(
              'WebSocket support requires installing the "ws" peer dependency.'
            );
          }
        };
        logger4().debug("using mock websocket");
      }
    }
    return _WebSocket;
  })();
  return webSocketPromise;
}

// src/drivers/engine/api-utils.ts
var EngineApiError = class extends Error {
  constructor(group, code, message) {
    super(message || `Engine API error: ${group}/${code}`);
    this.group = group;
    this.code = code;
    this.name = "EngineApiError";
  }
};
async function apiCall(endpoint, namespace, method, path3, body) {
  const url = `${endpoint}${path3}${path3.includes("?") ? "&" : "?"}namespace=${encodeURIComponent(namespace)}`;
  const options = {
    method,
    headers: {
      "Content-Type": "application/json"
    }
  };
  if (body !== void 0 && method !== "GET") {
    options.body = JSON.stringify(body);
  }
  logger6().debug("making api call", { method, url });
  const response = await fetch(url, options);
  if (!response.ok) {
    const errorText = await response.text();
    logger6().error("api call failed", {
      status: response.status,
      statusText: response.statusText,
      error: errorText,
      method,
      path: path3
    });
    try {
      const errorData = JSON.parse(errorText);
      if (errorData.kind === "error" && errorData.group && errorData.code) {
        throw new EngineApiError(
          errorData.group,
          errorData.code,
          errorData.message
        );
      }
    } catch (parseError) {
    }
    throw new Error(
      `API call failed: ${response.status} ${response.statusText}`
    );
  }
  return response.json();
}

// src/drivers/engine/api-endpoints.ts
async function getActor(config4, actorId) {
  return apiCall(
    config4.endpoint,
    config4.namespace,
    "GET",
    `/actors/${encodeURIComponent(actorId)}`
  );
}
async function getActorById(config4, name, key) {
  const serializedKey = serializeActorKey(key);
  return apiCall(
    config4.endpoint,
    config4.namespace,
    "GET",
    `/actors/by-id?name=${encodeURIComponent(name)}&key=${encodeURIComponent(serializedKey)}`
  );
}
async function getOrCreateActorById(config4, request) {
  return apiCall(
    config4.endpoint,
    config4.namespace,
    "PUT",
    `/actors/by-id`,
    request
  );
}
async function createActor(config4, request) {
  return apiCall(
    config4.endpoint,
    config4.namespace,
    "POST",
    `/actors`,
    request
  );
}
async function destroyActor(config4, actorId) {
  return apiCall(
    config4.endpoint,
    config4.namespace,
    "DELETE",
    `/actors/${encodeURIComponent(actorId)}`
  );
}

// src/drivers/engine/ws-proxy.ts
async function createWebSocketProxy(c, targetUrl, headers) {
  const WebSocket2 = await importWebSocket();
  for (const [k, v] of c.req.raw.headers.entries()) {
    if (!k.startsWith("sec-") && k !== "connection" && k !== "upgrade") {
      headers[k] = v;
    }
  }
  const state = {};
  return {
    onOpen: async (event, clientWs) => {
      logger6().debug("client websocket connected", { targetUrl });
      if (clientWs.readyState !== 1) {
        logger6().warn("client websocket not open on connection", {
          targetUrl,
          readyState: clientWs.readyState
        });
        return;
      }
      const targetWs = new WebSocket2(targetUrl, { headers });
      state.targetWs = targetWs;
      state.connectPromise = new Promise((resolve, reject) => {
        targetWs.addEventListener("open", () => {
          logger6().debug("target websocket connected", { targetUrl });
          if (clientWs.readyState !== 1) {
            logger6().warn("client websocket closed before target connected", {
              targetUrl,
              clientReadyState: clientWs.readyState
            });
            targetWs.close(1001, "Client disconnected");
            reject(new Error("Client disconnected"));
            return;
          }
          resolve();
        });
        targetWs.addEventListener("error", (error) => {
          logger6().warn("target websocket error during connection", {
            targetUrl
          });
          reject(error);
        });
      });
      state.targetWs.addEventListener("message", (event2) => {
        if (typeof event2.data === "string" || event2.data instanceof ArrayBuffer) {
          clientWs.send(event2.data);
        } else if (event2.data instanceof Blob) {
          event2.data.arrayBuffer().then((buffer) => {
            clientWs.send(buffer);
          });
        }
      });
      state.targetWs.addEventListener("close", (event2) => {
        logger6().debug("target websocket closed", {
          targetUrl,
          code: event2.code,
          reason: event2.reason
        });
        closeWebSocketIfOpen(clientWs, event2.code, event2.reason);
      });
      state.targetWs.addEventListener("error", (error) => {
        logger6().error("target websocket error", { targetUrl, error });
        closeWebSocketIfOpen(clientWs, 1011, "Target WebSocket error");
      });
    },
    onMessage: async (event, clientWs) => {
      if (!state.targetWs || !state.connectPromise) {
        logger6().error("websocket state not initialized", { targetUrl });
        return;
      }
      try {
        await state.connectPromise;
        if (state.targetWs.readyState === WebSocket2.OPEN) {
          state.targetWs.send(event.data);
        } else {
          logger6().warn("target websocket not open", {
            targetUrl,
            readyState: state.targetWs.readyState
          });
        }
      } catch (error) {
        logger6().error("failed to connect to target websocket", {
          targetUrl,
          error
        });
        closeWebSocketIfOpen(clientWs, 1011, "Failed to connect to target");
      }
    },
    onClose: (event, clientWs) => {
      logger6().debug("client websocket closed", {
        targetUrl,
        code: event.code,
        reason: event.reason,
        wasClean: event.wasClean
      });
      if (state.targetWs) {
        if (state.targetWs.readyState === WebSocket2.OPEN || state.targetWs.readyState === WebSocket2.CONNECTING) {
          state.targetWs.close(1e3, event.reason || "Client disconnected");
        }
      }
    },
    onError: (event, clientWs) => {
      logger6().error("client websocket error", { targetUrl, event });
      if (state.targetWs) {
        if (state.targetWs.readyState === WebSocket2.OPEN) {
          state.targetWs.close(1011, "Client WebSocket error");
        } else if (state.targetWs.readyState === WebSocket2.CONNECTING) {
          state.targetWs.close();
        }
      }
    }
  };
}
function closeWebSocketIfOpen(ws, code, reason) {
  if (ws.readyState === 1) {
    ws.close(code, reason);
  } else if ("close" in ws && ws.readyState === WebSocket.OPEN) {
    ws.close(code, reason);
  }
}

// src/drivers/engine/manager-driver.ts
var EngineManagerDriver = class {
  #config;
  #runConfig;
  #importWebSocketPromise;
  constructor(config4, runConfig) {
    this.#config = config4;
    this.#runConfig = runConfig;
    if (!this.#runConfig.inspector.token()) {
      const token = generateRandomString();
      this.#runConfig.inspector.token = () => token;
    }
    this.#importWebSocketPromise = importWebSocket();
  }
  async sendRequest(actorId, actorRequest) {
    logger6().debug("sending request to actor via guard", {
      actorId,
      method: actorRequest.method,
      url: actorRequest.url
    });
    return this.#forwardHttpRequest(actorRequest, actorId);
  }
  async openWebSocket(path3, actorId, encoding, params) {
    const WebSocket2 = await this.#importWebSocketPromise;
    const guardUrl = `${this.#config.endpoint}${path3}`;
    logger6().debug("opening websocket to actor via guard", {
      actorId,
      path: path3,
      guardUrl
    });
    const ws = new WebSocket2(guardUrl, {
      headers: buildGuardHeadersForWebSocket(actorId, encoding, params)
    });
    logger6().debug("websocket connection opened", { actorId });
    return ws;
  }
  async proxyRequest(_c, actorRequest, actorId) {
    logger6().debug("forwarding request to actor via guard", {
      actorId,
      method: actorRequest.method,
      url: actorRequest.url,
      hasBody: !!actorRequest.body
    });
    return this.#forwardHttpRequest(actorRequest, actorId);
  }
  async proxyWebSocket(c, path3, actorId, encoding, params, authData) {
    const upgradeWebSocket = this.#runConfig.getUpgradeWebSocket?.();
    invariant8(upgradeWebSocket, "missing getUpgradeWebSocket");
    const guardUrl = `${this.#config.endpoint}${path3}`;
    const wsGuardUrl = guardUrl.replace("http://", "ws://");
    logger6().debug("forwarding websocket to actor via guard", {
      actorId,
      path: path3,
      guardUrl
    });
    const headers = buildGuardHeadersForWebSocket(
      actorId,
      encoding,
      params,
      authData
    );
    const args = await createWebSocketProxy(c, wsGuardUrl, headers);
    return await upgradeWebSocket(() => args)(c, noopNext());
  }
  extraStartupLog() {
    return {
      engine: this.#config.endpoint,
      namespace: this.#config.namespace,
      runner: this.#config.runnerName,
      address: Object.values(this.#config.addresses).map((v) => `${v.host}:${v.port}`).join(", ")
    };
  }
  async getForId({
    c,
    name,
    actorId
  }) {
    try {
      const response = await getActor(this.#config, actorId);
      if (response.actor.name !== name) {
        logger6().debug("actor name mismatch from api", {
          actorId,
          apiName: response.actor.name,
          requestedName: name
        });
        return void 0;
      }
      const keyRaw = response.actor.key;
      invariant8(keyRaw, `actor ${actorId} should have key`);
      const key = deserializeActorKey(keyRaw);
      return {
        actorId,
        name,
        key
      };
    } catch (error) {
      if (error instanceof EngineApiError && error.group === "actor" && error.code === "not_found") {
        return void 0;
      }
      throw error;
    }
  }
  async getWithKey({
    c,
    name,
    key
  }) {
    logger6().debug("getWithKey: searching for actor", { name, key });
    try {
      const response = await getActorById(this.#config, name, key);
      if (!response.actor_id) {
        return void 0;
      }
      const actorId = response.actor_id;
      logger6().debug("getWithKey: found actor via api", {
        actorId,
        name,
        key
      });
      return {
        actorId,
        name,
        key
      };
    } catch (error) {
      if (error instanceof EngineApiError && error.group === "actor" && error.code === "not_found") {
        return void 0;
      }
      throw error;
    }
  }
  async getOrCreateWithKey(input) {
    const { c, name, key, input: actorInput, region } = input;
    logger6().info(
      "getOrCreateWithKey: getting or creating actor via engine api",
      {
        name,
        key
      }
    );
    const response = await getOrCreateActorById(this.#config, {
      name,
      key: serializeActorKey(key),
      runner_name_selector: this.#config.runnerName,
      input: input ? cbor11.encode(actorInput).toString("base64") : void 0,
      crash_policy: "sleep"
    });
    const actorId = response.actor_id;
    logger6().info("getOrCreateWithKey: actor ready", {
      actorId,
      name,
      key,
      created: response.created
    });
    return {
      actorId,
      name,
      key
    };
  }
  async createActor({
    c,
    name,
    key,
    input
  }) {
    const existingActor = await this.getWithKey({ c, name, key });
    if (existingActor) {
      throw new ActorAlreadyExists(name, key);
    }
    logger6().info("creating actor via engine api", { name, key });
    const result = await createActor(this.#config, {
      name,
      runner_name_selector: this.#config.runnerName,
      key: serializeActorKey(key),
      input: input ? cbor11.encode(input).toString("base64") : null,
      crash_policy: "sleep"
    });
    const actorId = result.actor.actor_id;
    logger6().info("actor created", { actorId, name, key });
    return {
      actorId,
      name,
      key
    };
  }
  async destroyActor(actorId) {
    logger6().info("destroying actor via engine api", { actorId });
    await destroyActor(this.#config, actorId);
    logger6().info("actor destroyed", { actorId });
  }
  async #forwardHttpRequest(actorRequest, actorId) {
    const url = new URL(actorRequest.url);
    const guardUrl = `${this.#config.endpoint}${url.pathname}${url.search}`;
    let bodyToSend = null;
    const guardHeaders = buildGuardHeadersForHttp(actorRequest, actorId);
    if (actorRequest.body && actorRequest.method !== "GET" && actorRequest.method !== "HEAD") {
      if (actorRequest.bodyUsed) {
        throw new Error("Request body has already been consumed");
      }
      const clonedRequest = actorRequest.clone();
      bodyToSend = await clonedRequest.arrayBuffer();
      guardHeaders.delete("transfer-encoding");
      guardHeaders.set(
        "content-length",
        String(bodyToSend.byteLength)
      );
    }
    const guardRequest = new Request(guardUrl, {
      method: actorRequest.method,
      headers: guardHeaders,
      body: bodyToSend
    });
    return mutableResponse(await fetch(guardRequest));
  }
};
function mutableResponse(fetchRes) {
  return new Response(fetchRes.body, fetchRes);
}
function buildGuardHeadersForHttp(actorRequest, actorId) {
  const headers = new Headers();
  for (const [key, value] of actorRequest.headers.entries()) {
    headers.set(key, value);
  }
  headers.set("x-rivet-target", "actor");
  headers.set("x-rivet-actor", actorId);
  headers.set("x-rivet-port", "main");
  return headers;
}
function buildGuardHeadersForWebSocket(actorId, encoding, params, authData) {
  const headers = {};
  headers["x-rivet-target"] = "actor";
  headers["x-rivet-actor"] = actorId;
  headers["x-rivet-port"] = "main";
  headers[HEADER_EXPOSE_INTERNAL_ERROR] = "true";
  headers[HEADER_ENCODING] = encoding;
  if (params) {
    headers[HEADER_CONN_PARAMS] = JSON.stringify(params);
  }
  if (authData) {
    headers[HEADER_AUTH_DATA] = JSON.stringify(authData);
  }
  return headers;
}

// src/drivers/engine/mod.ts
function createEngineDriver(inputConfig) {
  const config4 = ConfigSchema.parse(inputConfig);
  return {
    name: "engine",
    manager: (_registryConfig, runConfig) => {
      return new EngineManagerDriver(config4, runConfig);
    },
    actor: (registryConfig, runConfig, managerDriver, inlineClient) => {
      return new EngineActorDriver(
        registryConfig,
        runConfig,
        managerDriver,
        inlineClient,
        config4
      );
    }
  };
}

// src/drivers/file-system/actor.ts
var FileSystemActorDriver = class {
  #registryConfig;
  #runConfig;
  #managerDriver;
  #inlineClient;
  #state;
  constructor(registryConfig, runConfig, managerDriver, inlineClient, state) {
    this.#registryConfig = registryConfig;
    this.#runConfig = runConfig;
    this.#managerDriver = managerDriver;
    this.#inlineClient = inlineClient;
    this.#state = state;
  }
  async loadActor(actorId) {
    return this.#state.startActor(
      this.#registryConfig,
      this.#runConfig,
      this.#inlineClient,
      this,
      actorId
    );
  }
  getGenericConnGlobalState(actorId) {
    return this.#state.getActorOrError(actorId).genericConnGlobalState;
  }
  /**
   * Get the current storage directory path
   */
  get storagePath() {
    return this.#state.storagePath;
  }
  getContext(_actorId) {
    return {};
  }
  async readPersistedData(actorId) {
    return new Uint8Array(
      (await this.#state.loadActorStateOrError(actorId)).persistedData
    );
  }
  async writePersistedData(actorId, data) {
    const state = await this.#state.loadActorStateOrError(actorId);
    await this.#state.writeActor(actorId, {
      ...state,
      persistedData: bufferToArrayBuffer(data)
    });
  }
  async setAlarm(actor2, timestamp) {
    await this.#state.setActorAlarm(actor2.id, timestamp);
  }
  getDatabase(actorId) {
    return this.#state.createDatabase(actorId);
  }
  sleep(actorId) {
    return this.#state.sleepActor(actorId);
  }
};

// src/drivers/file-system/global-state.ts
import * as crypto4 from "node:crypto";
import * as fsSync2 from "node:fs";
import * as fs2 from "node:fs/promises";
import * as path2 from "node:path";
import invariant9 from "invariant";

// dist/schemas/file-system-driver/v1.ts
import * as bare3 from "@bare-ts/lib";
var config3 = /* @__PURE__ */ bare3.Config({});
function read03(bc) {
  const len = bare3.readUintSafe(bc);
  if (len === 0) {
    return [];
  }
  const result = [bare3.readString(bc)];
  for (let i = 1; i < len; i++) {
    result[i] = bare3.readString(bc);
  }
  return result;
}
function write03(bc, x) {
  bare3.writeUintSafe(bc, x.length);
  for (let i = 0; i < x.length; i++) {
    bare3.writeString(bc, x[i]);
  }
}
function readActorState(bc) {
  return {
    actorId: bare3.readString(bc),
    name: bare3.readString(bc),
    key: read03(bc),
    persistedData: bare3.readData(bc),
    createdAt: bare3.readU64(bc)
  };
}
function writeActorState(bc, x) {
  bare3.writeString(bc, x.actorId);
  bare3.writeString(bc, x.name);
  write03(bc, x.key);
  bare3.writeData(bc, x.persistedData);
  bare3.writeU64(bc, x.createdAt);
}
function encodeActorState(x) {
  const bc = new bare3.ByteCursor(
    new Uint8Array(config3.initialBufferLength),
    config3
  );
  writeActorState(bc, x);
  return new Uint8Array(bc.view.buffer, bc.view.byteOffset, bc.offset);
}
function decodeActorState(bytes) {
  const bc = new bare3.ByteCursor(bytes, config3);
  const result = readActorState(bc);
  if (bc.offset < bc.view.byteLength) {
    throw new bare3.BareError(bc.offset, "remaining bytes");
  }
  return result;
}
function readActorAlarm(bc) {
  return {
    actorId: bare3.readString(bc),
    timestamp: bare3.readUint(bc)
  };
}
function writeActorAlarm(bc, x) {
  bare3.writeString(bc, x.actorId);
  bare3.writeUint(bc, x.timestamp);
}
function encodeActorAlarm(x) {
  const bc = new bare3.ByteCursor(
    new Uint8Array(config3.initialBufferLength),
    config3
  );
  writeActorAlarm(bc, x);
  return new Uint8Array(bc.view.buffer, bc.view.byteOffset, bc.offset);
}
function decodeActorAlarm(bytes) {
  const bc = new bare3.ByteCursor(bytes, config3);
  const result = readActorAlarm(bc);
  if (bc.offset < bc.view.byteLength) {
    throw new bare3.BareError(bc.offset, "remaining bytes");
  }
  return result;
}

// src/schemas/file-system-driver/versioned.ts
var CURRENT_VERSION3 = 1;
var migrations3 = /* @__PURE__ */ new Map();
var ACTOR_STATE_VERSIONED = createVersionedDataHandler({
  currentVersion: CURRENT_VERSION3,
  migrations: migrations3,
  serializeVersion: (data) => encodeActorState(data),
  deserializeVersion: (bytes) => decodeActorState(bytes)
});
var ACTOR_ALARM_VERSIONED = createVersionedDataHandler({
  currentVersion: CURRENT_VERSION3,
  migrations: migrations3,
  serializeVersion: (data) => encodeActorAlarm(data),
  deserializeVersion: (bytes) => decodeActorAlarm(bytes)
});

// src/drivers/file-system/log.ts
var LOGGER_NAME5 = "driver-fs";
function logger7() {
  return getLogger(LOGGER_NAME5);
}

// src/drivers/file-system/utils.ts
import * as crypto3 from "node:crypto";
import * as fsSync from "node:fs";
import * as fs from "node:fs/promises";
import * as os from "node:os";
import * as path from "node:path";
function generateActorId(name, key) {
  const jsonString = JSON.stringify([name, key]);
  const hash = crypto3.createHash("sha256").update(jsonString).digest("hex").substring(0, 16);
  return hash;
}
function createHashForPath(dirPath) {
  const normalizedPath = path.normalize(dirPath);
  const lastComponent = path.basename(normalizedPath);
  const hash = crypto3.createHash("sha256").update(normalizedPath).digest("hex").substring(0, 8);
  return `${lastComponent}-${hash}`;
}
function getStoragePath(customPath) {
  const dataPath = getDataPath("rivetkit");
  const pathToHash = customPath || process.cwd();
  const dirHash = createHashForPath(pathToHash);
  return path.join(dataPath, dirHash);
}
async function pathExists(path3) {
  try {
    await fs.access(path3);
    return true;
  } catch {
    return false;
  }
}
async function ensureDirectoryExists(directoryPath) {
  if (!await pathExists(directoryPath)) {
    await fs.mkdir(directoryPath, { recursive: true });
  }
}
function ensureDirectoryExistsSync(directoryPath) {
  if (!fsSync.existsSync(directoryPath)) {
    fsSync.mkdirSync(directoryPath, { recursive: true });
  }
}
function getDataPath(appName) {
  const platform = process.platform;
  const homeDir = os.homedir();
  switch (platform) {
    case "win32":
      return path.join(
        process.env.APPDATA || path.join(homeDir, "AppData", "Roaming"),
        appName
      );
    case "darwin":
      return path.join(homeDir, "Library", "Application Support", appName);
    default:
      return path.join(
        process.env.XDG_DATA_HOME || path.join(homeDir, ".local", "share"),
        appName
      );
  }
}

// src/drivers/file-system/global-state.ts
var FileSystemGlobalState = class {
  #storagePath;
  #stateDir;
  #dbsDir;
  #alarmsDir;
  #persist;
  #actors = /* @__PURE__ */ new Map();
  #actorCountOnStartup = 0;
  #runnerParams;
  get storagePath() {
    return this.#storagePath;
  }
  get actorCountOnStartup() {
    return this.#actorCountOnStartup;
  }
  constructor(persist = true, customPath) {
    this.#persist = persist;
    this.#storagePath = persist ? getStoragePath(customPath) : "/tmp";
    this.#stateDir = path2.join(this.#storagePath, "state");
    this.#dbsDir = path2.join(this.#storagePath, "databases");
    this.#alarmsDir = path2.join(this.#storagePath, "alarms");
    if (this.#persist) {
      ensureDirectoryExistsSync(this.#stateDir);
      ensureDirectoryExistsSync(this.#dbsDir);
      ensureDirectoryExistsSync(this.#alarmsDir);
      try {
        const actorIds = fsSync2.readdirSync(this.#stateDir);
        this.#actorCountOnStartup = actorIds.length;
      } catch (error) {
        logger7().error("failed to count actors", { error });
      }
      logger7().debug("file system driver ready", {
        dir: this.#storagePath,
        actorCount: this.#actorCountOnStartup
      });
      try {
        this.#cleanupTempFilesSync();
      } catch (err) {
        logger7().error("failed to cleanup temp files", { error: err });
      }
    } else {
      logger7().debug("memory driver ready");
    }
  }
  getActorStatePath(actorId) {
    return path2.join(this.#stateDir, actorId);
  }
  getActorDbPath(actorId) {
    return path2.join(this.#dbsDir, `${actorId}.db`);
  }
  getActorAlarmPath(actorId) {
    return path2.join(this.#alarmsDir, actorId);
  }
  async *getActorsIterator(params) {
    let actorIds = Array.from(this.#actors.keys()).sort();
    if (fsSync2.existsSync(this.#stateDir)) {
      actorIds = fsSync2.readdirSync(this.#stateDir).filter((id) => !id.includes(".tmp")).sort();
    }
    const startIndex = params.cursor ? actorIds.indexOf(params.cursor) + 1 : 0;
    for (let i = startIndex; i < actorIds.length; i++) {
      const actorId = actorIds[i];
      if (!actorId) {
        continue;
      }
      try {
        const state = await this.loadActorStateOrError(actorId);
        yield state;
      } catch (error) {
        logger7().error("failed to load actor state", { actorId, error });
      }
    }
  }
  /**
   * Ensures an entry exists for this actor.
   *
   * Used for #createActor and #loadActor.
   */
  #upsertEntry(actorId) {
    let entry = this.#actors.get(actorId);
    if (entry) {
      return entry;
    }
    entry = {
      id: actorId,
      genericConnGlobalState: new GenericConnGlobalState(),
      removed: false
    };
    this.#actors.set(actorId, entry);
    return entry;
  }
  /**
   * Creates a new actor and writes to file system.
   */
  async createActor(actorId, name, key, input) {
    if (this.#actors.has(actorId)) {
      throw new ActorAlreadyExists(name, key);
    }
    const entry = this.#upsertEntry(actorId);
    entry.state = {
      actorId,
      name,
      key,
      createdAt: BigInt(Date.now()),
      persistedData: bufferToArrayBuffer(serializeEmptyPersistData(input))
    };
    await this.writeActor(actorId, entry.state);
    return entry;
  }
  /**
   * Loads the actor from disk or returns the existing actor entry. This will return an entry even if the actor does not actually exist.
   */
  async loadActor(actorId) {
    const entry = this.#upsertEntry(actorId);
    if (entry.state) {
      return entry;
    }
    if (!this.#persist) {
      return entry;
    }
    if (entry.loadPromise) {
      await entry.loadPromise;
      return entry;
    }
    entry.loadPromise = this.loadActorState(entry);
    return entry.loadPromise;
  }
  async loadActorState(entry) {
    const stateFilePath = this.getActorStatePath(entry.id);
    try {
      const stateData = await fs2.readFile(stateFilePath);
      entry.state = ACTOR_STATE_VERSIONED.deserializeWithEmbeddedVersion(
        new Uint8Array(stateData)
      );
      return entry;
    } catch (innerError) {
      if (innerError.code === "ENOENT") {
        entry.loadPromise = void 0;
        return entry;
      }
      const error = new Error(`Failed to load actor state: ${innerError}`);
      throw error;
    }
  }
  async loadOrCreateActor(actorId, name, key, input) {
    const entry = await this.loadActor(actorId);
    if (!entry.state) {
      entry.state = {
        actorId,
        name,
        key,
        createdAt: BigInt(Date.now()),
        persistedData: bufferToArrayBuffer(serializeEmptyPersistData(input))
      };
      await this.writeActor(actorId, entry.state);
    }
    return entry;
  }
  async sleepActor(actorId) {
    invariant9(
      this.#persist,
      "cannot sleep actor with memory driver, must use file system driver"
    );
    const actor2 = this.#actors.get(actorId);
    invariant9(actor2, `tried to sleep ${actorId}, does not exist`);
    if (actor2.loadPromise) await actor2.loadPromise.catch();
    if (actor2.startPromise?.promise) await actor2.startPromise.promise.catch();
    actor2.removed = true;
    invariant9(actor2.actor, "actor should be loaded");
    await actor2.actor._stop();
    this.#actors.delete(actorId);
  }
  /**
   * Save actor state to disk.
   */
  async writeActor(actorId, state) {
    if (!this.#persist) {
      return;
    }
    const entry = this.#actors.get(actorId);
    invariant9(entry, "actor entry does not exist");
    await this.#performWrite(actorId, state);
  }
  async setActorAlarm(actorId, timestamp) {
    const entry = this.#actors.get(actorId);
    invariant9(entry, "actor entry does not exist");
    if (this.#persist) {
      const alarmPath = this.getActorAlarmPath(actorId);
      const tempPath = `${alarmPath}.tmp.${crypto4.randomUUID()}`;
      try {
        await ensureDirectoryExists(path2.dirname(alarmPath));
        const alarmData = {
          actorId,
          timestamp: BigInt(timestamp)
        };
        const data = ACTOR_ALARM_VERSIONED.serializeWithEmbeddedVersion(alarmData);
        await fs2.writeFile(tempPath, data);
        await fs2.rename(tempPath, alarmPath);
      } catch (error) {
        try {
          await fs2.unlink(tempPath);
        } catch {
        }
        logger7().error("failed to write alarm", { actorId, error });
        throw new Error(`Failed to write alarm: ${error}`);
      }
    }
    this.#scheduleAlarmTimeout(actorId, timestamp);
  }
  /**
   * Perform the actual write operation with atomic writes
   */
  async #performWrite(actorId, state) {
    const dataPath = this.getActorStatePath(actorId);
    const tempPath = `${dataPath}.tmp.${crypto4.randomUUID()}`;
    try {
      await ensureDirectoryExists(path2.dirname(dataPath));
      const bareState = {
        actorId: state.actorId,
        name: state.name,
        key: state.key,
        createdAt: state.createdAt,
        persistedData: state.persistedData
      };
      const serializedState = ACTOR_STATE_VERSIONED.serializeWithEmbeddedVersion(bareState);
      await fs2.writeFile(tempPath, serializedState);
      await fs2.rename(tempPath, dataPath);
    } catch (error) {
      try {
        await fs2.unlink(tempPath);
      } catch {
      }
      logger7().error("failed to save actor state", { actorId, error });
      throw new Error(`Failed to save actor state: ${error}`);
    }
  }
  /**
   * Call this method after the actor driver has been initiated.
   *
   * This will trigger all initial alarms from the file system.
   *
   * This needs to be sync since DriverConfig.actor is sync
   */
  onRunnerStart(registryConfig, runConfig, inlineClient, actorDriver) {
    if (this.#runnerParams) {
      logger7().warn("already called onRunnerStart");
      return;
    }
    this.#runnerParams = {
      registryConfig,
      runConfig,
      inlineClient,
      actorDriver
    };
    try {
      this.#loadAlarmsSync();
    } catch (err) {
      logger7().error("failed to load alarms on startup", { error: err });
    }
  }
  async startActor(registryConfig, runConfig, inlineClient, actorDriver, actorId) {
    const entry = await this.loadActor(actorId);
    if (!entry.state) {
      throw new Error(`Actor does exist and cannot be started: ${actorId}`);
    }
    if (entry.startPromise) {
      await entry.startPromise.promise;
      invariant9(entry.actor, "actor should have loaded");
      return entry.actor;
    }
    if (entry.actor) {
      return entry.actor;
    }
    entry.startPromise = Promise.withResolvers();
    try {
      const definition = lookupInRegistry(registryConfig, entry.state.name);
      entry.actor = definition.instantiate();
      const connDrivers = createGenericConnDrivers(
        entry.genericConnGlobalState
      );
      await entry.actor.start(
        connDrivers,
        actorDriver,
        inlineClient,
        actorId,
        entry.state.name,
        entry.state.key,
        "unknown"
      );
      entry.startPromise.resolve();
      entry.startPromise = void 0;
      return entry.actor;
    } catch (innerError) {
      const error = new Error(
        `Failed to start actor ${actorId}: ${innerError}`,
        { cause: innerError }
      );
      entry.startPromise?.reject(error);
      entry.startPromise = void 0;
      throw error;
    }
  }
  async loadActorStateOrError(actorId) {
    const state = (await this.loadActor(actorId)).state;
    if (!state) throw new Error(`Actor does not exist: ${actorId}`);
    return state;
  }
  getActorOrError(actorId) {
    const entry = this.#actors.get(actorId);
    if (!entry) throw new Error(`No entry for actor: ${actorId}`);
    return entry;
  }
  async createDatabase(actorId) {
    return this.getActorDbPath(actorId);
  }
  /**
   * Load all persisted alarms from disk and schedule their timers.
   */
  #loadAlarmsSync() {
    try {
      const files = fsSync2.existsSync(this.#alarmsDir) ? fsSync2.readdirSync(this.#alarmsDir) : [];
      for (const file of files) {
        if (file.includes(".tmp.")) continue;
        const fullPath = path2.join(this.#alarmsDir, file);
        try {
          const buf = fsSync2.readFileSync(fullPath);
          const alarmData = ACTOR_ALARM_VERSIONED.deserializeWithEmbeddedVersion(
            new Uint8Array(buf)
          );
          const timestamp = Number(alarmData.timestamp);
          if (Number.isFinite(timestamp)) {
            this.#scheduleAlarmTimeout(alarmData.actorId, timestamp);
          } else {
            logger7().debug("invalid alarm file contents", { file });
          }
        } catch (err) {
          logger7().error("failed to read alarm file", {
            file,
            error: stringifyError(err)
          });
        }
      }
    } catch (err) {
      logger7().error("failed to list alarms directory", { error: err });
    }
  }
  /**
   * Schedule an alarm timer for an actor without writing to disk.
   */
  #scheduleAlarmTimeout(actorId, timestamp) {
    const entry = this.#upsertEntry(actorId);
    if (entry.alarmTimestamp !== void 0 && timestamp >= entry.alarmTimestamp) {
      logger7().debug("skipping alarm schedule (later than existing)", {
        actorId,
        timestamp,
        current: entry.alarmTimestamp
      });
      return;
    }
    logger7().debug("scheduling alarm", { actorId, timestamp });
    entry.alarmTimeout?.abort();
    entry.alarmTimestamp = timestamp;
    const delay = Math.max(0, timestamp - Date.now());
    entry.alarmTimeout = setLongTimeout(async () => {
      entry.alarmTimestamp = void 0;
      if (this.#persist) {
        try {
          await fs2.unlink(this.getActorAlarmPath(actorId));
        } catch (err) {
          if (err?.code !== "ENOENT") {
            logger7().debug("failed to remove alarm file", {
              actorId,
              error: stringifyError(err)
            });
          }
        }
      }
      try {
        logger7().debug("triggering alarm", { actorId, timestamp });
        const loaded = await this.loadActor(actorId);
        if (!loaded.state) throw new Error(`Actor does not exist: ${actorId}`);
        const runnerParams = this.#runnerParams;
        invariant9(runnerParams, "missing runner params");
        if (!loaded.actor) {
          await this.startActor(
            runnerParams.registryConfig,
            runnerParams.runConfig,
            runnerParams.inlineClient,
            runnerParams.actorDriver,
            actorId
          );
        }
        invariant9(loaded.actor, "actor should be loaded after wake");
        await loaded.actor._onAlarm();
      } catch (err) {
        logger7().error("failed to handle alarm", {
          actorId,
          error: stringifyError(err)
        });
      }
    }, delay);
  }
  getOrCreateInspectorAccessToken() {
    const tokenPath = path2.join(this.#storagePath, "inspector-token");
    if (fsSync2.existsSync(tokenPath)) {
      return fsSync2.readFileSync(tokenPath, "utf-8");
    }
    const newToken = generateRandomString();
    fsSync2.writeFileSync(tokenPath, newToken);
    return newToken;
  }
  /**
   * Cleanup stale temp files on startup (synchronous)
   */
  #cleanupTempFilesSync() {
    try {
      const files = fsSync2.readdirSync(this.#stateDir);
      const tempFiles = files.filter((f) => f.includes(".tmp."));
      const oneHourAgo = Date.now() - 36e5;
      for (const tempFile of tempFiles) {
        try {
          const fullPath = path2.join(this.#stateDir, tempFile);
          const stat = fsSync2.statSync(fullPath);
          if (stat.mtimeMs < oneHourAgo) {
            fsSync2.unlinkSync(fullPath);
            logger7().info("cleaned up stale temp file", { file: tempFile });
          }
        } catch (err) {
          logger7().debug("failed to cleanup temp file", {
            file: tempFile,
            error: err
          });
        }
      }
    } catch (err) {
      logger7().error("failed to read actors directory for cleanup", {
        error: err
      });
    }
  }
};

// src/drivers/file-system/manager.ts
import invariant11 from "invariant";

// src/inline-client-driver/mod.ts
import * as cbor12 from "cbor-x";
import invariant10 from "invariant";
import onChange2 from "on-change";

// src/common/eventsource.ts
var eventSourcePromise = null;
async function importEventSource() {
  if (eventSourcePromise !== null) {
    return eventSourcePromise;
  }
  eventSourcePromise = (async () => {
    let _EventSource;
    try {
      const es = await import("eventsource");
      _EventSource = es.EventSource;
      logger4().debug("using eventsource from npm");
    } catch (err) {
      _EventSource = class MockEventSource {
        constructor() {
          throw new Error(
            'EventSource support requires installing the "eventsource" peer dependency.'
          );
        }
      };
      logger4().debug("using mock eventsource");
    }
    return _EventSource;
  })();
  return eventSourcePromise;
}

// src/inline-client-driver/log.ts
var LOGGER_NAME6 = "inline-client-driver";
function logger8() {
  return getLogger(LOGGER_NAME6);
}

// src/inline-client-driver/mod.ts
function createInlineClientDriver(managerDriver) {
  const driver = {
    action: async (c, actorQuery, encoding, params, actionName, args, opts) => {
      try {
        const { actorId } = await queryActor(c, actorQuery, managerDriver);
        logger8().debug("found actor for action", { actorId });
        invariant10(actorId, "Missing actor ID");
        logger8().debug("handling action", { actionName, encoding });
        const responseData = await sendHttpRequest({
          url: `http://actor/action/${encodeURIComponent(actionName)}`,
          method: "POST",
          headers: {
            [HEADER_ENCODING]: encoding,
            ...params !== void 0 ? { [HEADER_CONN_PARAMS]: JSON.stringify(params) } : {},
            [HEADER_EXPOSE_INTERNAL_ERROR]: "true"
          },
          body: {
            args: bufferToArrayBuffer(cbor12.encode(args))
          },
          encoding,
          customFetch: managerDriver.sendRequest.bind(managerDriver, actorId),
          signal: opts?.signal,
          requestVersionedDataHandler: HTTP_ACTION_REQUEST_VERSIONED,
          responseVersionedDataHandler: HTTP_ACTION_RESPONSE_VERSIONED
        });
        return cbor12.decode(new Uint8Array(responseData.output));
      } catch (err) {
        const { code, message, metadata } = deconstructError(
          err,
          logger8(),
          {},
          true
        );
        const x = new ActorError2(code, message, metadata);
        throw new ActorError2(code, message, metadata);
      }
    },
    resolveActorId: async (c, actorQuery, _encodingKind) => {
      const { actorId } = await queryActor(c, actorQuery, managerDriver);
      logger8().debug("resolved actor", { actorId });
      invariant10(actorId, "missing actor ID");
      return actorId;
    },
    connectWebSocket: async (c, actorQuery, encodingKind, params) => {
      const { actorId } = await queryActor(c, actorQuery, managerDriver);
      logger8().debug("found actor for action", { actorId });
      invariant10(actorId, "Missing actor ID");
      logger8().debug("opening websocket", { actorId, encoding: encodingKind });
      const ws = await managerDriver.openWebSocket(
        PATH_CONNECT_WEBSOCKET,
        actorId,
        encodingKind,
        params
      );
      return ws;
    },
    connectSse: async (c, actorQuery, encodingKind, params) => {
      const { actorId } = await queryActor(c, actorQuery, managerDriver);
      logger8().debug("found actor for sse connection", { actorId });
      invariant10(actorId, "Missing actor ID");
      logger8().debug("opening sse connection", {
        actorId,
        encoding: encodingKind
      });
      const EventSourceClass = await importEventSource();
      const eventSource = new EventSourceClass("http://actor/connect/sse", {
        fetch: (input, init) => {
          return fetch(input, {
            ...init,
            headers: {
              ...init?.headers,
              "User-Agent": httpUserAgent(),
              [HEADER_ENCODING]: encodingKind,
              ...params !== void 0 ? { [HEADER_CONN_PARAMS]: JSON.stringify(params) } : {},
              [HEADER_EXPOSE_INTERNAL_ERROR]: "true"
            }
          });
        }
      });
      return eventSource;
    },
    sendHttpMessage: async (c, actorId, encoding, connectionId, connectionToken, message) => {
      logger8().debug("sending http message", { actorId, connectionId });
      await sendHttpRequest({
        url: "http://actor/connections/message",
        method: "POST",
        headers: {
          [HEADER_ENCODING]: encoding,
          [HEADER_CONN_ID]: connectionId,
          [HEADER_CONN_TOKEN]: connectionToken,
          [HEADER_EXPOSE_INTERNAL_ERROR]: "true"
        },
        body: message,
        encoding,
        skipParseResponse: true,
        customFetch: managerDriver.sendRequest.bind(managerDriver, actorId),
        requestVersionedDataHandler: TO_SERVER_VERSIONED,
        responseVersionedDataHandler: TO_CLIENT_VERSIONED
      });
    },
    rawHttpRequest: async (c, actorQuery, encoding, params, path3, init) => {
      try {
        const { actorId } = await queryActor(c, actorQuery, managerDriver);
        logger8().debug("found actor for raw http", { actorId });
        invariant10(actorId, "Missing actor ID");
        const normalizedPath = path3.startsWith("/") ? path3.slice(1) : path3;
        const url = new URL(`http://actor/raw/http/${normalizedPath}`);
        const proxyRequestHeaders = new Headers(init.headers);
        if (params) {
          proxyRequestHeaders.set(HEADER_CONN_PARAMS, JSON.stringify(params));
        }
        const proxyRequest = new Request(url, {
          ...init,
          headers: proxyRequestHeaders
        });
        return await managerDriver.sendRequest(actorId, proxyRequest);
      } catch (err) {
        const { code, message, metadata } = deconstructError(
          err,
          logger8(),
          {},
          true
        );
        throw new ActorError2(code, message, metadata);
      }
    },
    rawWebSocket: async (c, actorQuery, encoding, params, path3, protocols) => {
      const { actorId } = await queryActor(c, actorQuery, managerDriver);
      logger8().debug("found actor for action", { actorId });
      invariant10(actorId, "Missing actor ID");
      const normalizedPath = path3.startsWith("/") ? path3.slice(1) : path3;
      logger8().debug("opening websocket", {
        actorId,
        encoding,
        path: normalizedPath
      });
      const ws = await managerDriver.openWebSocket(
        `${PATH_RAW_WEBSOCKET_PREFIX}${normalizedPath}`,
        actorId,
        encoding,
        params
      );
      return ws;
    }
  };
  return driver;
}
async function queryActor(c, query, driver) {
  logger8().debug("querying actor", { query });
  let actorOutput;
  if ("getForId" in query) {
    const output = await driver.getForId({
      c,
      name: query.getForId.name,
      actorId: query.getForId.actorId
    });
    if (!output) throw new ActorNotFound(query.getForId.actorId);
    actorOutput = output;
  } else if ("getForKey" in query) {
    const existingActor = await driver.getWithKey({
      c,
      name: query.getForKey.name,
      key: query.getForKey.key
    });
    if (!existingActor) {
      throw new ActorNotFound(
        `${query.getForKey.name}:${JSON.stringify(query.getForKey.key)}`
      );
    }
    actorOutput = existingActor;
  } else if ("getOrCreateForKey" in query) {
    const getOrCreateOutput = await driver.getOrCreateWithKey({
      c,
      name: query.getOrCreateForKey.name,
      key: query.getOrCreateForKey.key,
      input: query.getOrCreateForKey.input,
      region: query.getOrCreateForKey.region
    });
    actorOutput = {
      actorId: getOrCreateOutput.actorId
    };
  } else if ("create" in query) {
    const createOutput = await driver.createActor({
      c,
      name: query.create.name,
      key: query.create.key,
      input: query.create.input,
      region: query.create.region
    });
    actorOutput = {
      actorId: createOutput.actorId
    };
  } else {
    throw new InvalidRequest("Invalid query format");
  }
  logger8().debug("actor query result", {
    actorId: actorOutput.actorId
  });
  return { actorId: actorOutput.actorId };
}

// src/inspector/manager.ts
import { sValidator as sValidator2 } from "@hono/standard-validator";
import { Hono as Hono3 } from "hono";
function createManagerInspectorRouter() {
  return new Hono3().get("/ping", (c) => {
    return c.json({ message: "pong" }, 200);
  }).get("/actors", async (c) => {
    const limit = Number.parseInt(c.req.query("limit") ?? "") || void 0;
    const cursor = c.req.query("cursor") || void 0;
    if (!limit || limit && limit <= 0) {
      return c.json("Invalid limit", 400);
    }
    try {
      const actors = await c.var.inspector.accessors.getAllActors({
        limit,
        cursor
      });
      return c.json(actors, 200);
    } catch (error) {
      inspectorLogger().error("Failed to fetch actors", error);
      return c.json("Failed to fetch actors", 500);
    }
  }).post("/actors", sValidator2("json", CreateActorSchema), async (c) => {
    const actor2 = await c.var.inspector.accessors.createActor(
      c.req.valid("json")
    );
    return c.json(actor2, 201);
  }).get("/builds", async (c) => {
    const builds = await c.var.inspector.accessors.getBuilds();
    return c.json(builds, 200);
  }).get("/actor/:id", async (c) => {
    const id = c.req.param("id");
    const actor2 = await c.var.inspector.accessors.getActorById(id);
    if (!actor2) {
      return c.json({ error: "Actor not found" }, 404);
    }
    return c.json(actor2, 200);
  }).get("/bootstrap", async (c) => {
    const actors = await c.var.inspector.accessors.getAllActors({
      limit: 10
    });
    return c.json({ actors }, 200);
  });
}
var ManagerInspector = class {
  accessors;
  constructor(accessors) {
    this.accessors = accessors();
    inspectorLogger().debug("Manager Inspector enabled and ready");
  }
};

// src/drivers/file-system/manager.ts
var FileSystemManagerDriver = class {
  #registryConfig;
  #runConfig;
  #state;
  #driverConfig;
  #actorDriver;
  #actorRouter;
  inspector;
  constructor(registryConfig, runConfig, state, driverConfig) {
    this.#registryConfig = registryConfig;
    this.#runConfig = runConfig;
    this.#state = state;
    this.#driverConfig = driverConfig;
    if (runConfig.inspector.enabled) {
      let transformActor2 = function(actorState) {
        return {
          id: actorState.actorId,
          name: actorState.name,
          key: actorState.key,
          startedAt,
          createdAt: new Date(Number(actorState.createdAt)).toISOString(),
          features: [
            "state" /* State */,
            "connections" /* Connections */,
            "console" /* Console */,
            "events-monitoring" /* EventsMonitoring */,
            "database" /* Database */
          ]
        };
      };
      var transformActor = transformActor2;
      if (!this.#runConfig.inspector.token()) {
        this.#runConfig.inspector.token = () => this.#state.getOrCreateInspectorAccessToken();
      }
      const startedAt = (/* @__PURE__ */ new Date()).toISOString();
      this.inspector = new ManagerInspector(() => {
        return {
          getAllActors: async ({ cursor, limit }) => {
            const itr = this.#state.getActorsIterator({ cursor });
            const actors = [];
            for await (const actor2 of itr) {
              actors.push(transformActor2(actor2));
              if (limit && actors.length >= limit) {
                break;
              }
            }
            return actors;
          },
          getActorById: async (id) => {
            try {
              const result = await this.#state.loadActorStateOrError(id);
              return transformActor2(result);
            } catch {
              return null;
            }
          },
          getBuilds: async () => {
            return Object.keys(this.#registryConfig.use).map((name) => ({
              name
            }));
          },
          createActor: async (input) => {
            const { actorId } = await this.createActor(input);
            try {
              const result = await this.#state.loadActorStateOrError(actorId);
              return transformActor2(result);
            } catch {
              return null;
            }
          }
        };
      });
    }
    const inlineClient = createClientWithDriver(createInlineClientDriver(this));
    this.#actorDriver = this.#driverConfig.actor(
      registryConfig,
      runConfig,
      this,
      inlineClient
    );
    this.#actorRouter = createActorRouter(this.#runConfig, this.#actorDriver);
  }
  async sendRequest(actorId, actorRequest) {
    return await this.#actorRouter.fetch(actorRequest, {
      actorId
    });
  }
  async openWebSocket(path3, actorId, encoding, params) {
    if (path3 === PATH_CONNECT_WEBSOCKET) {
      const wsHandler = await handleWebSocketConnect(
        void 0,
        this.#runConfig,
        this.#actorDriver,
        actorId,
        encoding,
        params,
        void 0
      );
      return new InlineWebSocketAdapter2(wsHandler);
    } else if (path3.startsWith(PATH_RAW_WEBSOCKET_PREFIX)) {
      const wsHandler = await handleRawWebSocketHandler(
        void 0,
        path3,
        this.#actorDriver,
        actorId,
        void 0
      );
      return new InlineWebSocketAdapter2(wsHandler);
    } else {
      throw new Error(`Unreachable path: ${path3}`);
    }
  }
  async proxyRequest(c, actorRequest, actorId) {
    return await this.#actorRouter.fetch(actorRequest, {
      actorId
    });
  }
  async proxyWebSocket(c, path3, actorId, encoding, connParams, authData) {
    const upgradeWebSocket = this.#runConfig.getUpgradeWebSocket?.();
    invariant11(upgradeWebSocket, "missing getUpgradeWebSocket");
    if (path3 === PATH_CONNECT_WEBSOCKET) {
      const wsHandler = await handleWebSocketConnect(
        c.req.raw,
        this.#runConfig,
        this.#actorDriver,
        actorId,
        encoding,
        connParams,
        authData
      );
      return upgradeWebSocket(() => wsHandler)(c, noopNext());
    } else if (path3.startsWith(PATH_RAW_WEBSOCKET_PREFIX)) {
      const wsHandler = await handleRawWebSocketHandler(
        c.req.raw,
        path3,
        this.#actorDriver,
        actorId,
        authData
      );
      return upgradeWebSocket(() => wsHandler)(c, noopNext());
    } else {
      throw new Error(`Unreachable path: ${path3}`);
    }
  }
  async getForId({ actorId }) {
    const actor2 = await this.#state.loadActor(actorId);
    if (!actor2.state) {
      return void 0;
    }
    try {
      return {
        actorId,
        name: actor2.state.name,
        key: actor2.state.key
      };
    } catch (error) {
      logger7().error("failed to read actor state", { actorId, error });
      return void 0;
    }
  }
  async getWithKey({
    name,
    key
  }) {
    const actorId = generateActorId(name, key);
    const actor2 = await this.#state.loadActor(actorId);
    if (actor2.state) {
      return {
        actorId,
        name,
        key
      };
    }
    return void 0;
  }
  async getOrCreateWithKey(input) {
    const actorId = generateActorId(input.name, input.key);
    const actorEntry = await this.#state.loadOrCreateActor(
      actorId,
      input.name,
      input.key,
      input.input
    );
    invariant11(actorEntry.state, "must have state");
    return {
      actorId: actorEntry.state.actorId,
      name: actorEntry.state.name,
      key: actorEntry.state.key
    };
  }
  async createActor({ name, key, input }) {
    const actorId = generateActorId(name, key);
    await this.#state.createActor(actorId, name, key, input);
    return {
      actorId,
      name,
      key
    };
  }
  extraStartupLog() {
    return {
      instances: this.#state.actorCountOnStartup,
      data: this.#state.storagePath
    };
  }
};

// src/drivers/file-system/mod.ts
function createFileSystemOrMemoryDriver(persist = true, customPath) {
  const state = new FileSystemGlobalState(persist, customPath);
  const driverConfig = {
    name: persist ? "file-system" : "memory",
    manager: (registryConfig, runConfig) => new FileSystemManagerDriver(
      registryConfig,
      runConfig,
      state,
      driverConfig
    ),
    actor: (registryConfig, runConfig, managerDriver, inlineClient) => {
      const actorDriver = new FileSystemActorDriver(
        registryConfig,
        runConfig,
        managerDriver,
        inlineClient,
        state
      );
      state.onRunnerStart(registryConfig, runConfig, inlineClient, actorDriver);
      return actorDriver;
    }
  };
  return driverConfig;
}

// src/drivers/default.ts
function chooseDefaultDriver(runConfig) {
  const engineEndpoint = runConfig.engine || getEnvUniversal("RIVET_ENGINE");
  if (engineEndpoint && runConfig.driver) {
    throw new UserError(
      "Cannot specify both 'engine' and 'driver' in configuration"
    );
  }
  if (runConfig.driver) {
    return runConfig.driver;
  }
  if (engineEndpoint) {
    logger().debug("using rivet engine driver", { endpoint: engineEndpoint });
    return createEngineDriver({ endpoint: engineEndpoint });
  }
  logger().debug("using default file system driver");
  return createFileSystemOrMemoryDriver(true);
}

// src/manager/router.ts
import { createRoute, OpenAPIHono } from "@hono/zod-openapi";
import * as cbor13 from "cbor-x";
import {
  Hono as Hono4
} from "hono";
import { cors } from "hono/cors";
import { streamSSE as streamSSE3 } from "hono/streaming";
import invariant12 from "invariant";
import { z as z10 } from "zod";

// src/manager/auth.ts
function getIntentsFromQuery(query) {
  const intents = /* @__PURE__ */ new Set();
  if ("getForId" in query) {
    intents.add("get");
  } else if ("getForKey" in query) {
    intents.add("get");
  } else if ("getOrCreateForKey" in query) {
    intents.add("get");
    intents.add("create");
  } else if ("create" in query) {
    intents.add("create");
  }
  return intents;
}
async function getActorNameFromQuery(c, driver, query) {
  if ("getForId" in query) {
    const output = await driver.getForId({
      c,
      name: query.getForId.name,
      actorId: query.getForId.actorId
    });
    if (!output) throw new ActorNotFound(query.getForId.actorId);
    return output.name;
  } else if ("getForKey" in query) {
    return query.getForKey.name;
  } else if ("getOrCreateForKey" in query) {
    return query.getOrCreateForKey.name;
  } else if ("create" in query) {
    return query.create.name;
  } else {
    throw new InvalidRequest("Invalid query format");
  }
}
async function authenticateRequest(c, actorDefinition, intents, params) {
  if (!("onAuth" in actorDefinition.config)) {
    throw new Forbidden(
      "Actor requires authentication but no onAuth handler is defined (https://rivet.gg/docs/actors/authentication/). Provide an empty handler to disable auth: `onAuth: () => {}`"
    );
  }
  try {
    const dataOrPromise = actorDefinition.config.onAuth(
      {
        request: c.req.raw,
        intents
      },
      params
    );
    if (dataOrPromise instanceof Promise) {
      return await dataOrPromise;
    } else {
      return dataOrPromise;
    }
  } catch (error) {
    logger2().info("authentication error", { error: stringifyError(error) });
    throw error;
  }
}
async function authenticateEndpoint(c, driver, registryConfig, query, additionalIntents, params) {
  const intents = getIntentsFromQuery(query);
  for (const intent of additionalIntents) {
    intents.add(intent);
  }
  const actorName = await getActorNameFromQuery(c, driver, query);
  const actorDefinition = registryConfig.use[actorName];
  if (!actorDefinition) {
    throw new ActorNotFound(actorName);
  }
  return await authenticateRequest(c, actorDefinition, intents, params);
}

// src/manager/router.ts
function parseWebSocketProtocols(protocols) {
  let queryRaw;
  let encodingRaw;
  let connParamsRaw;
  if (protocols) {
    const protocolList = protocols.split(",").map((p) => p.trim());
    for (const protocol of protocolList) {
      if (protocol.startsWith("query.")) {
        queryRaw = decodeURIComponent(protocol.substring("query.".length));
      } else if (protocol.startsWith("encoding.")) {
        encodingRaw = protocol.substring("encoding.".length);
      } else if (protocol.startsWith("conn_params.")) {
        connParamsRaw = decodeURIComponent(
          protocol.substring("conn_params.".length)
        );
      }
    }
  }
  return { queryRaw, encodingRaw, connParamsRaw };
}
var OPENAPI_ENCODING = z10.string().openapi({
  description: "The encoding format to use for the response (json, cbor)",
  example: "json"
});
var OPENAPI_ACTOR_QUERY = z10.string().openapi({
  description: "Actor query information"
});
var OPENAPI_CONN_PARAMS = z10.string().openapi({
  description: "Connection parameters"
});
var OPENAPI_ACTOR_ID = z10.string().openapi({
  description: "Actor ID (used in some endpoints)",
  example: "actor-123456"
});
var OPENAPI_CONN_ID = z10.string().openapi({
  description: "Connection ID",
  example: "conn-123456"
});
var OPENAPI_CONN_TOKEN = z10.string().openapi({
  description: "Connection token"
});
function buildOpenApiResponses(schema, validateBody) {
  return {
    200: {
      description: "Success",
      content: validateBody ? {
        "application/json": {
          schema
        }
      } : {}
    },
    400: {
      description: "User error"
    },
    500: {
      description: "Internal error"
    }
  };
}
function createManagerRouter(registryConfig, runConfig, inlineClientDriver, managerDriver, validateBody) {
  const router = new OpenAPIHono({ strict: false }).basePath(
    runConfig.basePath
  );
  router.use("*", loggerMiddleware(logger2()));
  if (runConfig.cors || runConfig.inspector?.cors) {
    router.use("*", async (c, next) => {
      const path3 = c.req.path;
      if (path3.endsWith("/actors/connect/websocket") || path3.includes("/actors/raw/websocket/") || // inspectors implement their own CORS handling
      path3.endsWith("/inspect") || path3.endsWith("/actors/inspect")) {
        return next();
      }
      return cors({
        ...runConfig.cors ?? {},
        ...runConfig.inspector?.cors ?? {},
        origin: (origin, c2) => {
          const inspectorOrigin = runConfig.inspector?.cors?.origin;
          if (inspectorOrigin !== void 0) {
            if (typeof inspectorOrigin === "function") {
              const allowed = inspectorOrigin(origin, c2);
              if (allowed) return allowed;
            } else if (Array.isArray(inspectorOrigin)) {
              return inspectorOrigin.includes(origin) ? origin : void 0;
            } else {
              return inspectorOrigin;
            }
          }
          if (runConfig.cors?.origin !== void 0) {
            if (typeof runConfig.cors.origin === "function") {
              const allowed = runConfig.cors.origin(origin, c2);
              if (allowed) return allowed;
            } else {
              return runConfig.cors.origin;
            }
          }
          return null;
        },
        allowMethods: (origin, c2) => {
          const inspectorMethods = runConfig.inspector?.cors?.allowMethods;
          if (inspectorMethods) {
            if (typeof inspectorMethods === "function") {
              return inspectorMethods(origin, c2);
            }
            return inspectorMethods;
          }
          if (runConfig.cors?.allowMethods) {
            if (typeof runConfig.cors.allowMethods === "function") {
              return runConfig.cors.allowMethods(origin, c2);
            }
            return runConfig.cors.allowMethods;
          }
          return [];
        },
        allowHeaders: [
          ...runConfig.cors?.allowHeaders ?? [],
          ...runConfig.inspector?.cors?.allowHeaders ?? [],
          ...ALLOWED_PUBLIC_HEADERS,
          "Content-Type",
          "User-Agent"
        ],
        credentials: runConfig.cors?.credentials ?? runConfig.inspector?.cors?.credentials ?? true
      })(c, next);
    });
  }
  router.get("/", (c) => {
    return c.text(
      "This is an RivetKit registry.\n\nLearn more at https://rivetkit.org"
    );
  });
  {
    const ResolveQuerySchema = z10.object({
      query: z10.any().openapi({
        example: { getForId: { actorId: "actor-123" } }
      })
    }).openapi("ResolveQuery");
    const ResolveResponseSchema = z10.object({
      i: z10.string().openapi({
        example: "actor-123"
      })
    }).openapi("ResolveResponse");
    const resolveRoute = createRoute({
      method: "post",
      path: "/actors/resolve",
      request: {
        body: {
          content: validateBody ? {
            "application/json": {
              schema: ResolveQuerySchema
            }
          } : {}
        },
        headers: z10.object({
          [HEADER_ACTOR_QUERY]: OPENAPI_ACTOR_QUERY
        })
      },
      responses: buildOpenApiResponses(ResolveResponseSchema, validateBody)
    });
    router.openapi(
      resolveRoute,
      (c) => handleResolveRequest(c, registryConfig, managerDriver)
    );
  }
  {
    router.use("*", (c, next) => {
      if (c.req.path.endsWith("/actors/connect/websocket")) {
        return handleWebSocketConnectRequest(
          c,
          registryConfig,
          runConfig,
          managerDriver
        );
      }
      return next();
    });
    const wsRoute = createRoute({
      method: "get",
      path: "/actors/connect/websocket",
      responses: {
        101: {
          description: "WebSocket upgrade"
        }
      }
    });
    router.openapi(wsRoute, () => {
      throw new Error("Should be unreachable");
    });
  }
  {
    const sseRoute = createRoute({
      method: "get",
      path: "/actors/connect/sse",
      request: {
        headers: z10.object({
          [HEADER_ENCODING]: OPENAPI_ENCODING,
          [HEADER_ACTOR_QUERY]: OPENAPI_ACTOR_QUERY,
          [HEADER_CONN_PARAMS]: OPENAPI_CONN_PARAMS.optional()
        })
      },
      responses: {
        200: {
          description: "SSE stream",
          content: {
            "text/event-stream": {
              schema: z10.unknown()
            }
          }
        }
      }
    });
    router.openapi(
      sseRoute,
      (c) => handleSseConnectRequest(c, registryConfig, runConfig, managerDriver)
    );
  }
  {
    const ActionParamsSchema = z10.object({
      action: z10.string().openapi({
        param: {
          name: "action",
          in: "path"
        },
        example: "myAction"
      })
    }).openapi("ActionParams");
    const ActionRequestSchema = z10.object({
      query: z10.any().openapi({
        example: { getForId: { actorId: "actor-123" } }
      }),
      body: z10.any().optional().openapi({
        example: { param1: "value1", param2: 123 }
      })
    }).openapi("ActionRequest");
    const ActionResponseSchema = z10.any().openapi("ActionResponse");
    const actionRoute = createRoute({
      method: "post",
      path: "/actors/actions/{action}",
      request: {
        params: ActionParamsSchema,
        body: {
          content: validateBody ? {
            "application/json": {
              schema: ActionRequestSchema
            }
          } : {}
        },
        headers: z10.object({
          [HEADER_ENCODING]: OPENAPI_ENCODING,
          [HEADER_CONN_PARAMS]: OPENAPI_CONN_PARAMS.optional()
        })
      },
      responses: buildOpenApiResponses(ActionResponseSchema, validateBody)
    });
    router.openapi(
      actionRoute,
      (c) => handleActionRequest(c, registryConfig, runConfig, managerDriver)
    );
  }
  {
    const ConnectionMessageRequestSchema = z10.object({
      message: z10.any().openapi({
        example: { type: "message", content: "Hello, actor!" }
      })
    }).openapi("ConnectionMessageRequest");
    const ConnectionMessageResponseSchema = z10.any().openapi("ConnectionMessageResponse");
    const messageRoute = createRoute({
      method: "post",
      path: "/actors/message",
      request: {
        body: {
          content: validateBody ? {
            "application/json": {
              schema: ConnectionMessageRequestSchema
            }
          } : {}
        },
        headers: z10.object({
          [HEADER_ACTOR_ID]: OPENAPI_ACTOR_ID,
          [HEADER_CONN_ID]: OPENAPI_CONN_ID,
          [HEADER_ENCODING]: OPENAPI_ENCODING,
          [HEADER_CONN_TOKEN]: OPENAPI_CONN_TOKEN
        })
      },
      responses: buildOpenApiResponses(
        ConnectionMessageResponseSchema,
        validateBody
      )
    });
    router.openapi(
      messageRoute,
      (c) => handleMessageRequest(c, registryConfig, runConfig, managerDriver)
    );
  }
  {
    const RawHttpRequestBodySchema = z10.any().optional().openapi({
      description: "Raw request body (can be any content type)"
    });
    const RawHttpResponseSchema = z10.any().openapi({
      description: "Raw response from actor's onFetch handler"
    });
    const rawHttpRouteConfig = {
      path: "/actors/raw/http/*",
      request: {
        headers: z10.object({
          [HEADER_ACTOR_QUERY]: OPENAPI_ACTOR_QUERY.optional(),
          [HEADER_CONN_PARAMS]: OPENAPI_CONN_PARAMS.optional()
        }),
        body: {
          content: {
            "*/*": {
              schema: RawHttpRequestBodySchema
            }
          }
        }
      },
      responses: {
        200: {
          description: "Success - response from actor's onFetch handler",
          content: {
            "*/*": {
              schema: RawHttpResponseSchema
            }
          }
        },
        404: {
          description: "Actor does not have an onFetch handler"
        },
        500: {
          description: "Internal server error or invalid response from actor"
        }
      }
    };
    const httpMethods = [
      "get",
      "post",
      "put",
      "delete",
      "patch",
      "head",
      "options"
    ];
    for (const method of httpMethods) {
      const route = createRoute({
        method,
        ...rawHttpRouteConfig
      });
      router.openapi(route, async (c) => {
        return handleRawHttpRequest(
          c,
          registryConfig,
          runConfig,
          managerDriver
        );
      });
    }
  }
  {
    router.use("*", async (c, next) => {
      if (c.req.path.includes("/raw/websocket/")) {
        return handleRawWebSocketRequest(
          c,
          registryConfig,
          runConfig,
          managerDriver
        );
      }
      return next();
    });
    const rawWebSocketRoute = createRoute({
      method: "get",
      path: "/actors/raw/websocket/*",
      request: {},
      responses: {
        101: {
          description: "WebSocket upgrade successful"
        },
        400: {
          description: "WebSockets not enabled or invalid request"
        },
        404: {
          description: "Actor does not have an onWebSocket handler"
        }
      }
    });
    router.openapi(rawWebSocketRoute, () => {
      throw new Error("Should be unreachable");
    });
  }
  if (runConfig.inspector?.enabled) {
    router.route(
      "/actors/inspect",
      new Hono4().use(
        cors(runConfig.inspector.cors),
        secureInspector(runConfig),
        universalActorProxy({
          registryConfig,
          runConfig,
          driver: managerDriver
        })
      ).all(
        "/",
        (c) => (
          // this should be handled by the actor proxy, but just in case
          c.text("Unreachable.", 404)
        )
      )
    );
    router.route(
      "/inspect",
      new Hono4().use(
        cors(runConfig.inspector.cors),
        secureInspector(runConfig),
        async (c, next) => {
          const inspector = managerDriver.inspector;
          invariant12(inspector, "inspector not supported on this platform");
          c.set("inspector", inspector);
          await next();
        }
      ).route("/", createManagerInspectorRouter())
    );
  }
  if (registryConfig.test.enabled) {
    router.post(".test/inline-driver/call", async (c) => {
      const buffer = await c.req.arrayBuffer();
      const { encoding, transport, method, args } = cbor13.decode(new Uint8Array(buffer));
      logger2().debug("received inline request", {
        encoding,
        transport,
        method,
        args
      });
      let response;
      try {
        const output = await inlineClientDriver[method](
          ...args
        );
        response = { ok: output };
      } catch (rawErr) {
        const err = deconstructError(rawErr, logger2(), {}, true);
        response = { err };
      }
      return c.body(cbor13.encode(response));
    });
    router.get(".test/inline-driver/connect-websocket", async (c) => {
      const upgradeWebSocket = runConfig.getUpgradeWebSocket?.();
      invariant12(upgradeWebSocket, "websockets not supported on this platform");
      return upgradeWebSocket(async (c2) => {
        const {
          actorQuery: actorQueryRaw,
          params: paramsRaw,
          encodingKind
        } = c2.req.query();
        const actorQuery = JSON.parse(actorQueryRaw);
        const params = paramsRaw !== void 0 ? JSON.parse(paramsRaw) : void 0;
        logger2().debug("received test inline driver websocket", {
          actorQuery,
          params,
          encodingKind
        });
        const clientWsPromise = inlineClientDriver.connectWebSocket(
          void 0,
          actorQuery,
          encodingKind,
          params,
          void 0
        );
        return await createTestWebSocketProxy(clientWsPromise, "standard");
      })(c, noopNext());
    });
    router.get(".test/inline-driver/raw-websocket", async (c) => {
      const upgradeWebSocket = runConfig.getUpgradeWebSocket?.();
      invariant12(upgradeWebSocket, "websockets not supported on this platform");
      return upgradeWebSocket(async (c2) => {
        const {
          actorQuery: actorQueryRaw,
          params: paramsRaw,
          encodingKind,
          path: path3,
          protocols: protocolsRaw
        } = c2.req.query();
        const actorQuery = JSON.parse(actorQueryRaw);
        const params = paramsRaw !== void 0 ? JSON.parse(paramsRaw) : void 0;
        const protocols = protocolsRaw !== void 0 ? JSON.parse(protocolsRaw) : void 0;
        logger2().debug("received test inline driver raw websocket", {
          actorQuery,
          params,
          encodingKind,
          path: path3,
          protocols
        });
        logger2().debug("calling inlineClientDriver.rawWebSocket");
        const clientWsPromise = inlineClientDriver.rawWebSocket(
          void 0,
          actorQuery,
          encodingKind,
          params,
          path3,
          protocols,
          void 0
        );
        logger2().debug("calling createTestWebSocketProxy");
        return await createTestWebSocketProxy(clientWsPromise, "raw");
      })(c, noopNext());
    });
    router.all(".test/inline-driver/raw-http/*", async (c) => {
      const actorQueryHeader = c.req.header(HEADER_ACTOR_QUERY);
      const paramsHeader = c.req.header(HEADER_CONN_PARAMS);
      const encodingHeader = c.req.header(HEADER_ENCODING);
      if (!actorQueryHeader || !encodingHeader) {
        return c.text("Missing required headers", 400);
      }
      const actorQuery = JSON.parse(actorQueryHeader);
      const params = paramsHeader ? JSON.parse(paramsHeader) : void 0;
      const encoding = encodingHeader;
      const fullPath = c.req.path;
      const pathOnly = fullPath.split("/.test/inline-driver/raw-http/")[1] || "";
      const url = new URL(c.req.url);
      const pathWithQuery = pathOnly + url.search;
      logger2().debug("received test inline driver raw http", {
        actorQuery,
        params,
        encoding,
        path: pathWithQuery,
        method: c.req.method
      });
      try {
        const response = await inlineClientDriver.rawHttpRequest(
          void 0,
          actorQuery,
          encoding,
          params,
          pathWithQuery,
          {
            method: c.req.method,
            headers: c.req.raw.headers,
            body: c.req.raw.body
          },
          void 0
        );
        return response;
      } catch (error) {
        logger2().error("error in test inline raw http", {
          error: stringifyError(error)
        });
        const err = deconstructError(error, logger2(), {}, true);
        return c.json(
          {
            error: {
              code: err.code,
              message: err.message,
              metadata: err.metadata
            }
          },
          err.statusCode
        );
      }
    });
  }
  managerDriver.modifyManagerRouter?.(
    registryConfig,
    router
  );
  const mountedRouter = new Hono4();
  mountedRouter.route("/", router);
  mountedRouter.route("/registry", router);
  mountedRouter.notFound(handleRouteNotFound);
  mountedRouter.onError(handleRouteError.bind(void 0, {}));
  return { router: mountedRouter, openapi: router };
}
async function queryActor2(c, query, driver) {
  logger2().debug("querying actor", { query });
  let actorOutput;
  if ("getForId" in query) {
    const output = await driver.getForId({
      c,
      name: query.getForId.name,
      actorId: query.getForId.actorId
    });
    if (!output) throw new ActorNotFound(query.getForId.actorId);
    actorOutput = output;
  } else if ("getForKey" in query) {
    const existingActor = await driver.getWithKey({
      c,
      name: query.getForKey.name,
      key: query.getForKey.key
    });
    if (!existingActor) {
      throw new ActorNotFound(
        `${query.getForKey.name}:${JSON.stringify(query.getForKey.key)}`
      );
    }
    actorOutput = existingActor;
  } else if ("getOrCreateForKey" in query) {
    const getOrCreateOutput = await driver.getOrCreateWithKey({
      c,
      name: query.getOrCreateForKey.name,
      key: query.getOrCreateForKey.key,
      input: query.getOrCreateForKey.input,
      region: query.getOrCreateForKey.region
    });
    actorOutput = {
      actorId: getOrCreateOutput.actorId
    };
  } else if ("create" in query) {
    const createOutput = await driver.createActor({
      c,
      name: query.create.name,
      key: query.create.key,
      input: query.create.input,
      region: query.create.region
    });
    actorOutput = {
      actorId: createOutput.actorId
    };
  } else {
    throw new InvalidRequest("Invalid query format");
  }
  logger2().debug("actor query result", {
    actorId: actorOutput.actorId
  });
  return { actorId: actorOutput.actorId };
}
async function createTestWebSocketProxy(clientWsPromise, connectionType) {
  let clientWs = null;
  try {
    logger2().debug("awaiting client websocket promise");
    const ws = await clientWsPromise;
    clientWs = ws;
    logger2().debug("client websocket promise resolved", {
      constructor: ws?.constructor.name
    });
    await new Promise((resolve, reject) => {
      const onOpen = () => {
        logger2().debug("test websocket connection opened");
        resolve();
      };
      const onError = (error) => {
        logger2().error("test websocket connection failed", { error });
        reject(
          new Error(`Failed to open WebSocket: ${error.message || error}`)
        );
      };
      ws.addEventListener("open", onOpen);
      ws.addEventListener("error", onError);
    });
  } catch (error) {
    logger2().error(
      `failed to establish client ${connectionType} websocket connection`,
      { error }
    );
    return {
      onOpen: (_evt, serverWs) => {
        serverWs.close(1011, "Failed to establish connection");
      },
      onMessage: () => {
      },
      onError: () => {
      },
      onClose: () => {
      }
    };
  }
  return {
    onOpen: (_evt, serverWs) => {
      logger2().debug(`test ${connectionType} websocket connection opened`);
      logger2().debug("clientWs info", {
        constructor: clientWs.constructor.name,
        hasAddEventListener: typeof clientWs.addEventListener === "function",
        readyState: clientWs.readyState
      });
      clientWs.addEventListener("message", (clientEvt) => {
        logger2().debug(
          `test ${connectionType} websocket connection message from client`,
          {
            dataType: typeof clientEvt.data,
            isBlob: clientEvt.data instanceof Blob,
            isArrayBuffer: clientEvt.data instanceof ArrayBuffer,
            dataConstructor: clientEvt.data?.constructor?.name,
            dataStr: typeof clientEvt.data === "string" ? clientEvt.data.substring(0, 100) : void 0
          }
        );
        if (serverWs.readyState === 1) {
          if (clientEvt.data instanceof Blob) {
            clientEvt.data.arrayBuffer().then((buffer) => {
              logger2().debug(
                "converted client blob to arraybuffer, sending to server",
                {
                  bufferSize: buffer.byteLength
                }
              );
              serverWs.send(buffer);
            }).catch((error) => {
              logger2().error("failed to convert blob to arraybuffer", {
                error
              });
            });
          } else {
            logger2().debug("sending client data directly to server", {
              dataType: typeof clientEvt.data,
              dataLength: typeof clientEvt.data === "string" ? clientEvt.data.length : void 0
            });
            serverWs.send(clientEvt.data);
          }
        }
      });
      clientWs.addEventListener("close", (clientEvt) => {
        logger2().debug(`test ${connectionType} websocket connection closed`);
        if (serverWs.readyState !== 3) {
          serverWs.close(clientEvt.code, clientEvt.reason);
        }
      });
      clientWs.addEventListener("error", () => {
        logger2().debug(`test ${connectionType} websocket connection error`);
        if (serverWs.readyState !== 3) {
          serverWs.close(1011, "Error in client websocket");
        }
      });
    },
    onMessage: (evt) => {
      logger2().debug("received message from server", {
        dataType: typeof evt.data,
        isBlob: evt.data instanceof Blob,
        isArrayBuffer: evt.data instanceof ArrayBuffer,
        dataConstructor: evt.data?.constructor?.name,
        dataStr: typeof evt.data === "string" ? evt.data.substring(0, 100) : void 0
      });
      if (clientWs.readyState === 1) {
        if (evt.data instanceof Blob) {
          evt.data.arrayBuffer().then((buffer) => {
            logger2().debug("converted blob to arraybuffer, sending", {
              bufferSize: buffer.byteLength
            });
            clientWs.send(buffer);
          }).catch((error) => {
            logger2().error("failed to convert blob to arraybuffer", {
              error
            });
          });
        } else {
          logger2().debug("sending data directly", {
            dataType: typeof evt.data,
            dataLength: typeof evt.data === "string" ? evt.data.length : void 0
          });
          clientWs.send(evt.data);
        }
      }
    },
    onClose: (event, serverWs) => {
      logger2().debug(`server ${connectionType} websocket closed`, {
        wasClean: event.wasClean,
        code: event.code,
        reason: event.reason
      });
      serverWs.close(1e3, "hack_force_close");
      if (clientWs && clientWs.readyState !== clientWs.CLOSED && clientWs.readyState !== clientWs.CLOSING) {
        clientWs.close(1e3, event.reason);
      }
    },
    onError: (error) => {
      logger2().error(`error in server ${connectionType} websocket`, { error });
      if (clientWs && clientWs.readyState !== clientWs.CLOSED && clientWs.readyState !== clientWs.CLOSING) {
        clientWs.close(1011, "Error in server websocket");
      }
    }
  };
}
async function handleSseConnectRequest(c, registryConfig, _runConfig, driver) {
  let encoding;
  try {
    encoding = getRequestEncoding(c.req);
    logger2().debug("sse connection request received", { encoding });
    const params = ConnectRequestSchema.safeParse({
      query: getRequestQuery(c),
      encoding: c.req.header(HEADER_ENCODING),
      connParams: c.req.header(HEADER_CONN_PARAMS)
    });
    if (!params.success) {
      logger2().error("invalid connection parameters", {
        error: params.error
      });
      throw new InvalidRequest(params.error);
    }
    const query = params.data.query;
    const connParams = params.data.connParams ? JSON.parse(params.data.connParams) : void 0;
    const authData = await authenticateEndpoint(
      c,
      driver,
      registryConfig,
      query,
      ["connect"],
      connParams
    );
    const { actorId } = await queryActor2(c, query, driver);
    invariant12(actorId, "Missing actor ID");
    logger2().debug("sse connection to actor", { actorId });
    logger2().debug("using custom proxy mode for sse connection");
    const url = new URL("http://actor/connect/sse");
    const proxyRequestHeaderes = new Headers();
    proxyRequestHeaderes.set(HEADER_ENCODING, params.data.encoding);
    if (params.data.connParams) {
      proxyRequestHeaderes.set(HEADER_CONN_PARAMS, params.data.connParams);
    }
    if (authData) {
      proxyRequestHeaderes.set(HEADER_AUTH_DATA, JSON.stringify(authData));
    }
    const proxyRequest = new Request(url, { headers: proxyRequestHeaderes });
    return await driver.proxyRequest(c, proxyRequest, actorId);
  } catch (error) {
    const { code, message, metadata } = deconstructError(error, logger2(), {
      sseEvent: "setup"
    });
    return streamSSE3(c, async (stream) => {
      try {
        if (encoding) {
          const errorMsg = {
            body: {
              tag: "Error",
              val: {
                code,
                message,
                metadata: bufferToArrayBuffer(cbor13.encode(metadata)),
                actionId: null
              }
            }
          };
          const serialized = serializeWithEncoding(
            encoding,
            errorMsg,
            TO_CLIENT_VERSIONED
          );
          await stream.writeSSE({
            data: typeof serialized === "string" ? serialized : Buffer.from(serialized).toString("base64")
          });
        } else {
          await stream.writeSSE({
            data: code,
            event: "error"
          });
        }
      } catch (serializeError) {
        logger2().error("failed to send error to sse client", {
          error: serializeError
        });
        await stream.writeSSE({
          data: "internal error during error handling",
          event: "error"
        });
      }
    });
  }
}
async function handleWebSocketConnectRequest(c, registryConfig, runConfig, driver) {
  const upgradeWebSocket = runConfig.getUpgradeWebSocket?.();
  if (!upgradeWebSocket) {
    return c.text(
      "WebSockets are not enabled for this driver. Use SSE instead.",
      400
    );
  }
  let encoding;
  try {
    logger2().debug("websocket connection request received");
    const protocols = c.req.header("sec-websocket-protocol");
    const { queryRaw, encodingRaw, connParamsRaw } = parseWebSocketProtocols(protocols);
    let queryUnvalidated;
    try {
      queryUnvalidated = JSON.parse(queryRaw);
    } catch (error) {
      logger2().error("invalid query json", { error });
      throw new InvalidQueryJSON(error);
    }
    let connParamsUnvalidated = null;
    try {
      if (connParamsRaw) {
        connParamsUnvalidated = JSON.parse(connParamsRaw);
      }
    } catch (error) {
      logger2().error("invalid conn params", { error });
      throw new InvalidParams(
        `Invalid params JSON: ${stringifyError(error)}`
      );
    }
    const params = ConnectWebSocketRequestSchema.safeParse({
      query: queryUnvalidated,
      encoding: encodingRaw,
      connParams: connParamsUnvalidated
    });
    if (!params.success) {
      logger2().error("invalid connection parameters", {
        error: params.error
      });
      throw new InvalidRequest(params.error);
    }
    encoding = params.data.encoding;
    const authData = await authenticateEndpoint(
      c,
      driver,
      registryConfig,
      params.data.query,
      ["connect"],
      connParamsRaw
    );
    const { actorId } = await queryActor2(c, params.data.query, driver);
    logger2().debug("found actor for websocket connection", {
      actorId
    });
    invariant12(actorId, "missing actor id");
    return await driver.proxyWebSocket(
      c,
      PATH_CONNECT_WEBSOCKET,
      actorId,
      params.data.encoding,
      params.data.connParams,
      authData
    );
  } catch (error) {
    const { code, message, metadata } = deconstructError(error, logger2(), {
      wsEvent: "setup"
    });
    return await upgradeWebSocket(() => ({
      onOpen: (_evt, ws) => {
        if (encoding) {
          try {
            const errorMsg = {
              body: {
                tag: "Error",
                val: {
                  code,
                  message,
                  metadata: bufferToArrayBuffer(cbor13.encode(metadata)),
                  actionId: null
                }
              }
            };
            const serialized = serializeWithEncoding(
              encoding,
              errorMsg,
              TO_CLIENT_VERSIONED
            );
            ws.send(serialized);
            ws.close(1011, code);
          } catch (serializeError) {
            logger2().error("failed to send error to websocket client", {
              error: serializeError
            });
            ws.close(1011, "internal error during error handling");
          }
        } else {
          ws.close(1011, code);
        }
      }
    }))(c, noopNext());
  }
}
async function handleMessageRequest(c, _registryConfig, _runConfig, driver) {
  logger2().debug("connection message request received");
  try {
    const params = ConnMessageRequestSchema.safeParse({
      actorId: c.req.header(HEADER_ACTOR_ID),
      connId: c.req.header(HEADER_CONN_ID),
      encoding: c.req.header(HEADER_ENCODING),
      connToken: c.req.header(HEADER_CONN_TOKEN)
    });
    if (!params.success) {
      logger2().error("invalid connection parameters", {
        error: params.error
      });
      throw new InvalidRequest(params.error);
    }
    const { actorId, connId, encoding, connToken } = params.data;
    const url = new URL("http://actor/connections/message");
    const proxyRequestHeaders = new Headers();
    proxyRequestHeaders.set(HEADER_ENCODING, encoding);
    proxyRequestHeaders.set(HEADER_CONN_ID, connId);
    proxyRequestHeaders.set(HEADER_CONN_TOKEN, connToken);
    const proxyRequest = new Request(url, {
      method: "POST",
      body: c.req.raw.body,
      duplex: "half",
      headers: proxyRequestHeaders
    });
    return await driver.proxyRequest(c, proxyRequest, actorId);
  } catch (error) {
    logger2().error("error proxying connection message", { error });
    if (!ActorError.isActorError(error)) {
      throw new ProxyError("connection message", error);
    } else {
      throw error;
    }
  }
}
async function handleActionRequest(c, registryConfig, _runConfig, driver) {
  try {
    const actionName = c.req.param("action");
    logger2().debug("action call received", { actionName });
    const params = ConnectRequestSchema.safeParse({
      query: getRequestQuery(c),
      encoding: c.req.header(HEADER_ENCODING),
      connParams: c.req.header(HEADER_CONN_PARAMS)
    });
    if (!params.success) {
      logger2().error("invalid connection parameters", {
        error: params.error
      });
      throw new InvalidRequest(params.error);
    }
    const connParams = params.data.connParams ? JSON.parse(params.data.connParams) : void 0;
    const authData = await authenticateEndpoint(
      c,
      driver,
      registryConfig,
      params.data.query,
      ["action"],
      connParams
    );
    const { actorId } = await queryActor2(c, params.data.query, driver);
    logger2().debug("found actor for action", { actorId });
    invariant12(actorId, "Missing actor ID");
    const url = new URL(
      `http://actor/action/${encodeURIComponent(actionName)}`
    );
    const proxyRequestHeaders = new Headers();
    proxyRequestHeaders.set(HEADER_ENCODING, params.data.encoding);
    if (params.data.connParams) {
      proxyRequestHeaders.set(HEADER_CONN_PARAMS, params.data.connParams);
    }
    if (authData) {
      proxyRequestHeaders.set(HEADER_AUTH_DATA, JSON.stringify(authData));
    }
    const proxyRequest = new Request(url, {
      method: "POST",
      body: c.req.raw.body,
      headers: proxyRequestHeaders
    });
    return await driver.proxyRequest(c, proxyRequest, actorId);
  } catch (error) {
    logger2().error("error in action handler", { error: stringifyError(error) });
    if (!ActorError.isActorError(error)) {
      throw new ProxyError("Action call", error);
    } else {
      throw error;
    }
  }
}
async function handleResolveRequest(c, registryConfig, driver) {
  const encoding = getRequestEncoding(c.req);
  logger2().debug("resolve request encoding", { encoding });
  const params = ResolveRequestSchema.safeParse({
    query: getRequestQuery(c),
    connParams: c.req.header(HEADER_CONN_PARAMS)
  });
  if (!params.success) {
    logger2().error("invalid connection parameters", {
      error: params.error
    });
    throw new InvalidRequest(params.error);
  }
  const connParams = params.data.connParams ? JSON.parse(params.data.connParams) : void 0;
  const query = params.data.query;
  await authenticateEndpoint(c, driver, registryConfig, query, [], connParams);
  const { actorId } = await queryActor2(c, query, driver);
  logger2().debug("resolved actor", { actorId });
  invariant12(actorId, "Missing actor ID");
  const response = {
    actorId
  };
  const serialized = serializeWithEncoding(
    encoding,
    response,
    HTTP_RESOLVE_RESPONSE_VERSIONED
  );
  return c.body(serialized);
}
async function handleRawHttpRequest(c, registryConfig, _runConfig, driver) {
  try {
    const subpath = c.req.path.split("/raw/http/")[1] || "";
    logger2().debug("raw http request received", { subpath });
    const queryHeader = c.req.header(HEADER_ACTOR_QUERY);
    if (!queryHeader) {
      throw new InvalidRequest("Missing actor query header");
    }
    const query = JSON.parse(queryHeader);
    const connParamsHeader = c.req.header(HEADER_CONN_PARAMS);
    const connParams = connParamsHeader ? JSON.parse(connParamsHeader) : void 0;
    const authData = await authenticateEndpoint(
      c,
      driver,
      registryConfig,
      query,
      ["action"],
      connParams
    );
    const { actorId } = await queryActor2(c, query, driver);
    logger2().debug("found actor for raw http", { actorId });
    invariant12(actorId, "Missing actor ID");
    const originalUrl = new URL(c.req.url);
    const url = new URL(
      `http://actor/raw/http/${subpath}${originalUrl.search}`
    );
    logger2().debug("rewriting http url", {
      from: c.req.url,
      to: url
    });
    const proxyRequestHeaders = new Headers(c.req.raw.headers);
    if (connParams) {
      proxyRequestHeaders.set(HEADER_CONN_PARAMS, JSON.stringify(connParams));
    }
    if (authData) {
      proxyRequestHeaders.set(HEADER_AUTH_DATA, JSON.stringify(authData));
    }
    const proxyRequest = new Request(url, {
      method: c.req.method,
      headers: proxyRequestHeaders,
      body: c.req.raw.body
    });
    return await driver.proxyRequest(c, proxyRequest, actorId);
  } catch (error) {
    logger2().error("error in raw http handler", {
      error: stringifyError(error)
    });
    if (!ActorError.isActorError(error)) {
      throw new ProxyError("Raw HTTP request", error);
    } else {
      throw error;
    }
  }
}
async function handleRawWebSocketRequest(c, registryConfig, runConfig, driver) {
  const upgradeWebSocket = runConfig.getUpgradeWebSocket?.();
  if (!upgradeWebSocket) {
    return c.text("WebSockets are not enabled for this driver.", 400);
  }
  try {
    const subpath = c.req.path.split("/raw/websocket/")[1] || "";
    logger2().debug("raw websocket request received", { subpath });
    const protocols = c.req.header("sec-websocket-protocol");
    const {
      queryRaw: queryFromProtocol,
      connParamsRaw: connParamsFromProtocol
    } = parseWebSocketProtocols(protocols);
    if (!queryFromProtocol) {
      throw new InvalidRequest("Missing query in WebSocket protocol");
    }
    const query = JSON.parse(queryFromProtocol);
    let connParams;
    if (connParamsFromProtocol) {
      connParams = JSON.parse(connParamsFromProtocol);
    }
    const authData = await authenticateEndpoint(
      c,
      driver,
      registryConfig,
      query,
      ["action"],
      connParams
    );
    const { actorId } = await queryActor2(c, query, driver);
    logger2().debug("found actor for raw websocket", { actorId });
    invariant12(actorId, "Missing actor ID");
    logger2().debug("using custom proxy mode for raw websocket");
    const originalUrl = new URL(c.req.url);
    const proxyPath = `${PATH_RAW_WEBSOCKET_PREFIX}${subpath}${originalUrl.search}`;
    logger2().debug("manager router proxyWebSocket", {
      originalUrl: c.req.url,
      subpath,
      search: originalUrl.search,
      proxyPath
    });
    return await driver.proxyWebSocket(
      c,
      proxyPath,
      actorId,
      "json",
      // Default encoding for raw WebSocket
      connParams,
      authData
    );
  } catch (error) {
    const { code } = deconstructError(error, logger2(), {
      wsEvent: "setup"
    });
    return await upgradeWebSocket(() => ({
      onOpen: (_evt, ws) => {
        ws.close(1011, code);
      }
    }))(c, noopNext());
  }
}
function universalActorProxy({
  registryConfig,
  runConfig,
  driver
}) {
  return async (c, _next) => {
    if (c.req.header("upgrade") === "websocket") {
      return handleRawWebSocketRequest(c, registryConfig, runConfig, driver);
    } else {
      const queryHeader = c.req.header(HEADER_ACTOR_QUERY);
      if (!queryHeader) {
        throw new InvalidRequest("Missing actor query header");
      }
      const query = ActorQuerySchema.parse(JSON.parse(queryHeader));
      const { actorId } = await queryActor2(c, query, driver);
      const url = new URL(c.req.url);
      url.hostname = "actor";
      url.pathname = url.pathname.replace(new RegExp(`^${runConfig.basePath}`, ""), "").replace(/^\/?registry\/actors/, "").replace(/^\/?actors/, "");
      const proxyRequest = new Request(url, {
        method: c.req.method,
        headers: c.req.raw.headers,
        body: c.req.raw.body
      });
      return await driver.proxyRequest(c, proxyRequest, actorId);
    }
  };
}

// src/registry/config.ts
import { z as z11 } from "zod";
var ActorsSchema = z11.record(
  z11.string(),
  z11.custom()
);
var TestConfigSchema = z11.object({ enabled: z11.boolean() });
var RegistryConfigSchema = z11.object({
  use: z11.record(z11.string(), z11.custom()),
  // TODO: Find a better way of passing around the test config
  /**
   * Test configuration.
   *
   * DO NOT MANUALLY ENABLE. THIS IS USED INTERNALLY.
   * @internal
   **/
  test: TestConfigSchema.optional().default({ enabled: false })
});

// src/registry/log.ts
var LOGGER_NAME7 = "registry";
function logger9() {
  return getLogger(LOGGER_NAME7);
}

// src/registry/serve.ts
import { Hono as Hono5 } from "hono";
async function crossPlatformServe(rivetKitRouter, userRouter) {
  const app = userRouter ?? new Hono5();
  let serve;
  try {
    const dep = await import("@hono/node-server");
    serve = dep.serve;
  } catch (err) {
    logger9().error(
      "failed to import @hono/node-server. please run 'npm install @hono/node-server @hono/node-ws'"
    );
    process.exit(1);
  }
  app.route("/registry", rivetKitRouter);
  let createNodeWebSocket;
  try {
    const dep = await import("@hono/node-ws");
    createNodeWebSocket = dep.createNodeWebSocket;
  } catch (err) {
    logger9().error(
      "failed to import @hono/node-ws. please run 'npm install @hono/node-server @hono/node-ws'"
    );
    process.exit(1);
  }
  const { injectWebSocket, upgradeWebSocket } = createNodeWebSocket({
    app
  });
  const port = Number.parseInt(
    getEnvUniversal("PORT") ?? getEnvUniversal("PORT_HTTP") ?? "8080"
  );
  const server = serve(
    { fetch: app.fetch, port },
    () => logger9().info("server listening", { port })
  );
  injectWebSocket(server);
  return { upgradeWebSocket };
}

// src/registry/mod.ts
var Registry = class {
  #config;
  get config() {
    return this.#config;
  }
  constructor(config4) {
    this.#config = config4;
  }
  /**
   * Runs the registry for a server.
   */
  createServer(inputConfig) {
    const config4 = RunConfigSchema.parse(inputConfig);
    const driver = chooseDefaultDriver(config4);
    let upgradeWebSocket;
    if (!config4.getUpgradeWebSocket) {
      config4.getUpgradeWebSocket = () => upgradeWebSocket;
    }
    const managerDriver = driver.manager(this.#config, config4);
    const clientDriver = createInlineClientDriver(managerDriver);
    const { router: hono } = createManagerRouter(
      this.#config,
      config4,
      clientDriver,
      managerDriver,
      false
    );
    const client = createClientWithDriver(clientDriver);
    const driverLog = managerDriver.extraStartupLog?.() ?? {};
    logger9().info("rivetkit ready", {
      driver: driver.name,
      definitions: Object.keys(this.#config.use).length,
      ...driverLog
    });
    if (config4.inspector?.enabled) {
      logger9().info("inspector ready", {
        url: getInspectorUrl(config4)
      });
    }
    if (config4.role === "all" || config4.role === "runner") {
      const inlineClient = createClientWithDriver(
        createInlineClientDriver(managerDriver)
      );
      const _actorDriver = driver.actor(
        this.#config,
        config4,
        managerDriver,
        inlineClient
      );
    }
    return {
      client,
      hono,
      handler: async (req) => await hono.fetch(req),
      serve: async (app) => {
        const out = await crossPlatformServe(hono, app);
        upgradeWebSocket = out.upgradeWebSocket;
      }
    };
  }
  /**
   * Runs the registry as a standalone server.
   */
  async runServer(inputConfig) {
    const { serve } = this.createServer(inputConfig);
    serve();
  }
};
function setup(input) {
  const config4 = RegistryConfigSchema.parse(input);
  return new Registry(config4);
}

// fixtures/driver-test-suite/action-inputs.ts
var inputActor = actor({
  onAuth: () => {
  },
  createState: (c, input) => {
    return {
      initialInput: input,
      onCreateInput: void 0
    };
  },
  onCreate: (c, input) => {
    c.state.onCreateInput = input;
  },
  actions: {
    getInputs: (c) => {
      return {
        initialInput: c.state.initialInput,
        onCreateInput: c.state.onCreateInput
      };
    }
  }
});

// fixtures/driver-test-suite/action-timeout.ts
var shortTimeoutActor = actor({
  onAuth: () => {
  },
  state: { value: 0 },
  options: {
    actionTimeout: 50
    // 50ms timeout
  },
  actions: {
    quickAction: async (c) => {
      return "quick response";
    },
    slowAction: async (c) => {
      await new Promise((resolve) => setTimeout(resolve, 100));
      return "slow response";
    }
  }
});
var longTimeoutActor = actor({
  onAuth: () => {
  },
  state: { value: 0 },
  options: {
    actionTimeout: 200
    // 200ms timeout
  },
  actions: {
    delayedAction: async (c) => {
      await new Promise((resolve) => setTimeout(resolve, 100));
      return "delayed response";
    }
  }
});
var defaultTimeoutActor = actor({
  onAuth: () => {
  },
  state: { value: 0 },
  actions: {
    normalAction: async (c) => {
      await new Promise((resolve) => setTimeout(resolve, 50));
      return "normal response";
    }
  }
});
var syncTimeoutActor = actor({
  onAuth: () => {
  },
  state: { value: 0 },
  options: {
    actionTimeout: 50
    // 50ms timeout
  },
  actions: {
    syncAction: (c) => {
      return "sync response";
    }
  }
});

// fixtures/driver-test-suite/action-types.ts
var syncActionActor = actor({
  onAuth: () => {
  },
  state: { value: 0 },
  actions: {
    // Simple synchronous action that returns a value directly
    increment: (c, amount = 1) => {
      c.state.value += amount;
      return c.state.value;
    },
    // Synchronous action that returns an object
    getInfo: (c) => {
      return {
        currentValue: c.state.value,
        timestamp: Date.now()
      };
    },
    // Synchronous action with no return value (void)
    reset: (c) => {
      c.state.value = 0;
    }
  }
});
var asyncActionActor = actor({
  onAuth: () => {
  },
  state: { value: 0, data: null },
  actions: {
    // Async action with a delay
    delayedIncrement: async (c, amount = 1) => {
      await Promise.resolve();
      c.state.value += amount;
      return c.state.value;
    },
    // Async action that simulates an API call
    fetchData: async (c, id) => {
      await Promise.resolve();
      const data = { id, timestamp: Date.now() };
      c.state.data = data;
      return data;
    },
    // Async action with error handling
    asyncWithError: async (c, shouldError) => {
      await Promise.resolve();
      if (shouldError) {
        throw new UserError("Intentional error");
      }
      return "Success";
    }
  }
});
var promiseActor = actor({
  onAuth: () => {
  },
  state: { results: [] },
  actions: {
    // Action that returns a resolved promise
    resolvedPromise: (c) => {
      return Promise.resolve("resolved value");
    },
    // Action that returns a promise that resolves after a delay
    delayedPromise: (c) => {
      return new Promise((resolve) => {
        c.state.results.push("delayed");
        resolve("delayed value");
      });
    },
    // Action that returns a rejected promise
    rejectedPromise: (c) => {
      return Promise.reject(new UserError("promised rejection"));
    },
    // Action to check the collected results
    getResults: (c) => {
      return c.state.results;
    }
  }
});

// fixtures/driver-test-suite/actor-onstatechange.ts
var onStateChangeActor = actor({
  onAuth: () => {
  },
  state: {
    value: 0,
    changeCount: 0
  },
  actions: {
    // Action that modifies state - should trigger onStateChange
    setValue: (c, newValue) => {
      c.state.value = newValue;
      return c.state.value;
    },
    // Action that modifies state multiple times - should trigger onStateChange for each change
    incrementMultiple: (c, times) => {
      for (let i = 0; i < times; i++) {
        c.state.value++;
      }
      return c.state.value;
    },
    // Action that doesn't modify state - should NOT trigger onStateChange
    getValue: (c) => {
      return c.state.value;
    },
    // Action that reads and returns without modifying - should NOT trigger onStateChange
    getDoubled: (c) => {
      const doubled = c.state.value * 2;
      return doubled;
    },
    // Get the count of how many times onStateChange was called
    getChangeCount: (c) => {
      return c.state.changeCount;
    },
    // Reset change counter for testing
    resetChangeCount: (c) => {
      c.state.changeCount = 0;
    }
  },
  // Track onStateChange calls
  onStateChange: (c) => {
    c.state.changeCount++;
  }
});

// fixtures/driver-test-suite/auth.ts
var authActor = actor({
  state: { requests: 0 },
  onAuth: (opts, params) => {
    const apiKey = params?.apiKey;
    if (!apiKey) {
      throw new UserError("API key required", { code: "missing_auth" });
    }
    if (apiKey !== "valid-api-key") {
      throw new UserError("Invalid API key", { code: "invalid_auth" });
    }
    return { userId: "user123", token: apiKey };
  },
  actions: {
    getRequests: (c) => {
      c.state.requests++;
      return c.state.requests;
    },
    getUserAuth: (c) => c.conn.auth
  }
});
var intentAuthActor = actor({
  state: { value: 0 },
  onAuth: ({ request, intents }, params) => {
    console.log("intents", intents, params);
    const role = params.role;
    if (intents.has("create") && role !== "admin") {
      throw new UserError("Admin role required for create operations", {
        code: "insufficient_permissions"
      });
    }
    if (intents.has("action") && !["admin", "user"].includes(role || "")) {
      throw new UserError("User or admin role required for actions", {
        code: "insufficient_permissions"
      });
    }
    return { role, timestamp: Date.now() };
  },
  actions: {
    getValue: (c) => c.state.value,
    setValue: (c, value) => {
      c.state.value = value;
      return value;
    },
    getAuth: (c) => c.conn.auth
  }
});
var publicActor = actor({
  state: { visitors: 0 },
  onAuth: () => {
    return null;
  },
  actions: {
    visit: (c) => {
      c.state.visitors++;
      return c.state.visitors;
    }
  }
});
var noAuthActor = actor({
  state: { value: 42 },
  actions: {
    getValue: (c) => c.state.value
  }
});
var asyncAuthActor = actor({
  state: { count: 0 },
  onAuth: async (opts, params) => {
    const token = params?.token;
    if (!token) {
      throw new UserError("Token required", { code: "missing_token" });
    }
    if (token === "invalid") {
      throw new UserError("Token is invalid", { code: "invalid_token" });
    }
    return { userId: `user-${token}`, validated: true };
  },
  actions: {
    increment: (c) => {
      c.state.count++;
      return c.state.count;
    },
    getAuthData: (c) => c.conn.auth
  }
});

// fixtures/driver-test-suite/conn-liveness.ts
var connLivenessActor = actor({
  onAuth: () => {
  },
  state: {
    counter: 0,
    acceptingConnections: true
  },
  options: {
    connectionLivenessInterval: 5e3,
    connectionLivenessTimeout: 2500
  },
  onConnect: (c, conn) => {
    if (!c.state.acceptingConnections) {
      conn.disconnect();
      throw new Error("Actor is not accepting connections");
    }
  },
  actions: {
    getWsConnectionsLiveness: (c) => {
      return Array.from(c.conns.values()).filter((conn) => conn.driver === CONNECTION_DRIVER_WEBSOCKET).map((conn) => ({
        id: conn.id,
        status: conn.status,
        lastSeen: conn.lastSeen
      }));
    },
    getConnectionId: (c) => {
      return c.conn.id;
    },
    kill: (c, connId) => {
      c.state.acceptingConnections = false;
      const conn = c.conns.get(connId);
      if (conn) {
        conn.disconnect();
      }
    },
    getCounter: (c) => {
      return c.state.counter;
    },
    increment: (c, amount) => {
      c.state.counter += amount;
      return c.state.counter;
    }
  }
});

// fixtures/driver-test-suite/conn-params.ts
var counterWithParams = actor({
  onAuth: () => {
  },
  state: { count: 0, initializers: [] },
  createConnState: (c, opts, params) => {
    return {
      name: params.name || "anonymous"
    };
  },
  onConnect: (c, conn) => {
    c.state.initializers.push(conn.state.name);
  },
  actions: {
    increment: (c, x) => {
      c.state.count += x;
      c.broadcast("newCount", {
        count: c.state.count,
        by: c.conn.state.name
      });
      return c.state.count;
    },
    getInitializers: (c) => {
      return c.state.initializers;
    }
  }
});

// fixtures/driver-test-suite/conn-state.ts
var connStateActor = actor({
  onAuth: () => {
  },
  state: {
    sharedCounter: 0,
    disconnectionCount: 0
  },
  // Define connection state
  createConnState: (c, opts, params) => {
    return {
      username: params?.username || "anonymous",
      role: params?.role || "user",
      counter: 0,
      createdAt: Date.now()
    };
  },
  // Lifecycle hook when a connection is established
  onConnect: (c, conn) => {
    c.broadcast("userConnected", {
      id: conn.id,
      username: "anonymous",
      role: "user"
    });
  },
  // Lifecycle hook when a connection is closed
  onDisconnect: (c, conn) => {
    c.state.disconnectionCount += 1;
    c.broadcast("userDisconnected", {
      id: conn.id
    });
  },
  actions: {
    // Action to increment the connection's counter
    incrementConnCounter: (c, amount = 1) => {
      c.conn.state.counter += amount;
    },
    // Action to increment the shared counter
    incrementSharedCounter: (c, amount = 1) => {
      c.state.sharedCounter += amount;
      return c.state.sharedCounter;
    },
    // Get the connection state
    getConnectionState: (c) => {
      return { id: c.conn.id, ...c.conn.state };
    },
    // Check all active connections
    getConnectionIds: (c) => {
      return c.conns.keys().toArray();
    },
    // Get disconnection count
    getDisconnectionCount: (c) => {
      return c.state.disconnectionCount;
    },
    // Get all active connection states
    getAllConnectionStates: (c) => {
      return c.conns.entries().map(([id, conn]) => ({ id, ...conn.state })).toArray();
    },
    // Send message to a specific connection with matching ID
    sendToConnection: (c, targetId, message) => {
      if (c.conns.has(targetId)) {
        c.conns.get(targetId).send("directMessage", { from: c.conn.id, message });
        return true;
      } else {
        return false;
      }
    },
    // Update connection state (simulated for tests)
    updateConnection: (c, updates) => {
      if (updates.username) c.conn.state.username = updates.username;
      if (updates.role) c.conn.state.role = updates.role;
      return c.conn.state;
    }
  }
});

// fixtures/driver-test-suite/counter.ts
var counter = actor({
  onAuth: () => {
  },
  state: { count: 0 },
  actions: {
    increment: (c, x) => {
      c.state.count += x;
      c.broadcast("newCount", c.state.count);
      return c.state.count;
    },
    getCount: (c) => {
      return c.state.count;
    }
  }
});

// fixtures/driver-test-suite/error-handling.ts
var errorHandlingActor = actor({
  onAuth: () => {
  },
  state: {
    errorLog: []
  },
  actions: {
    // Action that throws a UserError with just a message
    throwSimpleError: () => {
      throw new UserError("Simple error message");
    },
    // Action that throws a UserError with code and metadata
    throwDetailedError: () => {
      throw new UserError("Detailed error message", {
        code: "detailed_error",
        metadata: {
          reason: "test",
          timestamp: Date.now()
        }
      });
    },
    // Action that throws an internal error
    throwInternalError: () => {
      throw new Error("This is an internal error");
    },
    // Action that returns successfully
    successfulAction: () => {
      return "success";
    },
    // Action that times out (simulated with a long delay)
    timeoutAction: async (c) => {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve("This should not be reached if timeout works");
        }, 1e4);
      });
    },
    // Action with configurable delay to test timeout edge cases
    delayedAction: async (c, delayMs) => {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve(`Completed after ${delayMs}ms`);
        }, delayMs);
      });
    },
    // Log an error for inspection
    logError: (c, error) => {
      c.state.errorLog.push(error);
      return c.state.errorLog;
    },
    // Get the error log
    getErrorLog: (c) => {
      return c.state.errorLog;
    },
    // Clear the error log
    clearErrorLog: (c) => {
      c.state.errorLog = [];
      return true;
    }
  },
  options: {
    actionTimeout: 500
    // 500ms timeout for actions
  }
});
var customTimeoutActor = actor({
  state: {},
  actions: {
    quickAction: async () => {
      await new Promise((resolve) => setTimeout(resolve, 50));
      return "Quick action completed";
    },
    slowAction: async () => {
      await new Promise((resolve) => setTimeout(resolve, 300));
      return "Slow action completed";
    }
  },
  options: {
    actionTimeout: 200
    // 200ms timeout
  }
});

// fixtures/driver-test-suite/inline-client.ts
var inlineClientActor = actor({
  onAuth: () => {
  },
  state: { messages: [] },
  actions: {
    // Action that uses client to call another actor (stateless)
    callCounterIncrement: async (c, amount) => {
      const client = c.client();
      const result = await client.counter.getOrCreate(["inline-test"]).increment(amount);
      c.state.messages.push(
        `Called counter.increment(${amount}), result: ${result}`
      );
      return result;
    },
    // Action that uses client to get counter state (stateless)
    getCounterState: async (c) => {
      const client = c.client();
      const count = await client.counter.getOrCreate(["inline-test"]).getCount();
      c.state.messages.push(`Got counter state: ${count}`);
      return count;
    },
    // Action that uses client with .connect() for stateful communication
    connectToCounterAndIncrement: async (c, amount) => {
      const client = c.client();
      const handle = client.counter.getOrCreate(["inline-test-stateful"]);
      const connection = handle.connect();
      const events = [];
      connection.on("newCount", (count) => {
        events.push(count);
      });
      const result1 = await connection.increment(amount);
      const result2 = await connection.increment(amount * 2);
      await connection.dispose();
      c.state.messages.push(
        `Connected to counter, incremented by ${amount} and ${amount * 2}, results: ${result1}, ${result2}, events: ${JSON.stringify(events)}`
      );
      return { result1, result2, events };
    },
    // Get all messages from this actor's state
    getMessages: (c) => {
      return c.state.messages;
    },
    // Clear messages
    clearMessages: (c) => {
      c.state.messages = [];
    }
  }
});

// fixtures/driver-test-suite/lifecycle.ts
var counterWithLifecycle = actor({
  onAuth: () => {
  },
  state: {
    count: 0,
    events: []
  },
  createConnState: (c, opts, params) => ({
    joinTime: Date.now()
  }),
  onStart: (c) => {
    c.state.events.push("onStart");
  },
  onBeforeConnect: (c, opts, params) => {
    if (params?.trackLifecycle) c.state.events.push("onBeforeConnect");
  },
  onConnect: (c, conn) => {
    if (conn.params?.trackLifecycle) c.state.events.push("onConnect");
  },
  onDisconnect: (c, conn) => {
    if (conn.params?.trackLifecycle) c.state.events.push("onDisconnect");
  },
  actions: {
    getEvents: (c) => {
      return c.state.events;
    },
    increment: (c, x) => {
      c.state.count += x;
      return c.state.count;
    }
  }
});

// fixtures/driver-test-suite/metadata.ts
var metadataActor = actor({
  onAuth: () => {
  },
  state: {
    lastMetadata: null,
    actorName: "",
    // Store tags and region in state for testing since they may not be
    // available in the context in all environments
    storedTags: {},
    storedRegion: null
  },
  onStart: (c) => {
    c.state.actorName = c.name;
  },
  actions: {
    // Set up test tags - this will be called by tests to simulate tags
    setupTestTags: (c, tags) => {
      c.state.storedTags = tags;
      return tags;
    },
    // Set up test region - this will be called by tests to simulate region
    setupTestRegion: (c, region) => {
      c.state.storedRegion = region;
      return region;
    },
    // Get all available metadata
    getMetadata: (c) => {
      const metadata = {
        name: c.name,
        tags: c.state.storedTags,
        region: c.state.storedRegion
      };
      c.state.lastMetadata = metadata;
      return metadata;
    },
    // Get the actor name
    getActorName: (c) => {
      return c.name;
    },
    // Get a specific tag by key
    getTag: (c, key) => {
      return c.state.storedTags[key] || null;
    },
    // Get all tags
    getTags: (c) => {
      return c.state.storedTags;
    },
    // Get the region
    getRegion: (c) => {
      return c.state.storedRegion;
    },
    // Get the stored actor name (from onStart)
    getStoredActorName: (c) => {
      return c.state.actorName;
    },
    // Get last retrieved metadata
    getLastMetadata: (c) => {
      return c.state.lastMetadata;
    }
  }
});

// fixtures/driver-test-suite/raw-http.ts
import { Hono as Hono6 } from "hono";
var rawHttpActor = actor({
  state: {
    requestCount: 0
  },
  onAuth() {
    return {};
  },
  onFetch(ctx, request) {
    const url = new URL(request.url);
    const method = request.method;
    ctx.state.requestCount++;
    if (url.pathname === "/api/hello") {
      return new Response(JSON.stringify({ message: "Hello from actor!" }), {
        headers: { "Content-Type": "application/json" }
      });
    }
    if (url.pathname === "/api/echo" && method === "POST") {
      return new Response(request.body, {
        headers: request.headers
      });
    }
    if (url.pathname === "/api/state") {
      return new Response(
        JSON.stringify({
          requestCount: ctx.state.requestCount
        }),
        {
          headers: { "Content-Type": "application/json" }
        }
      );
    }
    if (url.pathname === "/api/headers") {
      const headers = Object.fromEntries(request.headers.entries());
      return new Response(JSON.stringify(headers), {
        headers: { "Content-Type": "application/json" }
      });
    }
    return new Response("Not Found", { status: 404 });
  },
  actions: {}
});
var rawHttpNoHandlerActor = actor({
  // No onFetch handler - all requests should return 404
  onAuth() {
    return {};
  },
  actions: {}
});
var rawHttpVoidReturnActor = actor({
  onAuth() {
    return {};
  },
  onFetch(ctx, request) {
    return void 0;
  },
  actions: {}
});
var rawHttpHonoActor = actor({
  onAuth() {
    return {};
  },
  createVars() {
    const router = new Hono6();
    router.get("/", (c) => c.json({ message: "Welcome to Hono actor!" }));
    router.get(
      "/users",
      (c) => c.json([
        { id: 1, name: "Alice" },
        { id: 2, name: "Bob" }
      ])
    );
    router.get("/users/:id", (c) => {
      const id = c.req.param("id");
      return c.json({ id: parseInt(id), name: id === "1" ? "Alice" : "Bob" });
    });
    router.post("/users", async (c) => {
      const body = await c.req.json();
      return c.json({ id: 3, ...body }, 201);
    });
    router.put("/users/:id", async (c) => {
      const id = c.req.param("id");
      const body = await c.req.json();
      return c.json({ id: parseInt(id), ...body });
    });
    router.delete("/users/:id", (c) => {
      const id = c.req.param("id");
      return c.json({ message: `User ${id} deleted` });
    });
    return { router };
  },
  onFetch(ctx, request) {
    return ctx.vars.router.fetch(request);
  },
  actions: {}
});

// fixtures/driver-test-suite/raw-http-auth.ts
var rawHttpAuthActor = actor({
  state: {
    requestCount: 0
  },
  onAuth: (opts, params) => {
    const apiKey = params.apiKey;
    if (!apiKey) {
      throw new UserError("API key required", { code: "missing_auth" });
    }
    if (apiKey !== "valid-api-key") {
      throw new UserError("Invalid API key", { code: "invalid_auth" });
    }
    return { userId: "user123", token: apiKey };
  },
  onFetch(ctx, request) {
    const url = new URL(request.url);
    ctx.state.requestCount++;
    if (url.pathname === "/api/auth-info") {
      return new Response(
        JSON.stringify({
          message: "Authenticated request",
          requestCount: ctx.state.requestCount
        }),
        {
          headers: { "Content-Type": "application/json" }
        }
      );
    }
    if (url.pathname === "/api/protected") {
      return new Response(
        JSON.stringify({
          message: "This is protected content"
        }),
        {
          headers: { "Content-Type": "application/json" }
        }
      );
    }
    return new Response("Not Found", { status: 404 });
  },
  actions: {
    getRequestCount(ctx) {
      return ctx.state.requestCount;
    },
    getAuthFromConnections(ctx) {
      const firstConn = ctx.conns.values().next().value;
      return firstConn?.auth;
    }
  }
});
var rawHttpNoAuthActor = actor({
  state: {
    value: 42
  },
  onFetch(ctx, request) {
    return new Response(
      JSON.stringify({
        value: ctx.state.value
      }),
      {
        headers: { "Content-Type": "application/json" }
      }
    );
  },
  actions: {
    getValue(ctx) {
      return ctx.state.value;
    }
  }
});
var rawHttpPublicActor = actor({
  state: {
    visitors: 0
  },
  onAuth: () => {
    return null;
  },
  onFetch(ctx, request) {
    ctx.state.visitors++;
    return new Response(
      JSON.stringify({
        message: "Welcome visitor!",
        count: ctx.state.visitors
      }),
      {
        headers: { "Content-Type": "application/json" }
      }
    );
  },
  actions: {
    getVisitorCount(ctx) {
      return ctx.state.visitors;
    }
  }
});
var rawHttpCustomAuthActor = actor({
  state: {
    authorized: 0,
    unauthorized: 0
  },
  onAuth: () => {
    return {};
  },
  onFetch(ctx, request) {
    const authHeader = request.headers.get("Authorization");
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      ctx.state.unauthorized++;
      return new Response(JSON.stringify({ error: "Unauthorized" }), {
        status: 401,
        headers: { "Content-Type": "application/json" }
      });
    }
    const token = authHeader.substring(7);
    if (token !== "custom-token") {
      ctx.state.unauthorized++;
      return new Response(JSON.stringify({ error: "Invalid token" }), {
        status: 403,
        headers: { "Content-Type": "application/json" }
      });
    }
    ctx.state.authorized++;
    return new Response(
      JSON.stringify({
        message: "Authorized!",
        authorized: ctx.state.authorized
      }),
      {
        headers: { "Content-Type": "application/json" }
      }
    );
  },
  actions: {
    getStats(ctx) {
      return {
        authorized: ctx.state.authorized,
        unauthorized: ctx.state.unauthorized
      };
    }
  }
});

// fixtures/driver-test-suite/raw-http-request-properties.ts
var rawHttpRequestPropertiesActor = actor({
  onAuth() {
    return {};
  },
  actions: {},
  onFetch(ctx, request) {
    const url = new URL(request.url);
    const method = request.method;
    const headers = Object.fromEntries(request.headers.entries());
    const handleBody = async () => {
      if (!request.body) {
        return null;
      }
      const contentType = request.headers.get("content-type") || "";
      try {
        if (contentType.includes("application/json")) {
          const text = await request.text();
          return text ? JSON.parse(text) : null;
        } else {
          const text = await request.text();
          return text || null;
        }
      } catch (error) {
        return null;
      }
    };
    if (method === "HEAD") {
      return new Response(null, {
        status: 200,
        headers: { "Content-Type": "application/json" }
      });
    }
    return handleBody().then((body) => {
      const responseData = {
        // URL properties
        url: request.url,
        pathname: url.pathname,
        search: url.search,
        searchParams: Object.fromEntries(url.searchParams.entries()),
        hash: url.hash,
        // Method
        method: request.method,
        // Headers
        headers,
        // Body
        body,
        bodyText: typeof body === "string" ? body : body === null && request.body !== null ? "" : null,
        // Additional properties that might be available
        // Note: Some properties like cache, credentials, mode, etc.
        // might not be available in all environments
        cache: request.cache || null,
        credentials: request.credentials || null,
        mode: request.mode || null,
        redirect: request.redirect || null,
        referrer: request.referrer || null
      };
      return new Response(JSON.stringify(responseData), {
        headers: { "Content-Type": "application/json" }
      });
    });
  }
});

// fixtures/driver-test-suite/raw-websocket.ts
var rawWebSocketActor = actor({
  state: {
    connectionCount: 0,
    messageCount: 0
  },
  onAuth(params) {
    return { connParams: params };
  },
  onWebSocket(ctx, websocket, opts) {
    ctx.state.connectionCount = ctx.state.connectionCount + 1;
    console.log(`[ACTOR] New connection, count: ${ctx.state.connectionCount}`);
    websocket.send(
      JSON.stringify({
        type: "welcome",
        connectionCount: ctx.state.connectionCount
      })
    );
    console.log("[ACTOR] Sent welcome message");
    websocket.addEventListener("message", (event) => {
      ctx.state.messageCount = ctx.state.messageCount + 1;
      console.log(
        `[ACTOR] Message received, total count: ${ctx.state.messageCount}, data:`,
        event.data
      );
      const data = event.data;
      if (typeof data === "string") {
        try {
          const parsed = JSON.parse(data);
          if (parsed.type === "ping") {
            websocket.send(
              JSON.stringify({
                type: "pong",
                timestamp: Date.now()
              })
            );
          } else if (parsed.type === "getStats") {
            console.log(
              `[ACTOR] Sending stats - connections: ${ctx.state.connectionCount}, messages: ${ctx.state.messageCount}`
            );
            websocket.send(
              JSON.stringify({
                type: "stats",
                connectionCount: ctx.state.connectionCount,
                messageCount: ctx.state.messageCount
              })
            );
          } else if (parsed.type === "getAuthData") {
            websocket.send(
              JSON.stringify({
                type: "authData",
                authData: null,
                message: "Auth data not available in raw WebSocket handler"
              })
            );
          } else if (parsed.type === "getRequestInfo") {
            websocket.send(
              JSON.stringify({
                type: "requestInfo",
                url: opts.request.url,
                pathname: new URL(opts.request.url).pathname,
                search: new URL(opts.request.url).search
              })
            );
          } else {
            websocket.send(data);
          }
        } catch {
          websocket.send(data);
        }
      } else {
        websocket.send(data);
      }
    });
    websocket.addEventListener("close", () => {
      ctx.state.connectionCount = ctx.state.connectionCount - 1;
      console.log(
        `[ACTOR] Connection closed, count: ${ctx.state.connectionCount}`
      );
    });
  },
  actions: {
    getStats(ctx) {
      return {
        connectionCount: ctx.state.connectionCount,
        messageCount: ctx.state.messageCount
      };
    }
  }
});
var rawWebSocketBinaryActor = actor({
  onAuth() {
    return {};
  },
  onWebSocket(ctx, websocket, opts) {
    websocket.addEventListener("message", (event) => {
      const data = event.data;
      if (data instanceof ArrayBuffer || data instanceof Uint8Array) {
        const bytes = new Uint8Array(data);
        const reversed = new Uint8Array(bytes.length);
        for (let i = 0; i < bytes.length; i++) {
          reversed[i] = bytes[bytes.length - 1 - i];
        }
        websocket.send(reversed);
      }
    });
  },
  actions: {}
});

// fixtures/driver-test-suite/raw-websocket-auth.ts
var rawWebSocketAuthActor = actor({
  state: {
    connectionCount: 0,
    messageCount: 0
  },
  onAuth: (opts, params) => {
    const apiKey = params.apiKey;
    if (!apiKey) {
      throw new UserError("API key required", { code: "missing_auth" });
    }
    if (apiKey !== "valid-api-key") {
      throw new UserError("Invalid API key", { code: "invalid_auth" });
    }
    return { userId: "user123", token: apiKey };
  },
  onWebSocket(ctx, websocket) {
    ctx.state.connectionCount++;
    websocket.send(
      JSON.stringify({
        type: "welcome",
        message: "Authenticated WebSocket connection",
        connectionCount: ctx.state.connectionCount
      })
    );
    websocket.addEventListener("message", (event) => {
      ctx.state.messageCount++;
      const data = event.data;
      if (typeof data === "string") {
        try {
          const parsed = JSON.parse(data);
          if (parsed.type === "getAuth") {
            websocket.send(
              JSON.stringify({
                type: "authInfo",
                authenticated: true
              })
            );
          } else {
            websocket.send(
              JSON.stringify({
                type: "echo",
                original: parsed
              })
            );
          }
        } catch {
          websocket.send(data);
        }
      }
    });
    websocket.addEventListener("close", () => {
      ctx.state.connectionCount--;
    });
  },
  actions: {
    getStats(ctx) {
      return {
        connectionCount: ctx.state.connectionCount,
        messageCount: ctx.state.messageCount
      };
    }
  }
});
var rawWebSocketNoAuthActor = actor({
  state: {
    connections: 0
  },
  onWebSocket(ctx, websocket) {
    ctx.state.connections++;
    websocket.send(
      JSON.stringify({
        type: "connected",
        connections: ctx.state.connections
      })
    );
  },
  actions: {
    getConnectionCount(ctx) {
      return ctx.state.connections;
    }
  }
});
var rawWebSocketPublicActor = actor({
  state: {
    visitors: 0
  },
  onAuth: () => {
    return null;
  },
  onWebSocket(ctx, websocket) {
    ctx.state.visitors++;
    websocket.send(
      JSON.stringify({
        type: "welcome",
        message: "Public WebSocket connection",
        visitorNumber: ctx.state.visitors
      })
    );
    websocket.addEventListener("message", (event) => {
      websocket.send(event.data);
    });
  },
  actions: {
    getVisitorCount(ctx) {
      return ctx.state.visitors;
    }
  }
});
var rawWebSocketCustomAuthActor = actor({
  state: {
    authorized: 0,
    unauthorized: 0
  },
  onAuth: () => {
    return {};
  },
  onWebSocket(ctx, websocket, opts) {
    const url = new URL(opts.request.url);
    const token = url.searchParams.get("token");
    if (!token || token !== "custom-ws-token") {
      ctx.state.unauthorized++;
      websocket.send(
        JSON.stringify({
          type: "error",
          message: "Unauthorized"
        })
      );
      websocket.close(1008, "Unauthorized");
      return;
    }
    ctx.state.authorized++;
    websocket.send(
      JSON.stringify({
        type: "authorized",
        message: "Welcome authenticated user!"
      })
    );
    websocket.addEventListener("message", (event) => {
      websocket.send(
        JSON.stringify({
          type: "echo",
          data: event.data,
          authenticated: true
        })
      );
    });
  },
  actions: {
    getStats(ctx) {
      return {
        authorized: ctx.state.authorized,
        unauthorized: ctx.state.unauthorized
      };
    }
  }
});

// fixtures/driver-test-suite/request-access.ts
var requestAccessActor = actor({
  onAuth: () => {
  },
  // Allow unauthenticated connections
  state: {
    // Track request info from different hooks
    onBeforeConnectRequest: {
      hasRequest: false,
      requestUrl: null,
      requestMethod: null,
      requestHeaders: {}
    },
    createConnStateRequest: {
      hasRequest: false,
      requestUrl: null,
      requestMethod: null,
      requestHeaders: {}
    },
    onFetchRequest: {
      hasRequest: false,
      requestUrl: null,
      requestMethod: null,
      requestHeaders: {}
    },
    onWebSocketRequest: {
      hasRequest: false,
      requestUrl: null,
      requestMethod: null,
      requestHeaders: {}
    }
  },
  createConnState: (c, { request }, params) => {
    return {
      trackRequest: params?.trackRequest || false,
      requestInfo: params?.trackRequest && request ? {
        hasRequest: true,
        requestUrl: request.url,
        requestMethod: request.method,
        requestHeaders: Object.fromEntries(request.headers.entries())
      } : null
    };
  },
  onConnect: (c, conn) => {
    if (conn.state.requestInfo) {
      c.state.createConnStateRequest = conn.state.requestInfo;
    }
  },
  onBeforeConnect: (c, { request }, params) => {
    if (params?.trackRequest) {
      if (request) {
        c.state.onBeforeConnectRequest.hasRequest = true;
        c.state.onBeforeConnectRequest.requestUrl = request.url;
        c.state.onBeforeConnectRequest.requestMethod = request.method;
        const headers = {};
        request.headers.forEach((value, key) => {
          headers[key] = value;
        });
        c.state.onBeforeConnectRequest.requestHeaders = headers;
      } else {
        c.state.onBeforeConnectRequest.hasRequest = false;
      }
    }
  },
  onFetch: (c, request) => {
    c.state.onFetchRequest.hasRequest = true;
    c.state.onFetchRequest.requestUrl = request.url;
    c.state.onFetchRequest.requestMethod = request.method;
    const headers = {};
    request.headers.forEach((value, key) => {
      headers[key] = value;
    });
    c.state.onFetchRequest.requestHeaders = headers;
    return new Response(
      JSON.stringify({
        hasRequest: true,
        requestUrl: request.url,
        requestMethod: request.method,
        requestHeaders: headers
      }),
      {
        status: 200,
        headers: { "Content-Type": "application/json" }
      }
    );
  },
  onWebSocket: (c, websocket, { request }) => {
    c.state.onWebSocketRequest.hasRequest = true;
    c.state.onWebSocketRequest.requestUrl = request.url;
    c.state.onWebSocketRequest.requestMethod = request.method;
    const headers = {};
    request.headers.forEach((value, key) => {
      headers[key] = value;
    });
    c.state.onWebSocketRequest.requestHeaders = headers;
    websocket.send(
      JSON.stringify({
        hasRequest: true,
        requestUrl: request.url,
        requestMethod: request.method,
        requestHeaders: headers
      })
    );
    websocket.addEventListener("message", (event) => {
      websocket.send(event.data);
    });
  },
  actions: {
    getRequestInfo: (c) => {
      return {
        onBeforeConnect: c.state.onBeforeConnectRequest,
        createConnState: c.state.createConnStateRequest,
        onFetch: c.state.onFetchRequest,
        onWebSocket: c.state.onWebSocketRequest
      };
    }
  }
});

// fixtures/driver-test-suite/request-access-auth.ts
var requestAccessAuthActor = actor({
  onAuth: ({ request, intents }, params) => {
    if (params?.trackRequest) {
      const headers = {};
      request.headers.forEach((value, key) => {
        headers[key] = value;
      });
      return {
        hasRequest: true,
        requestUrl: request.url,
        requestMethod: request.method,
        requestHeaders: headers,
        intents: Array.from(intents)
      };
    }
    return {};
  },
  state: {
    authData: null
  },
  onConnect: (c, conn) => {
    c.state.authData = conn.auth;
  },
  actions: {
    getAuthRequestInfo: (c) => {
      const authData = c.state.authData || {
        hasRequest: false,
        requestUrl: null,
        requestMethod: null,
        requestHeaders: {},
        intents: []
      };
      return authData;
    }
  }
});

// fixtures/driver-test-suite/scheduled.ts
var scheduled = actor({
  onAuth: () => {
  },
  state: {
    lastRun: 0,
    scheduledCount: 0,
    taskHistory: []
  },
  actions: {
    // Schedule using 'at' with specific timestamp
    scheduleTaskAt: (c, timestamp) => {
      c.schedule.at(timestamp, "onScheduledTask");
      return timestamp;
    },
    // Schedule using 'after' with delay
    scheduleTaskAfter: (c, delayMs) => {
      c.schedule.after(delayMs, "onScheduledTask");
      return Date.now() + delayMs;
    },
    // Schedule with a task ID for ordering tests
    scheduleTaskAfterWithId: (c, taskId, delayMs) => {
      c.schedule.after(delayMs, "onScheduledTaskWithId", taskId);
      return { taskId, scheduledFor: Date.now() + delayMs };
    },
    // Original method for backward compatibility
    scheduleTask: (c, delayMs) => {
      const timestamp = Date.now() + delayMs;
      c.schedule.at(timestamp, "onScheduledTask");
      return timestamp;
    },
    // Getters for state
    getLastRun: (c) => {
      return c.state.lastRun;
    },
    getScheduledCount: (c) => {
      return c.state.scheduledCount;
    },
    getTaskHistory: (c) => {
      return c.state.taskHistory;
    },
    clearHistory: (c) => {
      c.state.taskHistory = [];
      c.state.scheduledCount = 0;
      c.state.lastRun = 0;
      return true;
    },
    // Scheduled task handlers
    onScheduledTask: (c) => {
      c.state.lastRun = Date.now();
      c.state.scheduledCount++;
      c.broadcast("scheduled", {
        time: c.state.lastRun,
        count: c.state.scheduledCount
      });
    },
    onScheduledTaskWithId: (c, taskId) => {
      c.state.lastRun = Date.now();
      c.state.scheduledCount++;
      c.state.taskHistory.push(taskId);
      c.broadcast("scheduledWithId", {
        taskId,
        time: c.state.lastRun,
        count: c.state.scheduledCount
      });
    }
  }
});

// fixtures/driver-test-suite/sleep.ts
var SLEEP_TIMEOUT = 500;
var sleep = actor({
  onAuth: () => {
  },
  state: { startCount: 0, sleepCount: 0 },
  onStart: (c) => {
    c.state.startCount += 1;
  },
  onStop: (c) => {
    c.state.sleepCount += 1;
  },
  actions: {
    triggerSleep: (c) => {
      c.sleep();
    },
    getCounts: (c) => {
      return { startCount: c.state.startCount, sleepCount: c.state.sleepCount };
    },
    setAlarm: async (c, duration) => {
      await c.schedule.after(duration, "onAlarm");
    },
    onAlarm: (c) => {
      c.log.info("alarm called");
    }
  },
  options: {
    sleepTimeout: SLEEP_TIMEOUT
  }
});
var sleepWithLongRpc = actor({
  onAuth: () => {
  },
  state: { startCount: 0, sleepCount: 0 },
  createVars: () => ({}),
  onStart: (c) => {
    c.state.startCount += 1;
  },
  onStop: (c) => {
    c.state.sleepCount += 1;
  },
  actions: {
    getCounts: (c) => {
      return { startCount: c.state.startCount, sleepCount: c.state.sleepCount };
    },
    longRunningRpc: async (c) => {
      c.log.info("starting long running rpc");
      c.vars.longRunningResolve = Promise.withResolvers();
      c.broadcast("waiting");
      await c.vars.longRunningResolve.promise;
      c.log.info("finished long running rpc");
    },
    finishLongRunningRpc: (c) => c.vars.longRunningResolve?.resolve()
  },
  options: {
    sleepTimeout: SLEEP_TIMEOUT
  }
});
var sleepWithRawHttp = actor({
  onAuth: () => {
  },
  state: { startCount: 0, sleepCount: 0, requestCount: 0 },
  onStart: (c) => {
    c.state.startCount += 1;
  },
  onStop: (c) => {
    c.state.sleepCount += 1;
  },
  onFetch: async (c, request) => {
    c.state.requestCount += 1;
    const url = new URL(request.url);
    if (url.pathname === "/long-request") {
      const duration = parseInt(url.searchParams.get("duration") || "1000");
      c.log.info("starting long fetch request", { duration });
      await new Promise((resolve) => setTimeout(resolve, duration));
      c.log.info("finished long fetch request");
      return new Response(JSON.stringify({ completed: true }), {
        headers: { "Content-Type": "application/json" }
      });
    }
    return new Response("Not Found", { status: 404 });
  },
  actions: {
    getCounts: (c) => {
      return {
        startCount: c.state.startCount,
        sleepCount: c.state.sleepCount,
        requestCount: c.state.requestCount
      };
    }
  },
  options: {
    sleepTimeout: SLEEP_TIMEOUT
  }
});
var sleepWithRawWebSocket = actor({
  onAuth: () => {
  },
  state: { startCount: 0, sleepCount: 0, connectionCount: 0 },
  onStart: (c) => {
    c.state.startCount += 1;
  },
  onStop: (c) => {
    c.state.sleepCount += 1;
  },
  onWebSocket: (c, websocket, opts) => {
    c.state.connectionCount += 1;
    c.log.info("websocket connected", {
      connectionCount: c.state.connectionCount
    });
    websocket.send(
      JSON.stringify({
        type: "connected",
        connectionCount: c.state.connectionCount
      })
    );
    websocket.addEventListener("message", (event) => {
      const data = event.data;
      if (typeof data === "string") {
        try {
          const parsed = JSON.parse(data);
          if (parsed.type === "getCounts") {
            websocket.send(
              JSON.stringify({
                type: "counts",
                startCount: c.state.startCount,
                sleepCount: c.state.sleepCount,
                connectionCount: c.state.connectionCount
              })
            );
          } else if (parsed.type === "keepAlive") {
            websocket.send(JSON.stringify({ type: "ack" }));
          }
        } catch {
          websocket.send(data);
        }
      }
    });
    websocket.addEventListener("close", () => {
      c.state.connectionCount -= 1;
      c.log.info("websocket disconnected", {
        connectionCount: c.state.connectionCount
      });
    });
  },
  actions: {
    getCounts: (c) => {
      return {
        startCount: c.state.startCount,
        sleepCount: c.state.sleepCount,
        connectionCount: c.state.connectionCount
      };
    }
  },
  options: {
    sleepTimeout: SLEEP_TIMEOUT
  }
});
var sleepWithNoSleepOption = actor({
  onAuth: () => {
  },
  state: { startCount: 0, sleepCount: 0 },
  onStart: (c) => {
    c.state.startCount += 1;
  },
  onStop: (c) => {
    c.state.sleepCount += 1;
  },
  actions: {
    getCounts: (c) => {
      return { startCount: c.state.startCount, sleepCount: c.state.sleepCount };
    }
  },
  options: {
    sleepTimeout: SLEEP_TIMEOUT,
    noSleep: true
  }
});

// fixtures/driver-test-suite/vars.ts
var staticVarActor = actor({
  onAuth: () => {
  },
  state: { value: 0 },
  connState: { hello: "world" },
  vars: { counter: 42, name: "test-actor" },
  actions: {
    getVars: (c) => {
      return c.vars;
    },
    getName: (c) => {
      return c.vars.name;
    }
  }
});
var nestedVarActor = actor({
  onAuth: () => {
  },
  state: { value: 0 },
  connState: { hello: "world" },
  vars: {
    counter: 42,
    nested: {
      value: "original",
      array: [1, 2, 3],
      obj: { key: "value" }
    }
  },
  actions: {
    getVars: (c) => {
      return c.vars;
    },
    modifyNested: (c) => {
      c.vars.nested.value = "modified";
      c.vars.nested.array.push(4);
      c.vars.nested.obj.key = "new-value";
      return c.vars;
    }
  }
});
var dynamicVarActor = actor({
  onAuth: () => {
  },
  state: { value: 0 },
  connState: { hello: "world" },
  createVars: () => {
    return {
      random: Math.random(),
      computed: `Actor-${Math.floor(Math.random() * 1e3)}`
    };
  },
  actions: {
    getVars: (c) => {
      return c.vars;
    }
  }
});
var uniqueVarActor = actor({
  onAuth: () => {
  },
  state: { value: 0 },
  connState: { hello: "world" },
  createVars: () => {
    return {
      id: Math.floor(Math.random() * 1e6)
    };
  },
  actions: {
    getVars: (c) => {
      return c.vars;
    }
  }
});
var driverCtxActor = actor({
  onAuth: () => {
  },
  state: { value: 0 },
  connState: { hello: "world" },
  createVars: (c, driverCtx) => {
    return {
      hasDriverCtx: Boolean(driverCtx?.isTest)
    };
  },
  actions: {
    getVars: (c) => {
      return c.vars;
    }
  }
});

// fixtures/driver-test-suite/registry.ts
var registry = setup({
  use: {
    // From counter.ts
    counter,
    // From lifecycle.ts
    counterWithLifecycle,
    // From scheduled.ts
    scheduled,
    // From sleep.ts
    sleep,
    sleepWithLongRpc,
    sleepWithRawHttp,
    sleepWithRawWebSocket,
    sleepWithNoSleepOption,
    // From error-handling.ts
    errorHandlingActor,
    customTimeoutActor,
    // From inline-client.ts
    inlineClientActor,
    // From action-inputs.ts
    inputActor,
    // From action-timeout.ts
    shortTimeoutActor,
    longTimeoutActor,
    defaultTimeoutActor,
    syncTimeoutActor,
    // From action-types.ts
    syncActionActor,
    asyncActionActor,
    promiseActor,
    // From conn-params.ts
    counterWithParams,
    // From conn-state.ts
    connStateActor,
    // From actor-conn.ts
    connLivenessActor,
    // From metadata.ts
    metadataActor,
    // From vars.ts
    staticVarActor,
    nestedVarActor,
    dynamicVarActor,
    uniqueVarActor,
    driverCtxActor,
    // From auth.ts
    authActor,
    intentAuthActor,
    publicActor,
    noAuthActor,
    asyncAuthActor,
    // From raw-http.ts
    rawHttpActor,
    rawHttpNoHandlerActor,
    rawHttpVoidReturnActor,
    rawHttpHonoActor,
    // From raw-http-auth.ts
    rawHttpAuthActor,
    rawHttpNoAuthActor,
    rawHttpPublicActor,
    rawHttpCustomAuthActor,
    // From raw-http-request-properties.ts
    rawHttpRequestPropertiesActor,
    // From raw-websocket.ts
    rawWebSocketActor,
    rawWebSocketBinaryActor,
    // From raw-websocket-auth.ts
    rawWebSocketAuthActor,
    rawWebSocketNoAuthActor,
    rawWebSocketPublicActor,
    rawWebSocketCustomAuthActor,
    // From request-access.ts
    requestAccessActor,
    requestAccessAuthActor,
    // From actor-onstatechange.ts
    onStateChangeActor
  }
});
export {
  registry
};
//! These configs configs hold anything that's not platform-specific about running actors.
//# sourceMappingURL=data:application/json;base64,
